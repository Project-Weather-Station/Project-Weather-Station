
tempeusingi2c.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000015ec  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0800177c  0800177c  0000277c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080017d4  080017d4  0000305c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080017d4  080017d4  000027d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080017dc  080017dc  0000305c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080017dc  080017dc  000027dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080017e0  080017e0  000027e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080017e4  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000305c  2**0
                  CONTENTS
 10 .bss          0000016c  2000005c  2000005c  0000305c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001c8  200001c8  0000305c  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000018ac  00000000  00000000  00003086  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000088c  00000000  00000000  00004932  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000218  00000000  00000000  000051c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000016a  00000000  00000000  000053d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a48e  00000000  00000000  00005542  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002a37  00000000  00000000  0001f9d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008db90  00000000  00000000  00022407  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000aff97  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000d90  00000000  00000000  000affdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 00000025  00000000  00000000  000b0d6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000005b  00000000  00000000  000b0d91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08001764 	.word	0x08001764

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08001764 	.word	0x08001764

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <delay_us>:
#include "stm32f4xx.h"

#define DHT_PORT GPIOA
#define DHT_PIN  1

static void delay_us(int us) {
 8000270:	b480      	push	{r7}
 8000272:	b083      	sub	sp, #12
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
    // Assuming SysTick is 16 MHz
    SysTick->LOAD = us * 16;
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	011a      	lsls	r2, r3, #4
 800027c:	4b0b      	ldr	r3, [pc, #44]	@ (80002ac <delay_us+0x3c>)
 800027e:	605a      	str	r2, [r3, #4]
    SysTick->VAL = 0;
 8000280:	4b0a      	ldr	r3, [pc, #40]	@ (80002ac <delay_us+0x3c>)
 8000282:	2200      	movs	r2, #0
 8000284:	609a      	str	r2, [r3, #8]
    SysTick->CTRL = 5;
 8000286:	4b09      	ldr	r3, [pc, #36]	@ (80002ac <delay_us+0x3c>)
 8000288:	2205      	movs	r2, #5
 800028a:	601a      	str	r2, [r3, #0]
    while (!(SysTick->CTRL & 0x10000));
 800028c:	bf00      	nop
 800028e:	4b07      	ldr	r3, [pc, #28]	@ (80002ac <delay_us+0x3c>)
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000296:	2b00      	cmp	r3, #0
 8000298:	d0f9      	beq.n	800028e <delay_us+0x1e>
    SysTick->CTRL = 0;
 800029a:	4b04      	ldr	r3, [pc, #16]	@ (80002ac <delay_us+0x3c>)
 800029c:	2200      	movs	r2, #0
 800029e:	601a      	str	r2, [r3, #0]
}
 80002a0:	bf00      	nop
 80002a2:	370c      	adds	r7, #12
 80002a4:	46bd      	mov	sp, r7
 80002a6:	bc80      	pop	{r7}
 80002a8:	4770      	bx	lr
 80002aa:	bf00      	nop
 80002ac:	e000e010 	.word	0xe000e010

080002b0 <DHT_SetPinOutput>:

static void DHT_SetPinOutput(void) {
 80002b0:	b480      	push	{r7}
 80002b2:	af00      	add	r7, sp, #0
    DHT_PORT->MODER |= (1 << (DHT_PIN * 2));
 80002b4:	4b04      	ldr	r3, [pc, #16]	@ (80002c8 <DHT_SetPinOutput+0x18>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	4a03      	ldr	r2, [pc, #12]	@ (80002c8 <DHT_SetPinOutput+0x18>)
 80002ba:	f043 0304 	orr.w	r3, r3, #4
 80002be:	6013      	str	r3, [r2, #0]
}
 80002c0:	bf00      	nop
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bc80      	pop	{r7}
 80002c6:	4770      	bx	lr
 80002c8:	40020000 	.word	0x40020000

080002cc <DHT_SetPinInput>:

static void DHT_SetPinInput(void) {
 80002cc:	b480      	push	{r7}
 80002ce:	af00      	add	r7, sp, #0
    DHT_PORT->MODER &= ~(3 << (DHT_PIN * 2));
 80002d0:	4b04      	ldr	r3, [pc, #16]	@ (80002e4 <DHT_SetPinInput+0x18>)
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	4a03      	ldr	r2, [pc, #12]	@ (80002e4 <DHT_SetPinInput+0x18>)
 80002d6:	f023 030c 	bic.w	r3, r3, #12
 80002da:	6013      	str	r3, [r2, #0]
}
 80002dc:	bf00      	nop
 80002de:	46bd      	mov	sp, r7
 80002e0:	bc80      	pop	{r7}
 80002e2:	4770      	bx	lr
 80002e4:	40020000 	.word	0x40020000

080002e8 <DHT_ReadBit>:

static int DHT_ReadBit(void) {
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0
    while (!(DHT_PORT->IDR & (1 << DHT_PIN)));  // Wait for HIGH
 80002ec:	bf00      	nop
 80002ee:	4b0a      	ldr	r3, [pc, #40]	@ (8000318 <DHT_ReadBit+0x30>)
 80002f0:	691b      	ldr	r3, [r3, #16]
 80002f2:	f003 0302 	and.w	r3, r3, #2
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d0f9      	beq.n	80002ee <DHT_ReadBit+0x6>
    delay_us(40);
 80002fa:	2028      	movs	r0, #40	@ 0x28
 80002fc:	f7ff ffb8 	bl	8000270 <delay_us>
    if (DHT_PORT->IDR & (1 << DHT_PIN)) return 1;
 8000300:	4b05      	ldr	r3, [pc, #20]	@ (8000318 <DHT_ReadBit+0x30>)
 8000302:	691b      	ldr	r3, [r3, #16]
 8000304:	f003 0302 	and.w	r3, r3, #2
 8000308:	2b00      	cmp	r3, #0
 800030a:	d001      	beq.n	8000310 <DHT_ReadBit+0x28>
 800030c:	2301      	movs	r3, #1
 800030e:	e000      	b.n	8000312 <DHT_ReadBit+0x2a>
    else return 0;
 8000310:	2300      	movs	r3, #0
}
 8000312:	4618      	mov	r0, r3
 8000314:	bd80      	pop	{r7, pc}
 8000316:	bf00      	nop
 8000318:	40020000 	.word	0x40020000

0800031c <DHT11_Read>:

int DHT11_Read(int *temperature, int *humidity) {
 800031c:	b580      	push	{r7, lr}
 800031e:	b088      	sub	sp, #32
 8000320:	af00      	add	r7, sp, #0
 8000322:	6078      	str	r0, [r7, #4]
 8000324:	6039      	str	r1, [r7, #0]
    int data[5] = {0};
 8000326:	f107 0308 	add.w	r3, r7, #8
 800032a:	2200      	movs	r2, #0
 800032c:	601a      	str	r2, [r3, #0]
 800032e:	605a      	str	r2, [r3, #4]
 8000330:	609a      	str	r2, [r3, #8]
 8000332:	60da      	str	r2, [r3, #12]
 8000334:	611a      	str	r2, [r3, #16]

    DHT_SetPinOutput();
 8000336:	f7ff ffbb 	bl	80002b0 <DHT_SetPinOutput>
    DHT_PORT->ODR &= ~(1 << DHT_PIN);  // Pull low
 800033a:	4b31      	ldr	r3, [pc, #196]	@ (8000400 <DHT11_Read+0xe4>)
 800033c:	695b      	ldr	r3, [r3, #20]
 800033e:	4a30      	ldr	r2, [pc, #192]	@ (8000400 <DHT11_Read+0xe4>)
 8000340:	f023 0302 	bic.w	r3, r3, #2
 8000344:	6153      	str	r3, [r2, #20]
    delay_us(18000);
 8000346:	f244 6050 	movw	r0, #18000	@ 0x4650
 800034a:	f7ff ff91 	bl	8000270 <delay_us>
    DHT_PORT->ODR |= (1 << DHT_PIN);   // Pull high
 800034e:	4b2c      	ldr	r3, [pc, #176]	@ (8000400 <DHT11_Read+0xe4>)
 8000350:	695b      	ldr	r3, [r3, #20]
 8000352:	4a2b      	ldr	r2, [pc, #172]	@ (8000400 <DHT11_Read+0xe4>)
 8000354:	f043 0302 	orr.w	r3, r3, #2
 8000358:	6153      	str	r3, [r2, #20]
    delay_us(20);
 800035a:	2014      	movs	r0, #20
 800035c:	f7ff ff88 	bl	8000270 <delay_us>
    DHT_SetPinInput();
 8000360:	f7ff ffb4 	bl	80002cc <DHT_SetPinInput>

    // Wait for response
    delay_us(80);  // DHT pulls low
 8000364:	2050      	movs	r0, #80	@ 0x50
 8000366:	f7ff ff83 	bl	8000270 <delay_us>
    delay_us(80);  // DHT pulls high
 800036a:	2050      	movs	r0, #80	@ 0x50
 800036c:	f7ff ff80 	bl	8000270 <delay_us>

    for (int i = 0; i < 40; i++) {
 8000370:	2300      	movs	r3, #0
 8000372:	61fb      	str	r3, [r7, #28]
 8000374:	e02e      	b.n	80003d4 <DHT11_Read+0xb8>
        data[i/8] <<= 1;
 8000376:	69fb      	ldr	r3, [r7, #28]
 8000378:	2b00      	cmp	r3, #0
 800037a:	da00      	bge.n	800037e <DHT11_Read+0x62>
 800037c:	3307      	adds	r3, #7
 800037e:	10db      	asrs	r3, r3, #3
 8000380:	461a      	mov	r2, r3
 8000382:	0093      	lsls	r3, r2, #2
 8000384:	3320      	adds	r3, #32
 8000386:	443b      	add	r3, r7
 8000388:	f853 3c18 	ldr.w	r3, [r3, #-24]
 800038c:	0059      	lsls	r1, r3, #1
 800038e:	0093      	lsls	r3, r2, #2
 8000390:	3320      	adds	r3, #32
 8000392:	443b      	add	r3, r7
 8000394:	f843 1c18 	str.w	r1, [r3, #-24]
        data[i/8] |= DHT_ReadBit();
 8000398:	f7ff ffa6 	bl	80002e8 <DHT_ReadBit>
 800039c:	4601      	mov	r1, r0
 800039e:	69fb      	ldr	r3, [r7, #28]
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	da00      	bge.n	80003a6 <DHT11_Read+0x8a>
 80003a4:	3307      	adds	r3, #7
 80003a6:	10db      	asrs	r3, r3, #3
 80003a8:	461a      	mov	r2, r3
 80003aa:	0093      	lsls	r3, r2, #2
 80003ac:	3320      	adds	r3, #32
 80003ae:	443b      	add	r3, r7
 80003b0:	f853 3c18 	ldr.w	r3, [r3, #-24]
 80003b4:	4319      	orrs	r1, r3
 80003b6:	0093      	lsls	r3, r2, #2
 80003b8:	3320      	adds	r3, #32
 80003ba:	443b      	add	r3, r7
 80003bc:	f843 1c18 	str.w	r1, [r3, #-24]
        while (DHT_PORT->IDR & (1 << DHT_PIN));  // Wait for end of bit
 80003c0:	bf00      	nop
 80003c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000400 <DHT11_Read+0xe4>)
 80003c4:	691b      	ldr	r3, [r3, #16]
 80003c6:	f003 0302 	and.w	r3, r3, #2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d1f9      	bne.n	80003c2 <DHT11_Read+0xa6>
    for (int i = 0; i < 40; i++) {
 80003ce:	69fb      	ldr	r3, [r7, #28]
 80003d0:	3301      	adds	r3, #1
 80003d2:	61fb      	str	r3, [r7, #28]
 80003d4:	69fb      	ldr	r3, [r7, #28]
 80003d6:	2b27      	cmp	r3, #39	@ 0x27
 80003d8:	ddcd      	ble.n	8000376 <DHT11_Read+0x5a>
    }

    if (data[4] != (data[0] + data[2])) return 1;
 80003da:	69ba      	ldr	r2, [r7, #24]
 80003dc:	68b9      	ldr	r1, [r7, #8]
 80003de:	693b      	ldr	r3, [r7, #16]
 80003e0:	440b      	add	r3, r1
 80003e2:	429a      	cmp	r2, r3
 80003e4:	d001      	beq.n	80003ea <DHT11_Read+0xce>
 80003e6:	2301      	movs	r3, #1
 80003e8:	e006      	b.n	80003f8 <DHT11_Read+0xdc>

    *humidity = data[0];
 80003ea:	68ba      	ldr	r2, [r7, #8]
 80003ec:	683b      	ldr	r3, [r7, #0]
 80003ee:	601a      	str	r2, [r3, #0]
    *temperature = data[2];
 80003f0:	693a      	ldr	r2, [r7, #16]
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	601a      	str	r2, [r3, #0]

    return 0;
 80003f6:	2300      	movs	r3, #0
}
 80003f8:	4618      	mov	r0, r3
 80003fa:	3720      	adds	r7, #32
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bd80      	pop	{r7, pc}
 8000400:	40020000 	.word	0x40020000

08000404 <DHT11_Init>:

void DHT11_Init(void) {
 8000404:	b580      	push	{r7, lr}
 8000406:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000408:	4b07      	ldr	r3, [pc, #28]	@ (8000428 <DHT11_Init+0x24>)
 800040a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800040c:	4a06      	ldr	r2, [pc, #24]	@ (8000428 <DHT11_Init+0x24>)
 800040e:	f043 0301 	orr.w	r3, r3, #1
 8000412:	6313      	str	r3, [r2, #48]	@ 0x30
    DHT_SetPinOutput();
 8000414:	f7ff ff4c 	bl	80002b0 <DHT_SetPinOutput>
    DHT_PORT->ODR |= (1 << DHT_PIN);
 8000418:	4b04      	ldr	r3, [pc, #16]	@ (800042c <DHT11_Init+0x28>)
 800041a:	695b      	ldr	r3, [r3, #20]
 800041c:	4a03      	ldr	r2, [pc, #12]	@ (800042c <DHT11_Init+0x28>)
 800041e:	f043 0302 	orr.w	r3, r3, #2
 8000422:	6153      	str	r3, [r2, #20]
}
 8000424:	bf00      	nop
 8000426:	bd80      	pop	{r7, pc}
 8000428:	40023800 	.word	0x40023800
 800042c:	40020000 	.word	0x40020000

08000430 <I2C1_Init>:
#include "i2c.h"
#include "stm32f4xx.h"

void I2C1_Init(void) {
 8000430:	b480      	push	{r7}
 8000432:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8000434:	4b1b      	ldr	r3, [pc, #108]	@ (80004a4 <I2C1_Init+0x74>)
 8000436:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000438:	4a1a      	ldr	r2, [pc, #104]	@ (80004a4 <I2C1_Init+0x74>)
 800043a:	f043 0302 	orr.w	r3, r3, #2
 800043e:	6313      	str	r3, [r2, #48]	@ 0x30
    RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 8000440:	4b18      	ldr	r3, [pc, #96]	@ (80004a4 <I2C1_Init+0x74>)
 8000442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000444:	4a17      	ldr	r2, [pc, #92]	@ (80004a4 <I2C1_Init+0x74>)
 8000446:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800044a:	6413      	str	r3, [r2, #64]	@ 0x40

    GPIOB->MODER |= (2 << (6 * 2)) | (2 << (7 * 2));  // PB6, PB7 AF
 800044c:	4b16      	ldr	r3, [pc, #88]	@ (80004a8 <I2C1_Init+0x78>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	4a15      	ldr	r2, [pc, #84]	@ (80004a8 <I2C1_Init+0x78>)
 8000452:	f443 4320 	orr.w	r3, r3, #40960	@ 0xa000
 8000456:	6013      	str	r3, [r2, #0]
    GPIOB->AFR[0] |= (4 << (6 * 4)) | (4 << (7 * 4));
 8000458:	4b13      	ldr	r3, [pc, #76]	@ (80004a8 <I2C1_Init+0x78>)
 800045a:	6a1b      	ldr	r3, [r3, #32]
 800045c:	4a12      	ldr	r2, [pc, #72]	@ (80004a8 <I2C1_Init+0x78>)
 800045e:	f043 4388 	orr.w	r3, r3, #1140850688	@ 0x44000000
 8000462:	6213      	str	r3, [r2, #32]
    GPIOB->OTYPER |= (1 << 6) | (1 << 7);
 8000464:	4b10      	ldr	r3, [pc, #64]	@ (80004a8 <I2C1_Init+0x78>)
 8000466:	685b      	ldr	r3, [r3, #4]
 8000468:	4a0f      	ldr	r2, [pc, #60]	@ (80004a8 <I2C1_Init+0x78>)
 800046a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800046e:	6053      	str	r3, [r2, #4]
    GPIOB->OSPEEDR |= (3 << (6 * 2)) | (3 << (7 * 2));
 8000470:	4b0d      	ldr	r3, [pc, #52]	@ (80004a8 <I2C1_Init+0x78>)
 8000472:	689b      	ldr	r3, [r3, #8]
 8000474:	4a0c      	ldr	r2, [pc, #48]	@ (80004a8 <I2C1_Init+0x78>)
 8000476:	f443 4370 	orr.w	r3, r3, #61440	@ 0xf000
 800047a:	6093      	str	r3, [r2, #8]

    I2C1->CR2 = 16;
 800047c:	4b0b      	ldr	r3, [pc, #44]	@ (80004ac <I2C1_Init+0x7c>)
 800047e:	2210      	movs	r2, #16
 8000480:	605a      	str	r2, [r3, #4]
    I2C1->CCR = 80;
 8000482:	4b0a      	ldr	r3, [pc, #40]	@ (80004ac <I2C1_Init+0x7c>)
 8000484:	2250      	movs	r2, #80	@ 0x50
 8000486:	61da      	str	r2, [r3, #28]
    I2C1->TRISE = 17;
 8000488:	4b08      	ldr	r3, [pc, #32]	@ (80004ac <I2C1_Init+0x7c>)
 800048a:	2211      	movs	r2, #17
 800048c:	621a      	str	r2, [r3, #32]
    I2C1->CR1 |= I2C_CR1_PE;
 800048e:	4b07      	ldr	r3, [pc, #28]	@ (80004ac <I2C1_Init+0x7c>)
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	4a06      	ldr	r2, [pc, #24]	@ (80004ac <I2C1_Init+0x7c>)
 8000494:	f043 0301 	orr.w	r3, r3, #1
 8000498:	6013      	str	r3, [r2, #0]
}
 800049a:	bf00      	nop
 800049c:	46bd      	mov	sp, r7
 800049e:	bc80      	pop	{r7}
 80004a0:	4770      	bx	lr
 80004a2:	bf00      	nop
 80004a4:	40023800 	.word	0x40023800
 80004a8:	40020400 	.word	0x40020400
 80004ac:	40005400 	.word	0x40005400

080004b0 <I2C1_Write>:

void I2C1_Write(int addr, int data) {
 80004b0:	b480      	push	{r7}
 80004b2:	b083      	sub	sp, #12
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
 80004b8:	6039      	str	r1, [r7, #0]
    while (I2C1->SR2 & I2C_SR2_BUSY);
 80004ba:	bf00      	nop
 80004bc:	4b1d      	ldr	r3, [pc, #116]	@ (8000534 <I2C1_Write+0x84>)
 80004be:	699b      	ldr	r3, [r3, #24]
 80004c0:	f003 0302 	and.w	r3, r3, #2
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d1f9      	bne.n	80004bc <I2C1_Write+0xc>
    I2C1->CR1 |= I2C_CR1_START;
 80004c8:	4b1a      	ldr	r3, [pc, #104]	@ (8000534 <I2C1_Write+0x84>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	4a19      	ldr	r2, [pc, #100]	@ (8000534 <I2C1_Write+0x84>)
 80004ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80004d2:	6013      	str	r3, [r2, #0]
    while (!(I2C1->SR1 & I2C_SR1_SB));
 80004d4:	bf00      	nop
 80004d6:	4b17      	ldr	r3, [pc, #92]	@ (8000534 <I2C1_Write+0x84>)
 80004d8:	695b      	ldr	r3, [r3, #20]
 80004da:	f003 0301 	and.w	r3, r3, #1
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d0f9      	beq.n	80004d6 <I2C1_Write+0x26>
    I2C1->DR = addr;
 80004e2:	4a14      	ldr	r2, [pc, #80]	@ (8000534 <I2C1_Write+0x84>)
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	6113      	str	r3, [r2, #16]
    while (!(I2C1->SR1 & I2C_SR1_ADDR));
 80004e8:	bf00      	nop
 80004ea:	4b12      	ldr	r3, [pc, #72]	@ (8000534 <I2C1_Write+0x84>)
 80004ec:	695b      	ldr	r3, [r3, #20]
 80004ee:	f003 0302 	and.w	r3, r3, #2
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d0f9      	beq.n	80004ea <I2C1_Write+0x3a>
    (void)I2C1->SR2;
 80004f6:	4b0f      	ldr	r3, [pc, #60]	@ (8000534 <I2C1_Write+0x84>)
 80004f8:	699b      	ldr	r3, [r3, #24]
    while (!(I2C1->SR1 & I2C_SR1_TXE));
 80004fa:	bf00      	nop
 80004fc:	4b0d      	ldr	r3, [pc, #52]	@ (8000534 <I2C1_Write+0x84>)
 80004fe:	695b      	ldr	r3, [r3, #20]
 8000500:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000504:	2b00      	cmp	r3, #0
 8000506:	d0f9      	beq.n	80004fc <I2C1_Write+0x4c>
    I2C1->DR = data;
 8000508:	4a0a      	ldr	r2, [pc, #40]	@ (8000534 <I2C1_Write+0x84>)
 800050a:	683b      	ldr	r3, [r7, #0]
 800050c:	6113      	str	r3, [r2, #16]
    while (!(I2C1->SR1 & I2C_SR1_BTF));
 800050e:	bf00      	nop
 8000510:	4b08      	ldr	r3, [pc, #32]	@ (8000534 <I2C1_Write+0x84>)
 8000512:	695b      	ldr	r3, [r3, #20]
 8000514:	f003 0304 	and.w	r3, r3, #4
 8000518:	2b00      	cmp	r3, #0
 800051a:	d0f9      	beq.n	8000510 <I2C1_Write+0x60>
    I2C1->CR1 |= I2C_CR1_STOP;
 800051c:	4b05      	ldr	r3, [pc, #20]	@ (8000534 <I2C1_Write+0x84>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	4a04      	ldr	r2, [pc, #16]	@ (8000534 <I2C1_Write+0x84>)
 8000522:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000526:	6013      	str	r3, [r2, #0]
}
 8000528:	bf00      	nop
 800052a:	370c      	adds	r7, #12
 800052c:	46bd      	mov	sp, r7
 800052e:	bc80      	pop	{r7}
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop
 8000534:	40005400 	.word	0x40005400

08000538 <__io_putchar>:
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

//void ITM_SendChar(uint8_t ch)
int __io_putchar(int ch)
{
 8000538:	b480      	push	{r7}
 800053a:	b083      	sub	sp, #12
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
	//Enable TRCENA
	DEMCR |= (1 << 24);
 8000540:	4b0e      	ldr	r3, [pc, #56]	@ (800057c <__io_putchar+0x44>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	4a0d      	ldr	r2, [pc, #52]	@ (800057c <__io_putchar+0x44>)
 8000546:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800054a:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 800054c:	4b0c      	ldr	r3, [pc, #48]	@ (8000580 <__io_putchar+0x48>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4a0b      	ldr	r2, [pc, #44]	@ (8000580 <__io_putchar+0x48>)
 8000552:	f043 0301 	orr.w	r3, r3, #1
 8000556:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000558:	bf00      	nop
 800055a:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	f003 0301 	and.w	r3, r3, #1
 8000564:	2b00      	cmp	r3, #0
 8000566:	d0f8      	beq.n	800055a <__io_putchar+0x22>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000568:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	6013      	str	r3, [r2, #0]

	return 1;
 8000570:	2301      	movs	r3, #1
}
 8000572:	4618      	mov	r0, r3
 8000574:	370c      	adds	r7, #12
 8000576:	46bd      	mov	sp, r7
 8000578:	bc80      	pop	{r7}
 800057a:	4770      	bx	lr
 800057c:	e000edfc 	.word	0xe000edfc
 8000580:	e0000e00 	.word	0xe0000e00

08000584 <LCD_SendNibble>:
#define EN 0x04
#define RW 0x02
#define RS 0x01
#define BACKLIGHT 0x08

static void LCD_SendNibble(int nibble, int control) {
 8000584:	b580      	push	{r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
 800058c:	6039      	str	r1, [r7, #0]
    int data = nibble | control | BACKLIGHT;
 800058e:	687a      	ldr	r2, [r7, #4]
 8000590:	683b      	ldr	r3, [r7, #0]
 8000592:	4313      	orrs	r3, r2
 8000594:	f043 0308 	orr.w	r3, r3, #8
 8000598:	60fb      	str	r3, [r7, #12]
    I2C1_Write(LCD_ADDR, data | EN);
 800059a:	68fb      	ldr	r3, [r7, #12]
 800059c:	f043 0304 	orr.w	r3, r3, #4
 80005a0:	4619      	mov	r1, r3
 80005a2:	204e      	movs	r0, #78	@ 0x4e
 80005a4:	f7ff ff84 	bl	80004b0 <I2C1_Write>
    I2C1_Write(LCD_ADDR, data);
 80005a8:	68f9      	ldr	r1, [r7, #12]
 80005aa:	204e      	movs	r0, #78	@ 0x4e
 80005ac:	f7ff ff80 	bl	80004b0 <I2C1_Write>
}
 80005b0:	bf00      	nop
 80005b2:	3710      	adds	r7, #16
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}

080005b8 <LCD_SendCmd>:

void LCD_SendCmd(int cmd) {
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
    LCD_SendNibble(cmd & 0xF0, 0);
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80005c6:	2100      	movs	r1, #0
 80005c8:	4618      	mov	r0, r3
 80005ca:	f7ff ffdb 	bl	8000584 <LCD_SendNibble>
    LCD_SendNibble((cmd << 4) & 0xF0, 0);
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	011b      	lsls	r3, r3, #4
 80005d2:	b2db      	uxtb	r3, r3
 80005d4:	2100      	movs	r1, #0
 80005d6:	4618      	mov	r0, r3
 80005d8:	f7ff ffd4 	bl	8000584 <LCD_SendNibble>
}
 80005dc:	bf00      	nop
 80005de:	3708      	adds	r7, #8
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}

080005e4 <LCD_SendData>:

void LCD_SendData(int data) {
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
    LCD_SendNibble(data & 0xF0, RS);
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80005f2:	2101      	movs	r1, #1
 80005f4:	4618      	mov	r0, r3
 80005f6:	f7ff ffc5 	bl	8000584 <LCD_SendNibble>
    LCD_SendNibble((data << 4) & 0xF0, RS);
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	011b      	lsls	r3, r3, #4
 80005fe:	b2db      	uxtb	r3, r3
 8000600:	2101      	movs	r1, #1
 8000602:	4618      	mov	r0, r3
 8000604:	f7ff ffbe 	bl	8000584 <LCD_SendNibble>
}
 8000608:	bf00      	nop
 800060a:	3708      	adds	r7, #8
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}

08000610 <LCD_SendString>:

void LCD_SendString(char *str) {
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
    while (*str) LCD_SendData(*str++);
 8000618:	e006      	b.n	8000628 <LCD_SendString+0x18>
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	1c5a      	adds	r2, r3, #1
 800061e:	607a      	str	r2, [r7, #4]
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	4618      	mov	r0, r3
 8000624:	f7ff ffde 	bl	80005e4 <LCD_SendData>
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d1f4      	bne.n	800061a <LCD_SendString+0xa>
}
 8000630:	bf00      	nop
 8000632:	bf00      	nop
 8000634:	3708      	adds	r7, #8
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}

0800063a <LCD_Init>:

void LCD_Init(void) {
 800063a:	b580      	push	{r7, lr}
 800063c:	b082      	sub	sp, #8
 800063e:	af00      	add	r7, sp, #0
    I2C1_Init();
 8000640:	f7ff fef6 	bl	8000430 <I2C1_Init>
    for (int i = 0; i < 3; i++) {
 8000644:	2300      	movs	r3, #0
 8000646:	607b      	str	r3, [r7, #4]
 8000648:	e006      	b.n	8000658 <LCD_Init+0x1e>
        LCD_SendNibble(0x30, 0);
 800064a:	2100      	movs	r1, #0
 800064c:	2030      	movs	r0, #48	@ 0x30
 800064e:	f7ff ff99 	bl	8000584 <LCD_SendNibble>
    for (int i = 0; i < 3; i++) {
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	3301      	adds	r3, #1
 8000656:	607b      	str	r3, [r7, #4]
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	2b02      	cmp	r3, #2
 800065c:	ddf5      	ble.n	800064a <LCD_Init+0x10>
    }
    LCD_SendNibble(0x20, 0); // 4-bit mode
 800065e:	2100      	movs	r1, #0
 8000660:	2020      	movs	r0, #32
 8000662:	f7ff ff8f 	bl	8000584 <LCD_SendNibble>

    LCD_SendCmd(0x28); // 2 lines
 8000666:	2028      	movs	r0, #40	@ 0x28
 8000668:	f7ff ffa6 	bl	80005b8 <LCD_SendCmd>
    LCD_SendCmd(0x0C); // Display on
 800066c:	200c      	movs	r0, #12
 800066e:	f7ff ffa3 	bl	80005b8 <LCD_SendCmd>
    LCD_SendCmd(0x01); // Clear
 8000672:	2001      	movs	r0, #1
 8000674:	f7ff ffa0 	bl	80005b8 <LCD_SendCmd>
}
 8000678:	bf00      	nop
 800067a:	3708      	adds	r7, #8
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}

08000680 <main>:
#include "stm32f4xx.h"
#include "dht11.h"
#include "lcd_i2c.h"
#include <stdio.h>

int main(void) {
 8000680:	b580      	push	{r7, lr}
 8000682:	b08c      	sub	sp, #48	@ 0x30
 8000684:	af00      	add	r7, sp, #0
    char buffer[32];
    int temp, hum;

    LCD_Init();
 8000686:	f7ff ffd8 	bl	800063a <LCD_Init>
    DHT11_Init();
 800068a:	f7ff febb 	bl	8000404 <DHT11_Init>

    while (1) {
        if (DHT11_Read(&temp, &hum) == 0) {
 800068e:	f107 0208 	add.w	r2, r7, #8
 8000692:	f107 030c 	add.w	r3, r7, #12
 8000696:	4611      	mov	r1, r2
 8000698:	4618      	mov	r0, r3
 800069a:	f7ff fe3f 	bl	800031c <DHT11_Read>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d11e      	bne.n	80006e2 <main+0x62>
            LCD_SendCmd(0x80);
 80006a4:	2080      	movs	r0, #128	@ 0x80
 80006a6:	f7ff ff87 	bl	80005b8 <LCD_SendCmd>
            printf(buffer, "Temp: %d C", temp);
 80006aa:	68fa      	ldr	r2, [r7, #12]
 80006ac:	f107 0310 	add.w	r3, r7, #16
 80006b0:	4914      	ldr	r1, [pc, #80]	@ (8000704 <main+0x84>)
 80006b2:	4618      	mov	r0, r3
 80006b4:	f000 f9f0 	bl	8000a98 <iprintf>
            LCD_SendString(buffer);
 80006b8:	f107 0310 	add.w	r3, r7, #16
 80006bc:	4618      	mov	r0, r3
 80006be:	f7ff ffa7 	bl	8000610 <LCD_SendString>

            LCD_SendCmd(0xC0);
 80006c2:	20c0      	movs	r0, #192	@ 0xc0
 80006c4:	f7ff ff78 	bl	80005b8 <LCD_SendCmd>
            printf(buffer, "Hum:  %d %%", hum);
 80006c8:	68ba      	ldr	r2, [r7, #8]
 80006ca:	f107 0310 	add.w	r3, r7, #16
 80006ce:	490e      	ldr	r1, [pc, #56]	@ (8000708 <main+0x88>)
 80006d0:	4618      	mov	r0, r3
 80006d2:	f000 f9e1 	bl	8000a98 <iprintf>
            LCD_SendString(buffer);
 80006d6:	f107 0310 	add.w	r3, r7, #16
 80006da:	4618      	mov	r0, r3
 80006dc:	f7ff ff98 	bl	8000610 <LCD_SendString>
 80006e0:	e005      	b.n	80006ee <main+0x6e>
        } else {
            LCD_SendCmd(0x80);
 80006e2:	2080      	movs	r0, #128	@ 0x80
 80006e4:	f7ff ff68 	bl	80005b8 <LCD_SendCmd>
            LCD_SendString("Read Error");
 80006e8:	4808      	ldr	r0, [pc, #32]	@ (800070c <main+0x8c>)
 80006ea:	f7ff ff91 	bl	8000610 <LCD_SendString>
        }

        for (volatile int i = 0; i < 1000000; i++);
 80006ee:	2300      	movs	r3, #0
 80006f0:	607b      	str	r3, [r7, #4]
 80006f2:	e002      	b.n	80006fa <main+0x7a>
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	3301      	adds	r3, #1
 80006f8:	607b      	str	r3, [r7, #4]
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	4a04      	ldr	r2, [pc, #16]	@ (8000710 <main+0x90>)
 80006fe:	4293      	cmp	r3, r2
 8000700:	ddf8      	ble.n	80006f4 <main+0x74>
        if (DHT11_Read(&temp, &hum) == 0) {
 8000702:	e7c4      	b.n	800068e <main+0xe>
 8000704:	0800177c 	.word	0x0800177c
 8000708:	08001788 	.word	0x08001788
 800070c:	08001794 	.word	0x08001794
 8000710:	000f423f 	.word	0x000f423f

08000714 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b086      	sub	sp, #24
 8000718:	af00      	add	r7, sp, #0
 800071a:	60f8      	str	r0, [r7, #12]
 800071c:	60b9      	str	r1, [r7, #8]
 800071e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000720:	2300      	movs	r3, #0
 8000722:	617b      	str	r3, [r7, #20]
 8000724:	e00a      	b.n	800073c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000726:	f3af 8000 	nop.w
 800072a:	4601      	mov	r1, r0
 800072c:	68bb      	ldr	r3, [r7, #8]
 800072e:	1c5a      	adds	r2, r3, #1
 8000730:	60ba      	str	r2, [r7, #8]
 8000732:	b2ca      	uxtb	r2, r1
 8000734:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000736:	697b      	ldr	r3, [r7, #20]
 8000738:	3301      	adds	r3, #1
 800073a:	617b      	str	r3, [r7, #20]
 800073c:	697a      	ldr	r2, [r7, #20]
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	429a      	cmp	r2, r3
 8000742:	dbf0      	blt.n	8000726 <_read+0x12>
	}

return len;
 8000744:	687b      	ldr	r3, [r7, #4]
}
 8000746:	4618      	mov	r0, r3
 8000748:	3718      	adds	r7, #24
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}

0800074e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800074e:	b580      	push	{r7, lr}
 8000750:	b086      	sub	sp, #24
 8000752:	af00      	add	r7, sp, #0
 8000754:	60f8      	str	r0, [r7, #12]
 8000756:	60b9      	str	r1, [r7, #8]
 8000758:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800075a:	2300      	movs	r3, #0
 800075c:	617b      	str	r3, [r7, #20]
 800075e:	e009      	b.n	8000774 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000760:	68bb      	ldr	r3, [r7, #8]
 8000762:	1c5a      	adds	r2, r3, #1
 8000764:	60ba      	str	r2, [r7, #8]
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	4618      	mov	r0, r3
 800076a:	f7ff fee5 	bl	8000538 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800076e:	697b      	ldr	r3, [r7, #20]
 8000770:	3301      	adds	r3, #1
 8000772:	617b      	str	r3, [r7, #20]
 8000774:	697a      	ldr	r2, [r7, #20]
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	429a      	cmp	r2, r3
 800077a:	dbf1      	blt.n	8000760 <_write+0x12>
	}
	return len;
 800077c:	687b      	ldr	r3, [r7, #4]
}
 800077e:	4618      	mov	r0, r3
 8000780:	3718      	adds	r7, #24
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}

08000786 <_close>:

int _close(int file)
{
 8000786:	b480      	push	{r7}
 8000788:	b083      	sub	sp, #12
 800078a:	af00      	add	r7, sp, #0
 800078c:	6078      	str	r0, [r7, #4]
	return -1;
 800078e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000792:	4618      	mov	r0, r3
 8000794:	370c      	adds	r7, #12
 8000796:	46bd      	mov	sp, r7
 8000798:	bc80      	pop	{r7}
 800079a:	4770      	bx	lr

0800079c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800079c:	b480      	push	{r7}
 800079e:	b083      	sub	sp, #12
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
 80007a4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80007ac:	605a      	str	r2, [r3, #4]
	return 0;
 80007ae:	2300      	movs	r3, #0
}
 80007b0:	4618      	mov	r0, r3
 80007b2:	370c      	adds	r7, #12
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bc80      	pop	{r7}
 80007b8:	4770      	bx	lr

080007ba <_isatty>:

int _isatty(int file)
{
 80007ba:	b480      	push	{r7}
 80007bc:	b083      	sub	sp, #12
 80007be:	af00      	add	r7, sp, #0
 80007c0:	6078      	str	r0, [r7, #4]
	return 1;
 80007c2:	2301      	movs	r3, #1
}
 80007c4:	4618      	mov	r0, r3
 80007c6:	370c      	adds	r7, #12
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bc80      	pop	{r7}
 80007cc:	4770      	bx	lr

080007ce <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80007ce:	b480      	push	{r7}
 80007d0:	b085      	sub	sp, #20
 80007d2:	af00      	add	r7, sp, #0
 80007d4:	60f8      	str	r0, [r7, #12]
 80007d6:	60b9      	str	r1, [r7, #8]
 80007d8:	607a      	str	r2, [r7, #4]
	return 0;
 80007da:	2300      	movs	r3, #0
}
 80007dc:	4618      	mov	r0, r3
 80007de:	3714      	adds	r7, #20
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bc80      	pop	{r7}
 80007e4:	4770      	bx	lr
	...

080007e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b086      	sub	sp, #24
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007f0:	4a14      	ldr	r2, [pc, #80]	@ (8000844 <_sbrk+0x5c>)
 80007f2:	4b15      	ldr	r3, [pc, #84]	@ (8000848 <_sbrk+0x60>)
 80007f4:	1ad3      	subs	r3, r2, r3
 80007f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007f8:	697b      	ldr	r3, [r7, #20]
 80007fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007fc:	4b13      	ldr	r3, [pc, #76]	@ (800084c <_sbrk+0x64>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d102      	bne.n	800080a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000804:	4b11      	ldr	r3, [pc, #68]	@ (800084c <_sbrk+0x64>)
 8000806:	4a12      	ldr	r2, [pc, #72]	@ (8000850 <_sbrk+0x68>)
 8000808:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800080a:	4b10      	ldr	r3, [pc, #64]	@ (800084c <_sbrk+0x64>)
 800080c:	681a      	ldr	r2, [r3, #0]
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	4413      	add	r3, r2
 8000812:	693a      	ldr	r2, [r7, #16]
 8000814:	429a      	cmp	r2, r3
 8000816:	d207      	bcs.n	8000828 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000818:	f000 f9e2 	bl	8000be0 <__errno>
 800081c:	4603      	mov	r3, r0
 800081e:	220c      	movs	r2, #12
 8000820:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000822:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000826:	e009      	b.n	800083c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000828:	4b08      	ldr	r3, [pc, #32]	@ (800084c <_sbrk+0x64>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800082e:	4b07      	ldr	r3, [pc, #28]	@ (800084c <_sbrk+0x64>)
 8000830:	681a      	ldr	r2, [r3, #0]
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	4413      	add	r3, r2
 8000836:	4a05      	ldr	r2, [pc, #20]	@ (800084c <_sbrk+0x64>)
 8000838:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800083a:	68fb      	ldr	r3, [r7, #12]
}
 800083c:	4618      	mov	r0, r3
 800083e:	3718      	adds	r7, #24
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	20020000 	.word	0x20020000
 8000848:	00000400 	.word	0x00000400
 800084c:	20000078 	.word	0x20000078
 8000850:	200001c8 	.word	0x200001c8

08000854 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */

  DWT_Init();
 8000858:	f000 f802 	bl	8000860 <DWT_Init>
}
 800085c:	bf00      	nop
 800085e:	bd80      	pop	{r7, pc}

08000860 <DWT_Init>:
}
#pragma GCC pop_options


uint32_t DWT_Init(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000864:	4b14      	ldr	r3, [pc, #80]	@ (80008b8 <DWT_Init+0x58>)
 8000866:	68db      	ldr	r3, [r3, #12]
 8000868:	4a13      	ldr	r2, [pc, #76]	@ (80008b8 <DWT_Init+0x58>)
 800086a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800086e:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000870:	4b11      	ldr	r3, [pc, #68]	@ (80008b8 <DWT_Init+0x58>)
 8000872:	68db      	ldr	r3, [r3, #12]
 8000874:	4a10      	ldr	r2, [pc, #64]	@ (80008b8 <DWT_Init+0x58>)
 8000876:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800087a:	60d3      	str	r3, [r2, #12]
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 800087c:	4b0f      	ldr	r3, [pc, #60]	@ (80008bc <DWT_Init+0x5c>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a0e      	ldr	r2, [pc, #56]	@ (80008bc <DWT_Init+0x5c>)
 8000882:	f023 0301 	bic.w	r3, r3, #1
 8000886:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000888:	4b0c      	ldr	r3, [pc, #48]	@ (80008bc <DWT_Init+0x5c>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a0b      	ldr	r2, [pc, #44]	@ (80008bc <DWT_Init+0x5c>)
 800088e:	f043 0301 	orr.w	r3, r3, #1
 8000892:	6013      	str	r3, [r2, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8000894:	4b09      	ldr	r3, [pc, #36]	@ (80008bc <DWT_Init+0x5c>)
 8000896:	2200      	movs	r2, #0
 8000898:	605a      	str	r2, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 800089a:	bf00      	nop
    __ASM volatile ("NOP");
 800089c:	bf00      	nop
    __ASM volatile ("NOP");
 800089e:	bf00      	nop
    /* Check if clock cycle counter has started: 0 on success */
    return !(DWT->CYCCNT);
 80008a0:	4b06      	ldr	r3, [pc, #24]	@ (80008bc <DWT_Init+0x5c>)
 80008a2:	685b      	ldr	r3, [r3, #4]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	bf0c      	ite	eq
 80008a8:	2301      	moveq	r3, #1
 80008aa:	2300      	movne	r3, #0
 80008ac:	b2db      	uxtb	r3, r3
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bc80      	pop	{r7}
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	e000edf0 	.word	0xe000edf0
 80008bc:	e0001000 	.word	0xe0001000

080008c0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008c0:	480d      	ldr	r0, [pc, #52]	@ (80008f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008c2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80008c4:	f7ff ffc6 	bl	8000854 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008c8:	480c      	ldr	r0, [pc, #48]	@ (80008fc <LoopForever+0x6>)
  ldr r1, =_edata
 80008ca:	490d      	ldr	r1, [pc, #52]	@ (8000900 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008cc:	4a0d      	ldr	r2, [pc, #52]	@ (8000904 <LoopForever+0xe>)
  movs r3, #0
 80008ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008d0:	e002      	b.n	80008d8 <LoopCopyDataInit>

080008d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008d6:	3304      	adds	r3, #4

080008d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008dc:	d3f9      	bcc.n	80008d2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008de:	4a0a      	ldr	r2, [pc, #40]	@ (8000908 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008e0:	4c0a      	ldr	r4, [pc, #40]	@ (800090c <LoopForever+0x16>)
  movs r3, #0
 80008e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008e4:	e001      	b.n	80008ea <LoopFillZerobss>

080008e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008e8:	3204      	adds	r2, #4

080008ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008ec:	d3fb      	bcc.n	80008e6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80008ee:	f000 f97d 	bl	8000bec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008f2:	f7ff fec5 	bl	8000680 <main>

080008f6 <LoopForever>:

LoopForever:
  b LoopForever
 80008f6:	e7fe      	b.n	80008f6 <LoopForever>
  ldr   r0, =_estack
 80008f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80008fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000900:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000904:	080017e4 	.word	0x080017e4
  ldr r2, =_sbss
 8000908:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800090c:	200001c8 	.word	0x200001c8

08000910 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000910:	e7fe      	b.n	8000910 <ADC_IRQHandler>
	...

08000914 <std>:
 8000914:	2300      	movs	r3, #0
 8000916:	b510      	push	{r4, lr}
 8000918:	4604      	mov	r4, r0
 800091a:	e9c0 3300 	strd	r3, r3, [r0]
 800091e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000922:	6083      	str	r3, [r0, #8]
 8000924:	8181      	strh	r1, [r0, #12]
 8000926:	6643      	str	r3, [r0, #100]	@ 0x64
 8000928:	81c2      	strh	r2, [r0, #14]
 800092a:	6183      	str	r3, [r0, #24]
 800092c:	4619      	mov	r1, r3
 800092e:	2208      	movs	r2, #8
 8000930:	305c      	adds	r0, #92	@ 0x5c
 8000932:	f000 f906 	bl	8000b42 <memset>
 8000936:	4b0d      	ldr	r3, [pc, #52]	@ (800096c <std+0x58>)
 8000938:	6263      	str	r3, [r4, #36]	@ 0x24
 800093a:	4b0d      	ldr	r3, [pc, #52]	@ (8000970 <std+0x5c>)
 800093c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800093e:	4b0d      	ldr	r3, [pc, #52]	@ (8000974 <std+0x60>)
 8000940:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000942:	4b0d      	ldr	r3, [pc, #52]	@ (8000978 <std+0x64>)
 8000944:	6323      	str	r3, [r4, #48]	@ 0x30
 8000946:	4b0d      	ldr	r3, [pc, #52]	@ (800097c <std+0x68>)
 8000948:	6224      	str	r4, [r4, #32]
 800094a:	429c      	cmp	r4, r3
 800094c:	d006      	beq.n	800095c <std+0x48>
 800094e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8000952:	4294      	cmp	r4, r2
 8000954:	d002      	beq.n	800095c <std+0x48>
 8000956:	33d0      	adds	r3, #208	@ 0xd0
 8000958:	429c      	cmp	r4, r3
 800095a:	d105      	bne.n	8000968 <std+0x54>
 800095c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000960:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000964:	f000 b966 	b.w	8000c34 <__retarget_lock_init_recursive>
 8000968:	bd10      	pop	{r4, pc}
 800096a:	bf00      	nop
 800096c:	08000abd 	.word	0x08000abd
 8000970:	08000adf 	.word	0x08000adf
 8000974:	08000b17 	.word	0x08000b17
 8000978:	08000b3b 	.word	0x08000b3b
 800097c:	2000007c 	.word	0x2000007c

08000980 <stdio_exit_handler>:
 8000980:	4a02      	ldr	r2, [pc, #8]	@ (800098c <stdio_exit_handler+0xc>)
 8000982:	4903      	ldr	r1, [pc, #12]	@ (8000990 <stdio_exit_handler+0x10>)
 8000984:	4803      	ldr	r0, [pc, #12]	@ (8000994 <stdio_exit_handler+0x14>)
 8000986:	f000 b869 	b.w	8000a5c <_fwalk_sglue>
 800098a:	bf00      	nop
 800098c:	20000000 	.word	0x20000000
 8000990:	080014c5 	.word	0x080014c5
 8000994:	20000010 	.word	0x20000010

08000998 <cleanup_stdio>:
 8000998:	6841      	ldr	r1, [r0, #4]
 800099a:	4b0c      	ldr	r3, [pc, #48]	@ (80009cc <cleanup_stdio+0x34>)
 800099c:	4299      	cmp	r1, r3
 800099e:	b510      	push	{r4, lr}
 80009a0:	4604      	mov	r4, r0
 80009a2:	d001      	beq.n	80009a8 <cleanup_stdio+0x10>
 80009a4:	f000 fd8e 	bl	80014c4 <_fflush_r>
 80009a8:	68a1      	ldr	r1, [r4, #8]
 80009aa:	4b09      	ldr	r3, [pc, #36]	@ (80009d0 <cleanup_stdio+0x38>)
 80009ac:	4299      	cmp	r1, r3
 80009ae:	d002      	beq.n	80009b6 <cleanup_stdio+0x1e>
 80009b0:	4620      	mov	r0, r4
 80009b2:	f000 fd87 	bl	80014c4 <_fflush_r>
 80009b6:	68e1      	ldr	r1, [r4, #12]
 80009b8:	4b06      	ldr	r3, [pc, #24]	@ (80009d4 <cleanup_stdio+0x3c>)
 80009ba:	4299      	cmp	r1, r3
 80009bc:	d004      	beq.n	80009c8 <cleanup_stdio+0x30>
 80009be:	4620      	mov	r0, r4
 80009c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80009c4:	f000 bd7e 	b.w	80014c4 <_fflush_r>
 80009c8:	bd10      	pop	{r4, pc}
 80009ca:	bf00      	nop
 80009cc:	2000007c 	.word	0x2000007c
 80009d0:	200000e4 	.word	0x200000e4
 80009d4:	2000014c 	.word	0x2000014c

080009d8 <global_stdio_init.part.0>:
 80009d8:	b510      	push	{r4, lr}
 80009da:	4b0b      	ldr	r3, [pc, #44]	@ (8000a08 <global_stdio_init.part.0+0x30>)
 80009dc:	4c0b      	ldr	r4, [pc, #44]	@ (8000a0c <global_stdio_init.part.0+0x34>)
 80009de:	4a0c      	ldr	r2, [pc, #48]	@ (8000a10 <global_stdio_init.part.0+0x38>)
 80009e0:	601a      	str	r2, [r3, #0]
 80009e2:	4620      	mov	r0, r4
 80009e4:	2200      	movs	r2, #0
 80009e6:	2104      	movs	r1, #4
 80009e8:	f7ff ff94 	bl	8000914 <std>
 80009ec:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80009f0:	2201      	movs	r2, #1
 80009f2:	2109      	movs	r1, #9
 80009f4:	f7ff ff8e 	bl	8000914 <std>
 80009f8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80009fc:	2202      	movs	r2, #2
 80009fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000a02:	2112      	movs	r1, #18
 8000a04:	f7ff bf86 	b.w	8000914 <std>
 8000a08:	200001b4 	.word	0x200001b4
 8000a0c:	2000007c 	.word	0x2000007c
 8000a10:	08000981 	.word	0x08000981

08000a14 <__sfp_lock_acquire>:
 8000a14:	4801      	ldr	r0, [pc, #4]	@ (8000a1c <__sfp_lock_acquire+0x8>)
 8000a16:	f000 b90e 	b.w	8000c36 <__retarget_lock_acquire_recursive>
 8000a1a:	bf00      	nop
 8000a1c:	200001bd 	.word	0x200001bd

08000a20 <__sfp_lock_release>:
 8000a20:	4801      	ldr	r0, [pc, #4]	@ (8000a28 <__sfp_lock_release+0x8>)
 8000a22:	f000 b909 	b.w	8000c38 <__retarget_lock_release_recursive>
 8000a26:	bf00      	nop
 8000a28:	200001bd 	.word	0x200001bd

08000a2c <__sinit>:
 8000a2c:	b510      	push	{r4, lr}
 8000a2e:	4604      	mov	r4, r0
 8000a30:	f7ff fff0 	bl	8000a14 <__sfp_lock_acquire>
 8000a34:	6a23      	ldr	r3, [r4, #32]
 8000a36:	b11b      	cbz	r3, 8000a40 <__sinit+0x14>
 8000a38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000a3c:	f7ff bff0 	b.w	8000a20 <__sfp_lock_release>
 8000a40:	4b04      	ldr	r3, [pc, #16]	@ (8000a54 <__sinit+0x28>)
 8000a42:	6223      	str	r3, [r4, #32]
 8000a44:	4b04      	ldr	r3, [pc, #16]	@ (8000a58 <__sinit+0x2c>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d1f5      	bne.n	8000a38 <__sinit+0xc>
 8000a4c:	f7ff ffc4 	bl	80009d8 <global_stdio_init.part.0>
 8000a50:	e7f2      	b.n	8000a38 <__sinit+0xc>
 8000a52:	bf00      	nop
 8000a54:	08000999 	.word	0x08000999
 8000a58:	200001b4 	.word	0x200001b4

08000a5c <_fwalk_sglue>:
 8000a5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000a60:	4607      	mov	r7, r0
 8000a62:	4688      	mov	r8, r1
 8000a64:	4614      	mov	r4, r2
 8000a66:	2600      	movs	r6, #0
 8000a68:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000a6c:	f1b9 0901 	subs.w	r9, r9, #1
 8000a70:	d505      	bpl.n	8000a7e <_fwalk_sglue+0x22>
 8000a72:	6824      	ldr	r4, [r4, #0]
 8000a74:	2c00      	cmp	r4, #0
 8000a76:	d1f7      	bne.n	8000a68 <_fwalk_sglue+0xc>
 8000a78:	4630      	mov	r0, r6
 8000a7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000a7e:	89ab      	ldrh	r3, [r5, #12]
 8000a80:	2b01      	cmp	r3, #1
 8000a82:	d907      	bls.n	8000a94 <_fwalk_sglue+0x38>
 8000a84:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000a88:	3301      	adds	r3, #1
 8000a8a:	d003      	beq.n	8000a94 <_fwalk_sglue+0x38>
 8000a8c:	4629      	mov	r1, r5
 8000a8e:	4638      	mov	r0, r7
 8000a90:	47c0      	blx	r8
 8000a92:	4306      	orrs	r6, r0
 8000a94:	3568      	adds	r5, #104	@ 0x68
 8000a96:	e7e9      	b.n	8000a6c <_fwalk_sglue+0x10>

08000a98 <iprintf>:
 8000a98:	b40f      	push	{r0, r1, r2, r3}
 8000a9a:	b507      	push	{r0, r1, r2, lr}
 8000a9c:	4906      	ldr	r1, [pc, #24]	@ (8000ab8 <iprintf+0x20>)
 8000a9e:	ab04      	add	r3, sp, #16
 8000aa0:	6808      	ldr	r0, [r1, #0]
 8000aa2:	f853 2b04 	ldr.w	r2, [r3], #4
 8000aa6:	6881      	ldr	r1, [r0, #8]
 8000aa8:	9301      	str	r3, [sp, #4]
 8000aaa:	f000 f9e7 	bl	8000e7c <_vfiprintf_r>
 8000aae:	b003      	add	sp, #12
 8000ab0:	f85d eb04 	ldr.w	lr, [sp], #4
 8000ab4:	b004      	add	sp, #16
 8000ab6:	4770      	bx	lr
 8000ab8:	2000000c 	.word	0x2000000c

08000abc <__sread>:
 8000abc:	b510      	push	{r4, lr}
 8000abe:	460c      	mov	r4, r1
 8000ac0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ac4:	f000 f868 	bl	8000b98 <_read_r>
 8000ac8:	2800      	cmp	r0, #0
 8000aca:	bfab      	itete	ge
 8000acc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8000ace:	89a3      	ldrhlt	r3, [r4, #12]
 8000ad0:	181b      	addge	r3, r3, r0
 8000ad2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8000ad6:	bfac      	ite	ge
 8000ad8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8000ada:	81a3      	strhlt	r3, [r4, #12]
 8000adc:	bd10      	pop	{r4, pc}

08000ade <__swrite>:
 8000ade:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ae2:	461f      	mov	r7, r3
 8000ae4:	898b      	ldrh	r3, [r1, #12]
 8000ae6:	05db      	lsls	r3, r3, #23
 8000ae8:	4605      	mov	r5, r0
 8000aea:	460c      	mov	r4, r1
 8000aec:	4616      	mov	r6, r2
 8000aee:	d505      	bpl.n	8000afc <__swrite+0x1e>
 8000af0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000af4:	2302      	movs	r3, #2
 8000af6:	2200      	movs	r2, #0
 8000af8:	f000 f83c 	bl	8000b74 <_lseek_r>
 8000afc:	89a3      	ldrh	r3, [r4, #12]
 8000afe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000b02:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000b06:	81a3      	strh	r3, [r4, #12]
 8000b08:	4632      	mov	r2, r6
 8000b0a:	463b      	mov	r3, r7
 8000b0c:	4628      	mov	r0, r5
 8000b0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000b12:	f000 b853 	b.w	8000bbc <_write_r>

08000b16 <__sseek>:
 8000b16:	b510      	push	{r4, lr}
 8000b18:	460c      	mov	r4, r1
 8000b1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000b1e:	f000 f829 	bl	8000b74 <_lseek_r>
 8000b22:	1c43      	adds	r3, r0, #1
 8000b24:	89a3      	ldrh	r3, [r4, #12]
 8000b26:	bf15      	itete	ne
 8000b28:	6560      	strne	r0, [r4, #84]	@ 0x54
 8000b2a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8000b2e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8000b32:	81a3      	strheq	r3, [r4, #12]
 8000b34:	bf18      	it	ne
 8000b36:	81a3      	strhne	r3, [r4, #12]
 8000b38:	bd10      	pop	{r4, pc}

08000b3a <__sclose>:
 8000b3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000b3e:	f000 b809 	b.w	8000b54 <_close_r>

08000b42 <memset>:
 8000b42:	4402      	add	r2, r0
 8000b44:	4603      	mov	r3, r0
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d100      	bne.n	8000b4c <memset+0xa>
 8000b4a:	4770      	bx	lr
 8000b4c:	f803 1b01 	strb.w	r1, [r3], #1
 8000b50:	e7f9      	b.n	8000b46 <memset+0x4>
	...

08000b54 <_close_r>:
 8000b54:	b538      	push	{r3, r4, r5, lr}
 8000b56:	4d06      	ldr	r5, [pc, #24]	@ (8000b70 <_close_r+0x1c>)
 8000b58:	2300      	movs	r3, #0
 8000b5a:	4604      	mov	r4, r0
 8000b5c:	4608      	mov	r0, r1
 8000b5e:	602b      	str	r3, [r5, #0]
 8000b60:	f7ff fe11 	bl	8000786 <_close>
 8000b64:	1c43      	adds	r3, r0, #1
 8000b66:	d102      	bne.n	8000b6e <_close_r+0x1a>
 8000b68:	682b      	ldr	r3, [r5, #0]
 8000b6a:	b103      	cbz	r3, 8000b6e <_close_r+0x1a>
 8000b6c:	6023      	str	r3, [r4, #0]
 8000b6e:	bd38      	pop	{r3, r4, r5, pc}
 8000b70:	200001b8 	.word	0x200001b8

08000b74 <_lseek_r>:
 8000b74:	b538      	push	{r3, r4, r5, lr}
 8000b76:	4d07      	ldr	r5, [pc, #28]	@ (8000b94 <_lseek_r+0x20>)
 8000b78:	4604      	mov	r4, r0
 8000b7a:	4608      	mov	r0, r1
 8000b7c:	4611      	mov	r1, r2
 8000b7e:	2200      	movs	r2, #0
 8000b80:	602a      	str	r2, [r5, #0]
 8000b82:	461a      	mov	r2, r3
 8000b84:	f7ff fe23 	bl	80007ce <_lseek>
 8000b88:	1c43      	adds	r3, r0, #1
 8000b8a:	d102      	bne.n	8000b92 <_lseek_r+0x1e>
 8000b8c:	682b      	ldr	r3, [r5, #0]
 8000b8e:	b103      	cbz	r3, 8000b92 <_lseek_r+0x1e>
 8000b90:	6023      	str	r3, [r4, #0]
 8000b92:	bd38      	pop	{r3, r4, r5, pc}
 8000b94:	200001b8 	.word	0x200001b8

08000b98 <_read_r>:
 8000b98:	b538      	push	{r3, r4, r5, lr}
 8000b9a:	4d07      	ldr	r5, [pc, #28]	@ (8000bb8 <_read_r+0x20>)
 8000b9c:	4604      	mov	r4, r0
 8000b9e:	4608      	mov	r0, r1
 8000ba0:	4611      	mov	r1, r2
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	602a      	str	r2, [r5, #0]
 8000ba6:	461a      	mov	r2, r3
 8000ba8:	f7ff fdb4 	bl	8000714 <_read>
 8000bac:	1c43      	adds	r3, r0, #1
 8000bae:	d102      	bne.n	8000bb6 <_read_r+0x1e>
 8000bb0:	682b      	ldr	r3, [r5, #0]
 8000bb2:	b103      	cbz	r3, 8000bb6 <_read_r+0x1e>
 8000bb4:	6023      	str	r3, [r4, #0]
 8000bb6:	bd38      	pop	{r3, r4, r5, pc}
 8000bb8:	200001b8 	.word	0x200001b8

08000bbc <_write_r>:
 8000bbc:	b538      	push	{r3, r4, r5, lr}
 8000bbe:	4d07      	ldr	r5, [pc, #28]	@ (8000bdc <_write_r+0x20>)
 8000bc0:	4604      	mov	r4, r0
 8000bc2:	4608      	mov	r0, r1
 8000bc4:	4611      	mov	r1, r2
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	602a      	str	r2, [r5, #0]
 8000bca:	461a      	mov	r2, r3
 8000bcc:	f7ff fdbf 	bl	800074e <_write>
 8000bd0:	1c43      	adds	r3, r0, #1
 8000bd2:	d102      	bne.n	8000bda <_write_r+0x1e>
 8000bd4:	682b      	ldr	r3, [r5, #0]
 8000bd6:	b103      	cbz	r3, 8000bda <_write_r+0x1e>
 8000bd8:	6023      	str	r3, [r4, #0]
 8000bda:	bd38      	pop	{r3, r4, r5, pc}
 8000bdc:	200001b8 	.word	0x200001b8

08000be0 <__errno>:
 8000be0:	4b01      	ldr	r3, [pc, #4]	@ (8000be8 <__errno+0x8>)
 8000be2:	6818      	ldr	r0, [r3, #0]
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	2000000c 	.word	0x2000000c

08000bec <__libc_init_array>:
 8000bec:	b570      	push	{r4, r5, r6, lr}
 8000bee:	4d0d      	ldr	r5, [pc, #52]	@ (8000c24 <__libc_init_array+0x38>)
 8000bf0:	4c0d      	ldr	r4, [pc, #52]	@ (8000c28 <__libc_init_array+0x3c>)
 8000bf2:	1b64      	subs	r4, r4, r5
 8000bf4:	10a4      	asrs	r4, r4, #2
 8000bf6:	2600      	movs	r6, #0
 8000bf8:	42a6      	cmp	r6, r4
 8000bfa:	d109      	bne.n	8000c10 <__libc_init_array+0x24>
 8000bfc:	4d0b      	ldr	r5, [pc, #44]	@ (8000c2c <__libc_init_array+0x40>)
 8000bfe:	4c0c      	ldr	r4, [pc, #48]	@ (8000c30 <__libc_init_array+0x44>)
 8000c00:	f000 fdb0 	bl	8001764 <_init>
 8000c04:	1b64      	subs	r4, r4, r5
 8000c06:	10a4      	asrs	r4, r4, #2
 8000c08:	2600      	movs	r6, #0
 8000c0a:	42a6      	cmp	r6, r4
 8000c0c:	d105      	bne.n	8000c1a <__libc_init_array+0x2e>
 8000c0e:	bd70      	pop	{r4, r5, r6, pc}
 8000c10:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c14:	4798      	blx	r3
 8000c16:	3601      	adds	r6, #1
 8000c18:	e7ee      	b.n	8000bf8 <__libc_init_array+0xc>
 8000c1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c1e:	4798      	blx	r3
 8000c20:	3601      	adds	r6, #1
 8000c22:	e7f2      	b.n	8000c0a <__libc_init_array+0x1e>
 8000c24:	080017dc 	.word	0x080017dc
 8000c28:	080017dc 	.word	0x080017dc
 8000c2c:	080017dc 	.word	0x080017dc
 8000c30:	080017e0 	.word	0x080017e0

08000c34 <__retarget_lock_init_recursive>:
 8000c34:	4770      	bx	lr

08000c36 <__retarget_lock_acquire_recursive>:
 8000c36:	4770      	bx	lr

08000c38 <__retarget_lock_release_recursive>:
 8000c38:	4770      	bx	lr
	...

08000c3c <_free_r>:
 8000c3c:	b538      	push	{r3, r4, r5, lr}
 8000c3e:	4605      	mov	r5, r0
 8000c40:	2900      	cmp	r1, #0
 8000c42:	d041      	beq.n	8000cc8 <_free_r+0x8c>
 8000c44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000c48:	1f0c      	subs	r4, r1, #4
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	bfb8      	it	lt
 8000c4e:	18e4      	addlt	r4, r4, r3
 8000c50:	f000 f8e0 	bl	8000e14 <__malloc_lock>
 8000c54:	4a1d      	ldr	r2, [pc, #116]	@ (8000ccc <_free_r+0x90>)
 8000c56:	6813      	ldr	r3, [r2, #0]
 8000c58:	b933      	cbnz	r3, 8000c68 <_free_r+0x2c>
 8000c5a:	6063      	str	r3, [r4, #4]
 8000c5c:	6014      	str	r4, [r2, #0]
 8000c5e:	4628      	mov	r0, r5
 8000c60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c64:	f000 b8dc 	b.w	8000e20 <__malloc_unlock>
 8000c68:	42a3      	cmp	r3, r4
 8000c6a:	d908      	bls.n	8000c7e <_free_r+0x42>
 8000c6c:	6820      	ldr	r0, [r4, #0]
 8000c6e:	1821      	adds	r1, r4, r0
 8000c70:	428b      	cmp	r3, r1
 8000c72:	bf01      	itttt	eq
 8000c74:	6819      	ldreq	r1, [r3, #0]
 8000c76:	685b      	ldreq	r3, [r3, #4]
 8000c78:	1809      	addeq	r1, r1, r0
 8000c7a:	6021      	streq	r1, [r4, #0]
 8000c7c:	e7ed      	b.n	8000c5a <_free_r+0x1e>
 8000c7e:	461a      	mov	r2, r3
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	b10b      	cbz	r3, 8000c88 <_free_r+0x4c>
 8000c84:	42a3      	cmp	r3, r4
 8000c86:	d9fa      	bls.n	8000c7e <_free_r+0x42>
 8000c88:	6811      	ldr	r1, [r2, #0]
 8000c8a:	1850      	adds	r0, r2, r1
 8000c8c:	42a0      	cmp	r0, r4
 8000c8e:	d10b      	bne.n	8000ca8 <_free_r+0x6c>
 8000c90:	6820      	ldr	r0, [r4, #0]
 8000c92:	4401      	add	r1, r0
 8000c94:	1850      	adds	r0, r2, r1
 8000c96:	4283      	cmp	r3, r0
 8000c98:	6011      	str	r1, [r2, #0]
 8000c9a:	d1e0      	bne.n	8000c5e <_free_r+0x22>
 8000c9c:	6818      	ldr	r0, [r3, #0]
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	6053      	str	r3, [r2, #4]
 8000ca2:	4408      	add	r0, r1
 8000ca4:	6010      	str	r0, [r2, #0]
 8000ca6:	e7da      	b.n	8000c5e <_free_r+0x22>
 8000ca8:	d902      	bls.n	8000cb0 <_free_r+0x74>
 8000caa:	230c      	movs	r3, #12
 8000cac:	602b      	str	r3, [r5, #0]
 8000cae:	e7d6      	b.n	8000c5e <_free_r+0x22>
 8000cb0:	6820      	ldr	r0, [r4, #0]
 8000cb2:	1821      	adds	r1, r4, r0
 8000cb4:	428b      	cmp	r3, r1
 8000cb6:	bf04      	itt	eq
 8000cb8:	6819      	ldreq	r1, [r3, #0]
 8000cba:	685b      	ldreq	r3, [r3, #4]
 8000cbc:	6063      	str	r3, [r4, #4]
 8000cbe:	bf04      	itt	eq
 8000cc0:	1809      	addeq	r1, r1, r0
 8000cc2:	6021      	streq	r1, [r4, #0]
 8000cc4:	6054      	str	r4, [r2, #4]
 8000cc6:	e7ca      	b.n	8000c5e <_free_r+0x22>
 8000cc8:	bd38      	pop	{r3, r4, r5, pc}
 8000cca:	bf00      	nop
 8000ccc:	200001c4 	.word	0x200001c4

08000cd0 <sbrk_aligned>:
 8000cd0:	b570      	push	{r4, r5, r6, lr}
 8000cd2:	4e0f      	ldr	r6, [pc, #60]	@ (8000d10 <sbrk_aligned+0x40>)
 8000cd4:	460c      	mov	r4, r1
 8000cd6:	6831      	ldr	r1, [r6, #0]
 8000cd8:	4605      	mov	r5, r0
 8000cda:	b911      	cbnz	r1, 8000ce2 <sbrk_aligned+0x12>
 8000cdc:	f000 fcae 	bl	800163c <_sbrk_r>
 8000ce0:	6030      	str	r0, [r6, #0]
 8000ce2:	4621      	mov	r1, r4
 8000ce4:	4628      	mov	r0, r5
 8000ce6:	f000 fca9 	bl	800163c <_sbrk_r>
 8000cea:	1c43      	adds	r3, r0, #1
 8000cec:	d103      	bne.n	8000cf6 <sbrk_aligned+0x26>
 8000cee:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8000cf2:	4620      	mov	r0, r4
 8000cf4:	bd70      	pop	{r4, r5, r6, pc}
 8000cf6:	1cc4      	adds	r4, r0, #3
 8000cf8:	f024 0403 	bic.w	r4, r4, #3
 8000cfc:	42a0      	cmp	r0, r4
 8000cfe:	d0f8      	beq.n	8000cf2 <sbrk_aligned+0x22>
 8000d00:	1a21      	subs	r1, r4, r0
 8000d02:	4628      	mov	r0, r5
 8000d04:	f000 fc9a 	bl	800163c <_sbrk_r>
 8000d08:	3001      	adds	r0, #1
 8000d0a:	d1f2      	bne.n	8000cf2 <sbrk_aligned+0x22>
 8000d0c:	e7ef      	b.n	8000cee <sbrk_aligned+0x1e>
 8000d0e:	bf00      	nop
 8000d10:	200001c0 	.word	0x200001c0

08000d14 <_malloc_r>:
 8000d14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000d18:	1ccd      	adds	r5, r1, #3
 8000d1a:	f025 0503 	bic.w	r5, r5, #3
 8000d1e:	3508      	adds	r5, #8
 8000d20:	2d0c      	cmp	r5, #12
 8000d22:	bf38      	it	cc
 8000d24:	250c      	movcc	r5, #12
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	4606      	mov	r6, r0
 8000d2a:	db01      	blt.n	8000d30 <_malloc_r+0x1c>
 8000d2c:	42a9      	cmp	r1, r5
 8000d2e:	d904      	bls.n	8000d3a <_malloc_r+0x26>
 8000d30:	230c      	movs	r3, #12
 8000d32:	6033      	str	r3, [r6, #0]
 8000d34:	2000      	movs	r0, #0
 8000d36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000d3a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000e10 <_malloc_r+0xfc>
 8000d3e:	f000 f869 	bl	8000e14 <__malloc_lock>
 8000d42:	f8d8 3000 	ldr.w	r3, [r8]
 8000d46:	461c      	mov	r4, r3
 8000d48:	bb44      	cbnz	r4, 8000d9c <_malloc_r+0x88>
 8000d4a:	4629      	mov	r1, r5
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	f7ff ffbf 	bl	8000cd0 <sbrk_aligned>
 8000d52:	1c43      	adds	r3, r0, #1
 8000d54:	4604      	mov	r4, r0
 8000d56:	d158      	bne.n	8000e0a <_malloc_r+0xf6>
 8000d58:	f8d8 4000 	ldr.w	r4, [r8]
 8000d5c:	4627      	mov	r7, r4
 8000d5e:	2f00      	cmp	r7, #0
 8000d60:	d143      	bne.n	8000dea <_malloc_r+0xd6>
 8000d62:	2c00      	cmp	r4, #0
 8000d64:	d04b      	beq.n	8000dfe <_malloc_r+0xea>
 8000d66:	6823      	ldr	r3, [r4, #0]
 8000d68:	4639      	mov	r1, r7
 8000d6a:	4630      	mov	r0, r6
 8000d6c:	eb04 0903 	add.w	r9, r4, r3
 8000d70:	f000 fc64 	bl	800163c <_sbrk_r>
 8000d74:	4581      	cmp	r9, r0
 8000d76:	d142      	bne.n	8000dfe <_malloc_r+0xea>
 8000d78:	6821      	ldr	r1, [r4, #0]
 8000d7a:	1a6d      	subs	r5, r5, r1
 8000d7c:	4629      	mov	r1, r5
 8000d7e:	4630      	mov	r0, r6
 8000d80:	f7ff ffa6 	bl	8000cd0 <sbrk_aligned>
 8000d84:	3001      	adds	r0, #1
 8000d86:	d03a      	beq.n	8000dfe <_malloc_r+0xea>
 8000d88:	6823      	ldr	r3, [r4, #0]
 8000d8a:	442b      	add	r3, r5
 8000d8c:	6023      	str	r3, [r4, #0]
 8000d8e:	f8d8 3000 	ldr.w	r3, [r8]
 8000d92:	685a      	ldr	r2, [r3, #4]
 8000d94:	bb62      	cbnz	r2, 8000df0 <_malloc_r+0xdc>
 8000d96:	f8c8 7000 	str.w	r7, [r8]
 8000d9a:	e00f      	b.n	8000dbc <_malloc_r+0xa8>
 8000d9c:	6822      	ldr	r2, [r4, #0]
 8000d9e:	1b52      	subs	r2, r2, r5
 8000da0:	d420      	bmi.n	8000de4 <_malloc_r+0xd0>
 8000da2:	2a0b      	cmp	r2, #11
 8000da4:	d917      	bls.n	8000dd6 <_malloc_r+0xc2>
 8000da6:	1961      	adds	r1, r4, r5
 8000da8:	42a3      	cmp	r3, r4
 8000daa:	6025      	str	r5, [r4, #0]
 8000dac:	bf18      	it	ne
 8000dae:	6059      	strne	r1, [r3, #4]
 8000db0:	6863      	ldr	r3, [r4, #4]
 8000db2:	bf08      	it	eq
 8000db4:	f8c8 1000 	streq.w	r1, [r8]
 8000db8:	5162      	str	r2, [r4, r5]
 8000dba:	604b      	str	r3, [r1, #4]
 8000dbc:	4630      	mov	r0, r6
 8000dbe:	f000 f82f 	bl	8000e20 <__malloc_unlock>
 8000dc2:	f104 000b 	add.w	r0, r4, #11
 8000dc6:	1d23      	adds	r3, r4, #4
 8000dc8:	f020 0007 	bic.w	r0, r0, #7
 8000dcc:	1ac2      	subs	r2, r0, r3
 8000dce:	bf1c      	itt	ne
 8000dd0:	1a1b      	subne	r3, r3, r0
 8000dd2:	50a3      	strne	r3, [r4, r2]
 8000dd4:	e7af      	b.n	8000d36 <_malloc_r+0x22>
 8000dd6:	6862      	ldr	r2, [r4, #4]
 8000dd8:	42a3      	cmp	r3, r4
 8000dda:	bf0c      	ite	eq
 8000ddc:	f8c8 2000 	streq.w	r2, [r8]
 8000de0:	605a      	strne	r2, [r3, #4]
 8000de2:	e7eb      	b.n	8000dbc <_malloc_r+0xa8>
 8000de4:	4623      	mov	r3, r4
 8000de6:	6864      	ldr	r4, [r4, #4]
 8000de8:	e7ae      	b.n	8000d48 <_malloc_r+0x34>
 8000dea:	463c      	mov	r4, r7
 8000dec:	687f      	ldr	r7, [r7, #4]
 8000dee:	e7b6      	b.n	8000d5e <_malloc_r+0x4a>
 8000df0:	461a      	mov	r2, r3
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	42a3      	cmp	r3, r4
 8000df6:	d1fb      	bne.n	8000df0 <_malloc_r+0xdc>
 8000df8:	2300      	movs	r3, #0
 8000dfa:	6053      	str	r3, [r2, #4]
 8000dfc:	e7de      	b.n	8000dbc <_malloc_r+0xa8>
 8000dfe:	230c      	movs	r3, #12
 8000e00:	6033      	str	r3, [r6, #0]
 8000e02:	4630      	mov	r0, r6
 8000e04:	f000 f80c 	bl	8000e20 <__malloc_unlock>
 8000e08:	e794      	b.n	8000d34 <_malloc_r+0x20>
 8000e0a:	6005      	str	r5, [r0, #0]
 8000e0c:	e7d6      	b.n	8000dbc <_malloc_r+0xa8>
 8000e0e:	bf00      	nop
 8000e10:	200001c4 	.word	0x200001c4

08000e14 <__malloc_lock>:
 8000e14:	4801      	ldr	r0, [pc, #4]	@ (8000e1c <__malloc_lock+0x8>)
 8000e16:	f7ff bf0e 	b.w	8000c36 <__retarget_lock_acquire_recursive>
 8000e1a:	bf00      	nop
 8000e1c:	200001bc 	.word	0x200001bc

08000e20 <__malloc_unlock>:
 8000e20:	4801      	ldr	r0, [pc, #4]	@ (8000e28 <__malloc_unlock+0x8>)
 8000e22:	f7ff bf09 	b.w	8000c38 <__retarget_lock_release_recursive>
 8000e26:	bf00      	nop
 8000e28:	200001bc 	.word	0x200001bc

08000e2c <__sfputc_r>:
 8000e2c:	6893      	ldr	r3, [r2, #8]
 8000e2e:	3b01      	subs	r3, #1
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	b410      	push	{r4}
 8000e34:	6093      	str	r3, [r2, #8]
 8000e36:	da07      	bge.n	8000e48 <__sfputc_r+0x1c>
 8000e38:	6994      	ldr	r4, [r2, #24]
 8000e3a:	42a3      	cmp	r3, r4
 8000e3c:	db01      	blt.n	8000e42 <__sfputc_r+0x16>
 8000e3e:	290a      	cmp	r1, #10
 8000e40:	d102      	bne.n	8000e48 <__sfputc_r+0x1c>
 8000e42:	bc10      	pop	{r4}
 8000e44:	f000 bb66 	b.w	8001514 <__swbuf_r>
 8000e48:	6813      	ldr	r3, [r2, #0]
 8000e4a:	1c58      	adds	r0, r3, #1
 8000e4c:	6010      	str	r0, [r2, #0]
 8000e4e:	7019      	strb	r1, [r3, #0]
 8000e50:	4608      	mov	r0, r1
 8000e52:	bc10      	pop	{r4}
 8000e54:	4770      	bx	lr

08000e56 <__sfputs_r>:
 8000e56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e58:	4606      	mov	r6, r0
 8000e5a:	460f      	mov	r7, r1
 8000e5c:	4614      	mov	r4, r2
 8000e5e:	18d5      	adds	r5, r2, r3
 8000e60:	42ac      	cmp	r4, r5
 8000e62:	d101      	bne.n	8000e68 <__sfputs_r+0x12>
 8000e64:	2000      	movs	r0, #0
 8000e66:	e007      	b.n	8000e78 <__sfputs_r+0x22>
 8000e68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000e6c:	463a      	mov	r2, r7
 8000e6e:	4630      	mov	r0, r6
 8000e70:	f7ff ffdc 	bl	8000e2c <__sfputc_r>
 8000e74:	1c43      	adds	r3, r0, #1
 8000e76:	d1f3      	bne.n	8000e60 <__sfputs_r+0xa>
 8000e78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000e7c <_vfiprintf_r>:
 8000e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e80:	460d      	mov	r5, r1
 8000e82:	b09d      	sub	sp, #116	@ 0x74
 8000e84:	4614      	mov	r4, r2
 8000e86:	4698      	mov	r8, r3
 8000e88:	4606      	mov	r6, r0
 8000e8a:	b118      	cbz	r0, 8000e94 <_vfiprintf_r+0x18>
 8000e8c:	6a03      	ldr	r3, [r0, #32]
 8000e8e:	b90b      	cbnz	r3, 8000e94 <_vfiprintf_r+0x18>
 8000e90:	f7ff fdcc 	bl	8000a2c <__sinit>
 8000e94:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000e96:	07d9      	lsls	r1, r3, #31
 8000e98:	d405      	bmi.n	8000ea6 <_vfiprintf_r+0x2a>
 8000e9a:	89ab      	ldrh	r3, [r5, #12]
 8000e9c:	059a      	lsls	r2, r3, #22
 8000e9e:	d402      	bmi.n	8000ea6 <_vfiprintf_r+0x2a>
 8000ea0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000ea2:	f7ff fec8 	bl	8000c36 <__retarget_lock_acquire_recursive>
 8000ea6:	89ab      	ldrh	r3, [r5, #12]
 8000ea8:	071b      	lsls	r3, r3, #28
 8000eaa:	d501      	bpl.n	8000eb0 <_vfiprintf_r+0x34>
 8000eac:	692b      	ldr	r3, [r5, #16]
 8000eae:	b99b      	cbnz	r3, 8000ed8 <_vfiprintf_r+0x5c>
 8000eb0:	4629      	mov	r1, r5
 8000eb2:	4630      	mov	r0, r6
 8000eb4:	f000 fb6c 	bl	8001590 <__swsetup_r>
 8000eb8:	b170      	cbz	r0, 8000ed8 <_vfiprintf_r+0x5c>
 8000eba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000ebc:	07dc      	lsls	r4, r3, #31
 8000ebe:	d504      	bpl.n	8000eca <_vfiprintf_r+0x4e>
 8000ec0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ec4:	b01d      	add	sp, #116	@ 0x74
 8000ec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000eca:	89ab      	ldrh	r3, [r5, #12]
 8000ecc:	0598      	lsls	r0, r3, #22
 8000ece:	d4f7      	bmi.n	8000ec0 <_vfiprintf_r+0x44>
 8000ed0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000ed2:	f7ff feb1 	bl	8000c38 <__retarget_lock_release_recursive>
 8000ed6:	e7f3      	b.n	8000ec0 <_vfiprintf_r+0x44>
 8000ed8:	2300      	movs	r3, #0
 8000eda:	9309      	str	r3, [sp, #36]	@ 0x24
 8000edc:	2320      	movs	r3, #32
 8000ede:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000ee2:	f8cd 800c 	str.w	r8, [sp, #12]
 8000ee6:	2330      	movs	r3, #48	@ 0x30
 8000ee8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8001098 <_vfiprintf_r+0x21c>
 8000eec:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000ef0:	f04f 0901 	mov.w	r9, #1
 8000ef4:	4623      	mov	r3, r4
 8000ef6:	469a      	mov	sl, r3
 8000ef8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000efc:	b10a      	cbz	r2, 8000f02 <_vfiprintf_r+0x86>
 8000efe:	2a25      	cmp	r2, #37	@ 0x25
 8000f00:	d1f9      	bne.n	8000ef6 <_vfiprintf_r+0x7a>
 8000f02:	ebba 0b04 	subs.w	fp, sl, r4
 8000f06:	d00b      	beq.n	8000f20 <_vfiprintf_r+0xa4>
 8000f08:	465b      	mov	r3, fp
 8000f0a:	4622      	mov	r2, r4
 8000f0c:	4629      	mov	r1, r5
 8000f0e:	4630      	mov	r0, r6
 8000f10:	f7ff ffa1 	bl	8000e56 <__sfputs_r>
 8000f14:	3001      	adds	r0, #1
 8000f16:	f000 80a7 	beq.w	8001068 <_vfiprintf_r+0x1ec>
 8000f1a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000f1c:	445a      	add	r2, fp
 8000f1e:	9209      	str	r2, [sp, #36]	@ 0x24
 8000f20:	f89a 3000 	ldrb.w	r3, [sl]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	f000 809f 	beq.w	8001068 <_vfiprintf_r+0x1ec>
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000f30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000f34:	f10a 0a01 	add.w	sl, sl, #1
 8000f38:	9304      	str	r3, [sp, #16]
 8000f3a:	9307      	str	r3, [sp, #28]
 8000f3c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000f40:	931a      	str	r3, [sp, #104]	@ 0x68
 8000f42:	4654      	mov	r4, sl
 8000f44:	2205      	movs	r2, #5
 8000f46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000f4a:	4853      	ldr	r0, [pc, #332]	@ (8001098 <_vfiprintf_r+0x21c>)
 8000f4c:	f7ff f940 	bl	80001d0 <memchr>
 8000f50:	9a04      	ldr	r2, [sp, #16]
 8000f52:	b9d8      	cbnz	r0, 8000f8c <_vfiprintf_r+0x110>
 8000f54:	06d1      	lsls	r1, r2, #27
 8000f56:	bf44      	itt	mi
 8000f58:	2320      	movmi	r3, #32
 8000f5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000f5e:	0713      	lsls	r3, r2, #28
 8000f60:	bf44      	itt	mi
 8000f62:	232b      	movmi	r3, #43	@ 0x2b
 8000f64:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000f68:	f89a 3000 	ldrb.w	r3, [sl]
 8000f6c:	2b2a      	cmp	r3, #42	@ 0x2a
 8000f6e:	d015      	beq.n	8000f9c <_vfiprintf_r+0x120>
 8000f70:	9a07      	ldr	r2, [sp, #28]
 8000f72:	4654      	mov	r4, sl
 8000f74:	2000      	movs	r0, #0
 8000f76:	f04f 0c0a 	mov.w	ip, #10
 8000f7a:	4621      	mov	r1, r4
 8000f7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000f80:	3b30      	subs	r3, #48	@ 0x30
 8000f82:	2b09      	cmp	r3, #9
 8000f84:	d94b      	bls.n	800101e <_vfiprintf_r+0x1a2>
 8000f86:	b1b0      	cbz	r0, 8000fb6 <_vfiprintf_r+0x13a>
 8000f88:	9207      	str	r2, [sp, #28]
 8000f8a:	e014      	b.n	8000fb6 <_vfiprintf_r+0x13a>
 8000f8c:	eba0 0308 	sub.w	r3, r0, r8
 8000f90:	fa09 f303 	lsl.w	r3, r9, r3
 8000f94:	4313      	orrs	r3, r2
 8000f96:	9304      	str	r3, [sp, #16]
 8000f98:	46a2      	mov	sl, r4
 8000f9a:	e7d2      	b.n	8000f42 <_vfiprintf_r+0xc6>
 8000f9c:	9b03      	ldr	r3, [sp, #12]
 8000f9e:	1d19      	adds	r1, r3, #4
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	9103      	str	r1, [sp, #12]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	bfbb      	ittet	lt
 8000fa8:	425b      	neglt	r3, r3
 8000faa:	f042 0202 	orrlt.w	r2, r2, #2
 8000fae:	9307      	strge	r3, [sp, #28]
 8000fb0:	9307      	strlt	r3, [sp, #28]
 8000fb2:	bfb8      	it	lt
 8000fb4:	9204      	strlt	r2, [sp, #16]
 8000fb6:	7823      	ldrb	r3, [r4, #0]
 8000fb8:	2b2e      	cmp	r3, #46	@ 0x2e
 8000fba:	d10a      	bne.n	8000fd2 <_vfiprintf_r+0x156>
 8000fbc:	7863      	ldrb	r3, [r4, #1]
 8000fbe:	2b2a      	cmp	r3, #42	@ 0x2a
 8000fc0:	d132      	bne.n	8001028 <_vfiprintf_r+0x1ac>
 8000fc2:	9b03      	ldr	r3, [sp, #12]
 8000fc4:	1d1a      	adds	r2, r3, #4
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	9203      	str	r2, [sp, #12]
 8000fca:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000fce:	3402      	adds	r4, #2
 8000fd0:	9305      	str	r3, [sp, #20]
 8000fd2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800109c <_vfiprintf_r+0x220>
 8000fd6:	7821      	ldrb	r1, [r4, #0]
 8000fd8:	2203      	movs	r2, #3
 8000fda:	4650      	mov	r0, sl
 8000fdc:	f7ff f8f8 	bl	80001d0 <memchr>
 8000fe0:	b138      	cbz	r0, 8000ff2 <_vfiprintf_r+0x176>
 8000fe2:	9b04      	ldr	r3, [sp, #16]
 8000fe4:	eba0 000a 	sub.w	r0, r0, sl
 8000fe8:	2240      	movs	r2, #64	@ 0x40
 8000fea:	4082      	lsls	r2, r0
 8000fec:	4313      	orrs	r3, r2
 8000fee:	3401      	adds	r4, #1
 8000ff0:	9304      	str	r3, [sp, #16]
 8000ff2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000ff6:	482a      	ldr	r0, [pc, #168]	@ (80010a0 <_vfiprintf_r+0x224>)
 8000ff8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000ffc:	2206      	movs	r2, #6
 8000ffe:	f7ff f8e7 	bl	80001d0 <memchr>
 8001002:	2800      	cmp	r0, #0
 8001004:	d03f      	beq.n	8001086 <_vfiprintf_r+0x20a>
 8001006:	4b27      	ldr	r3, [pc, #156]	@ (80010a4 <_vfiprintf_r+0x228>)
 8001008:	bb1b      	cbnz	r3, 8001052 <_vfiprintf_r+0x1d6>
 800100a:	9b03      	ldr	r3, [sp, #12]
 800100c:	3307      	adds	r3, #7
 800100e:	f023 0307 	bic.w	r3, r3, #7
 8001012:	3308      	adds	r3, #8
 8001014:	9303      	str	r3, [sp, #12]
 8001016:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001018:	443b      	add	r3, r7
 800101a:	9309      	str	r3, [sp, #36]	@ 0x24
 800101c:	e76a      	b.n	8000ef4 <_vfiprintf_r+0x78>
 800101e:	fb0c 3202 	mla	r2, ip, r2, r3
 8001022:	460c      	mov	r4, r1
 8001024:	2001      	movs	r0, #1
 8001026:	e7a8      	b.n	8000f7a <_vfiprintf_r+0xfe>
 8001028:	2300      	movs	r3, #0
 800102a:	3401      	adds	r4, #1
 800102c:	9305      	str	r3, [sp, #20]
 800102e:	4619      	mov	r1, r3
 8001030:	f04f 0c0a 	mov.w	ip, #10
 8001034:	4620      	mov	r0, r4
 8001036:	f810 2b01 	ldrb.w	r2, [r0], #1
 800103a:	3a30      	subs	r2, #48	@ 0x30
 800103c:	2a09      	cmp	r2, #9
 800103e:	d903      	bls.n	8001048 <_vfiprintf_r+0x1cc>
 8001040:	2b00      	cmp	r3, #0
 8001042:	d0c6      	beq.n	8000fd2 <_vfiprintf_r+0x156>
 8001044:	9105      	str	r1, [sp, #20]
 8001046:	e7c4      	b.n	8000fd2 <_vfiprintf_r+0x156>
 8001048:	fb0c 2101 	mla	r1, ip, r1, r2
 800104c:	4604      	mov	r4, r0
 800104e:	2301      	movs	r3, #1
 8001050:	e7f0      	b.n	8001034 <_vfiprintf_r+0x1b8>
 8001052:	ab03      	add	r3, sp, #12
 8001054:	9300      	str	r3, [sp, #0]
 8001056:	462a      	mov	r2, r5
 8001058:	4b13      	ldr	r3, [pc, #76]	@ (80010a8 <_vfiprintf_r+0x22c>)
 800105a:	a904      	add	r1, sp, #16
 800105c:	4630      	mov	r0, r6
 800105e:	f3af 8000 	nop.w
 8001062:	4607      	mov	r7, r0
 8001064:	1c78      	adds	r0, r7, #1
 8001066:	d1d6      	bne.n	8001016 <_vfiprintf_r+0x19a>
 8001068:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800106a:	07d9      	lsls	r1, r3, #31
 800106c:	d405      	bmi.n	800107a <_vfiprintf_r+0x1fe>
 800106e:	89ab      	ldrh	r3, [r5, #12]
 8001070:	059a      	lsls	r2, r3, #22
 8001072:	d402      	bmi.n	800107a <_vfiprintf_r+0x1fe>
 8001074:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001076:	f7ff fddf 	bl	8000c38 <__retarget_lock_release_recursive>
 800107a:	89ab      	ldrh	r3, [r5, #12]
 800107c:	065b      	lsls	r3, r3, #25
 800107e:	f53f af1f 	bmi.w	8000ec0 <_vfiprintf_r+0x44>
 8001082:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001084:	e71e      	b.n	8000ec4 <_vfiprintf_r+0x48>
 8001086:	ab03      	add	r3, sp, #12
 8001088:	9300      	str	r3, [sp, #0]
 800108a:	462a      	mov	r2, r5
 800108c:	4b06      	ldr	r3, [pc, #24]	@ (80010a8 <_vfiprintf_r+0x22c>)
 800108e:	a904      	add	r1, sp, #16
 8001090:	4630      	mov	r0, r6
 8001092:	f000 f879 	bl	8001188 <_printf_i>
 8001096:	e7e4      	b.n	8001062 <_vfiprintf_r+0x1e6>
 8001098:	0800179f 	.word	0x0800179f
 800109c:	080017a5 	.word	0x080017a5
 80010a0:	080017a9 	.word	0x080017a9
 80010a4:	00000000 	.word	0x00000000
 80010a8:	08000e57 	.word	0x08000e57

080010ac <_printf_common>:
 80010ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80010b0:	4616      	mov	r6, r2
 80010b2:	4698      	mov	r8, r3
 80010b4:	688a      	ldr	r2, [r1, #8]
 80010b6:	690b      	ldr	r3, [r1, #16]
 80010b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80010bc:	4293      	cmp	r3, r2
 80010be:	bfb8      	it	lt
 80010c0:	4613      	movlt	r3, r2
 80010c2:	6033      	str	r3, [r6, #0]
 80010c4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80010c8:	4607      	mov	r7, r0
 80010ca:	460c      	mov	r4, r1
 80010cc:	b10a      	cbz	r2, 80010d2 <_printf_common+0x26>
 80010ce:	3301      	adds	r3, #1
 80010d0:	6033      	str	r3, [r6, #0]
 80010d2:	6823      	ldr	r3, [r4, #0]
 80010d4:	0699      	lsls	r1, r3, #26
 80010d6:	bf42      	ittt	mi
 80010d8:	6833      	ldrmi	r3, [r6, #0]
 80010da:	3302      	addmi	r3, #2
 80010dc:	6033      	strmi	r3, [r6, #0]
 80010de:	6825      	ldr	r5, [r4, #0]
 80010e0:	f015 0506 	ands.w	r5, r5, #6
 80010e4:	d106      	bne.n	80010f4 <_printf_common+0x48>
 80010e6:	f104 0a19 	add.w	sl, r4, #25
 80010ea:	68e3      	ldr	r3, [r4, #12]
 80010ec:	6832      	ldr	r2, [r6, #0]
 80010ee:	1a9b      	subs	r3, r3, r2
 80010f0:	42ab      	cmp	r3, r5
 80010f2:	dc26      	bgt.n	8001142 <_printf_common+0x96>
 80010f4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80010f8:	6822      	ldr	r2, [r4, #0]
 80010fa:	3b00      	subs	r3, #0
 80010fc:	bf18      	it	ne
 80010fe:	2301      	movne	r3, #1
 8001100:	0692      	lsls	r2, r2, #26
 8001102:	d42b      	bmi.n	800115c <_printf_common+0xb0>
 8001104:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001108:	4641      	mov	r1, r8
 800110a:	4638      	mov	r0, r7
 800110c:	47c8      	blx	r9
 800110e:	3001      	adds	r0, #1
 8001110:	d01e      	beq.n	8001150 <_printf_common+0xa4>
 8001112:	6823      	ldr	r3, [r4, #0]
 8001114:	6922      	ldr	r2, [r4, #16]
 8001116:	f003 0306 	and.w	r3, r3, #6
 800111a:	2b04      	cmp	r3, #4
 800111c:	bf02      	ittt	eq
 800111e:	68e5      	ldreq	r5, [r4, #12]
 8001120:	6833      	ldreq	r3, [r6, #0]
 8001122:	1aed      	subeq	r5, r5, r3
 8001124:	68a3      	ldr	r3, [r4, #8]
 8001126:	bf0c      	ite	eq
 8001128:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800112c:	2500      	movne	r5, #0
 800112e:	4293      	cmp	r3, r2
 8001130:	bfc4      	itt	gt
 8001132:	1a9b      	subgt	r3, r3, r2
 8001134:	18ed      	addgt	r5, r5, r3
 8001136:	2600      	movs	r6, #0
 8001138:	341a      	adds	r4, #26
 800113a:	42b5      	cmp	r5, r6
 800113c:	d11a      	bne.n	8001174 <_printf_common+0xc8>
 800113e:	2000      	movs	r0, #0
 8001140:	e008      	b.n	8001154 <_printf_common+0xa8>
 8001142:	2301      	movs	r3, #1
 8001144:	4652      	mov	r2, sl
 8001146:	4641      	mov	r1, r8
 8001148:	4638      	mov	r0, r7
 800114a:	47c8      	blx	r9
 800114c:	3001      	adds	r0, #1
 800114e:	d103      	bne.n	8001158 <_printf_common+0xac>
 8001150:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001154:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001158:	3501      	adds	r5, #1
 800115a:	e7c6      	b.n	80010ea <_printf_common+0x3e>
 800115c:	18e1      	adds	r1, r4, r3
 800115e:	1c5a      	adds	r2, r3, #1
 8001160:	2030      	movs	r0, #48	@ 0x30
 8001162:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001166:	4422      	add	r2, r4
 8001168:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800116c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001170:	3302      	adds	r3, #2
 8001172:	e7c7      	b.n	8001104 <_printf_common+0x58>
 8001174:	2301      	movs	r3, #1
 8001176:	4622      	mov	r2, r4
 8001178:	4641      	mov	r1, r8
 800117a:	4638      	mov	r0, r7
 800117c:	47c8      	blx	r9
 800117e:	3001      	adds	r0, #1
 8001180:	d0e6      	beq.n	8001150 <_printf_common+0xa4>
 8001182:	3601      	adds	r6, #1
 8001184:	e7d9      	b.n	800113a <_printf_common+0x8e>
	...

08001188 <_printf_i>:
 8001188:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800118c:	7e0f      	ldrb	r7, [r1, #24]
 800118e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001190:	2f78      	cmp	r7, #120	@ 0x78
 8001192:	4691      	mov	r9, r2
 8001194:	4680      	mov	r8, r0
 8001196:	460c      	mov	r4, r1
 8001198:	469a      	mov	sl, r3
 800119a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800119e:	d807      	bhi.n	80011b0 <_printf_i+0x28>
 80011a0:	2f62      	cmp	r7, #98	@ 0x62
 80011a2:	d80a      	bhi.n	80011ba <_printf_i+0x32>
 80011a4:	2f00      	cmp	r7, #0
 80011a6:	f000 80d1 	beq.w	800134c <_printf_i+0x1c4>
 80011aa:	2f58      	cmp	r7, #88	@ 0x58
 80011ac:	f000 80b8 	beq.w	8001320 <_printf_i+0x198>
 80011b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80011b4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80011b8:	e03a      	b.n	8001230 <_printf_i+0xa8>
 80011ba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80011be:	2b15      	cmp	r3, #21
 80011c0:	d8f6      	bhi.n	80011b0 <_printf_i+0x28>
 80011c2:	a101      	add	r1, pc, #4	@ (adr r1, 80011c8 <_printf_i+0x40>)
 80011c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80011c8:	08001221 	.word	0x08001221
 80011cc:	08001235 	.word	0x08001235
 80011d0:	080011b1 	.word	0x080011b1
 80011d4:	080011b1 	.word	0x080011b1
 80011d8:	080011b1 	.word	0x080011b1
 80011dc:	080011b1 	.word	0x080011b1
 80011e0:	08001235 	.word	0x08001235
 80011e4:	080011b1 	.word	0x080011b1
 80011e8:	080011b1 	.word	0x080011b1
 80011ec:	080011b1 	.word	0x080011b1
 80011f0:	080011b1 	.word	0x080011b1
 80011f4:	08001333 	.word	0x08001333
 80011f8:	0800125f 	.word	0x0800125f
 80011fc:	080012ed 	.word	0x080012ed
 8001200:	080011b1 	.word	0x080011b1
 8001204:	080011b1 	.word	0x080011b1
 8001208:	08001355 	.word	0x08001355
 800120c:	080011b1 	.word	0x080011b1
 8001210:	0800125f 	.word	0x0800125f
 8001214:	080011b1 	.word	0x080011b1
 8001218:	080011b1 	.word	0x080011b1
 800121c:	080012f5 	.word	0x080012f5
 8001220:	6833      	ldr	r3, [r6, #0]
 8001222:	1d1a      	adds	r2, r3, #4
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	6032      	str	r2, [r6, #0]
 8001228:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800122c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001230:	2301      	movs	r3, #1
 8001232:	e09c      	b.n	800136e <_printf_i+0x1e6>
 8001234:	6833      	ldr	r3, [r6, #0]
 8001236:	6820      	ldr	r0, [r4, #0]
 8001238:	1d19      	adds	r1, r3, #4
 800123a:	6031      	str	r1, [r6, #0]
 800123c:	0606      	lsls	r6, r0, #24
 800123e:	d501      	bpl.n	8001244 <_printf_i+0xbc>
 8001240:	681d      	ldr	r5, [r3, #0]
 8001242:	e003      	b.n	800124c <_printf_i+0xc4>
 8001244:	0645      	lsls	r5, r0, #25
 8001246:	d5fb      	bpl.n	8001240 <_printf_i+0xb8>
 8001248:	f9b3 5000 	ldrsh.w	r5, [r3]
 800124c:	2d00      	cmp	r5, #0
 800124e:	da03      	bge.n	8001258 <_printf_i+0xd0>
 8001250:	232d      	movs	r3, #45	@ 0x2d
 8001252:	426d      	negs	r5, r5
 8001254:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001258:	4858      	ldr	r0, [pc, #352]	@ (80013bc <_printf_i+0x234>)
 800125a:	230a      	movs	r3, #10
 800125c:	e011      	b.n	8001282 <_printf_i+0xfa>
 800125e:	6821      	ldr	r1, [r4, #0]
 8001260:	6833      	ldr	r3, [r6, #0]
 8001262:	0608      	lsls	r0, r1, #24
 8001264:	f853 5b04 	ldr.w	r5, [r3], #4
 8001268:	d402      	bmi.n	8001270 <_printf_i+0xe8>
 800126a:	0649      	lsls	r1, r1, #25
 800126c:	bf48      	it	mi
 800126e:	b2ad      	uxthmi	r5, r5
 8001270:	2f6f      	cmp	r7, #111	@ 0x6f
 8001272:	4852      	ldr	r0, [pc, #328]	@ (80013bc <_printf_i+0x234>)
 8001274:	6033      	str	r3, [r6, #0]
 8001276:	bf14      	ite	ne
 8001278:	230a      	movne	r3, #10
 800127a:	2308      	moveq	r3, #8
 800127c:	2100      	movs	r1, #0
 800127e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001282:	6866      	ldr	r6, [r4, #4]
 8001284:	60a6      	str	r6, [r4, #8]
 8001286:	2e00      	cmp	r6, #0
 8001288:	db05      	blt.n	8001296 <_printf_i+0x10e>
 800128a:	6821      	ldr	r1, [r4, #0]
 800128c:	432e      	orrs	r6, r5
 800128e:	f021 0104 	bic.w	r1, r1, #4
 8001292:	6021      	str	r1, [r4, #0]
 8001294:	d04b      	beq.n	800132e <_printf_i+0x1a6>
 8001296:	4616      	mov	r6, r2
 8001298:	fbb5 f1f3 	udiv	r1, r5, r3
 800129c:	fb03 5711 	mls	r7, r3, r1, r5
 80012a0:	5dc7      	ldrb	r7, [r0, r7]
 80012a2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80012a6:	462f      	mov	r7, r5
 80012a8:	42bb      	cmp	r3, r7
 80012aa:	460d      	mov	r5, r1
 80012ac:	d9f4      	bls.n	8001298 <_printf_i+0x110>
 80012ae:	2b08      	cmp	r3, #8
 80012b0:	d10b      	bne.n	80012ca <_printf_i+0x142>
 80012b2:	6823      	ldr	r3, [r4, #0]
 80012b4:	07df      	lsls	r7, r3, #31
 80012b6:	d508      	bpl.n	80012ca <_printf_i+0x142>
 80012b8:	6923      	ldr	r3, [r4, #16]
 80012ba:	6861      	ldr	r1, [r4, #4]
 80012bc:	4299      	cmp	r1, r3
 80012be:	bfde      	ittt	le
 80012c0:	2330      	movle	r3, #48	@ 0x30
 80012c2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80012c6:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80012ca:	1b92      	subs	r2, r2, r6
 80012cc:	6122      	str	r2, [r4, #16]
 80012ce:	f8cd a000 	str.w	sl, [sp]
 80012d2:	464b      	mov	r3, r9
 80012d4:	aa03      	add	r2, sp, #12
 80012d6:	4621      	mov	r1, r4
 80012d8:	4640      	mov	r0, r8
 80012da:	f7ff fee7 	bl	80010ac <_printf_common>
 80012de:	3001      	adds	r0, #1
 80012e0:	d14a      	bne.n	8001378 <_printf_i+0x1f0>
 80012e2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80012e6:	b004      	add	sp, #16
 80012e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012ec:	6823      	ldr	r3, [r4, #0]
 80012ee:	f043 0320 	orr.w	r3, r3, #32
 80012f2:	6023      	str	r3, [r4, #0]
 80012f4:	4832      	ldr	r0, [pc, #200]	@ (80013c0 <_printf_i+0x238>)
 80012f6:	2778      	movs	r7, #120	@ 0x78
 80012f8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80012fc:	6823      	ldr	r3, [r4, #0]
 80012fe:	6831      	ldr	r1, [r6, #0]
 8001300:	061f      	lsls	r7, r3, #24
 8001302:	f851 5b04 	ldr.w	r5, [r1], #4
 8001306:	d402      	bmi.n	800130e <_printf_i+0x186>
 8001308:	065f      	lsls	r7, r3, #25
 800130a:	bf48      	it	mi
 800130c:	b2ad      	uxthmi	r5, r5
 800130e:	6031      	str	r1, [r6, #0]
 8001310:	07d9      	lsls	r1, r3, #31
 8001312:	bf44      	itt	mi
 8001314:	f043 0320 	orrmi.w	r3, r3, #32
 8001318:	6023      	strmi	r3, [r4, #0]
 800131a:	b11d      	cbz	r5, 8001324 <_printf_i+0x19c>
 800131c:	2310      	movs	r3, #16
 800131e:	e7ad      	b.n	800127c <_printf_i+0xf4>
 8001320:	4826      	ldr	r0, [pc, #152]	@ (80013bc <_printf_i+0x234>)
 8001322:	e7e9      	b.n	80012f8 <_printf_i+0x170>
 8001324:	6823      	ldr	r3, [r4, #0]
 8001326:	f023 0320 	bic.w	r3, r3, #32
 800132a:	6023      	str	r3, [r4, #0]
 800132c:	e7f6      	b.n	800131c <_printf_i+0x194>
 800132e:	4616      	mov	r6, r2
 8001330:	e7bd      	b.n	80012ae <_printf_i+0x126>
 8001332:	6833      	ldr	r3, [r6, #0]
 8001334:	6825      	ldr	r5, [r4, #0]
 8001336:	6961      	ldr	r1, [r4, #20]
 8001338:	1d18      	adds	r0, r3, #4
 800133a:	6030      	str	r0, [r6, #0]
 800133c:	062e      	lsls	r6, r5, #24
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	d501      	bpl.n	8001346 <_printf_i+0x1be>
 8001342:	6019      	str	r1, [r3, #0]
 8001344:	e002      	b.n	800134c <_printf_i+0x1c4>
 8001346:	0668      	lsls	r0, r5, #25
 8001348:	d5fb      	bpl.n	8001342 <_printf_i+0x1ba>
 800134a:	8019      	strh	r1, [r3, #0]
 800134c:	2300      	movs	r3, #0
 800134e:	6123      	str	r3, [r4, #16]
 8001350:	4616      	mov	r6, r2
 8001352:	e7bc      	b.n	80012ce <_printf_i+0x146>
 8001354:	6833      	ldr	r3, [r6, #0]
 8001356:	1d1a      	adds	r2, r3, #4
 8001358:	6032      	str	r2, [r6, #0]
 800135a:	681e      	ldr	r6, [r3, #0]
 800135c:	6862      	ldr	r2, [r4, #4]
 800135e:	2100      	movs	r1, #0
 8001360:	4630      	mov	r0, r6
 8001362:	f7fe ff35 	bl	80001d0 <memchr>
 8001366:	b108      	cbz	r0, 800136c <_printf_i+0x1e4>
 8001368:	1b80      	subs	r0, r0, r6
 800136a:	6060      	str	r0, [r4, #4]
 800136c:	6863      	ldr	r3, [r4, #4]
 800136e:	6123      	str	r3, [r4, #16]
 8001370:	2300      	movs	r3, #0
 8001372:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001376:	e7aa      	b.n	80012ce <_printf_i+0x146>
 8001378:	6923      	ldr	r3, [r4, #16]
 800137a:	4632      	mov	r2, r6
 800137c:	4649      	mov	r1, r9
 800137e:	4640      	mov	r0, r8
 8001380:	47d0      	blx	sl
 8001382:	3001      	adds	r0, #1
 8001384:	d0ad      	beq.n	80012e2 <_printf_i+0x15a>
 8001386:	6823      	ldr	r3, [r4, #0]
 8001388:	079b      	lsls	r3, r3, #30
 800138a:	d413      	bmi.n	80013b4 <_printf_i+0x22c>
 800138c:	68e0      	ldr	r0, [r4, #12]
 800138e:	9b03      	ldr	r3, [sp, #12]
 8001390:	4298      	cmp	r0, r3
 8001392:	bfb8      	it	lt
 8001394:	4618      	movlt	r0, r3
 8001396:	e7a6      	b.n	80012e6 <_printf_i+0x15e>
 8001398:	2301      	movs	r3, #1
 800139a:	4632      	mov	r2, r6
 800139c:	4649      	mov	r1, r9
 800139e:	4640      	mov	r0, r8
 80013a0:	47d0      	blx	sl
 80013a2:	3001      	adds	r0, #1
 80013a4:	d09d      	beq.n	80012e2 <_printf_i+0x15a>
 80013a6:	3501      	adds	r5, #1
 80013a8:	68e3      	ldr	r3, [r4, #12]
 80013aa:	9903      	ldr	r1, [sp, #12]
 80013ac:	1a5b      	subs	r3, r3, r1
 80013ae:	42ab      	cmp	r3, r5
 80013b0:	dcf2      	bgt.n	8001398 <_printf_i+0x210>
 80013b2:	e7eb      	b.n	800138c <_printf_i+0x204>
 80013b4:	2500      	movs	r5, #0
 80013b6:	f104 0619 	add.w	r6, r4, #25
 80013ba:	e7f5      	b.n	80013a8 <_printf_i+0x220>
 80013bc:	080017b0 	.word	0x080017b0
 80013c0:	080017c1 	.word	0x080017c1

080013c4 <__sflush_r>:
 80013c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80013c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013ca:	0716      	lsls	r6, r2, #28
 80013cc:	4605      	mov	r5, r0
 80013ce:	460c      	mov	r4, r1
 80013d0:	d454      	bmi.n	800147c <__sflush_r+0xb8>
 80013d2:	684b      	ldr	r3, [r1, #4]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	dc02      	bgt.n	80013de <__sflush_r+0x1a>
 80013d8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80013da:	2b00      	cmp	r3, #0
 80013dc:	dd48      	ble.n	8001470 <__sflush_r+0xac>
 80013de:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80013e0:	2e00      	cmp	r6, #0
 80013e2:	d045      	beq.n	8001470 <__sflush_r+0xac>
 80013e4:	2300      	movs	r3, #0
 80013e6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80013ea:	682f      	ldr	r7, [r5, #0]
 80013ec:	6a21      	ldr	r1, [r4, #32]
 80013ee:	602b      	str	r3, [r5, #0]
 80013f0:	d030      	beq.n	8001454 <__sflush_r+0x90>
 80013f2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80013f4:	89a3      	ldrh	r3, [r4, #12]
 80013f6:	0759      	lsls	r1, r3, #29
 80013f8:	d505      	bpl.n	8001406 <__sflush_r+0x42>
 80013fa:	6863      	ldr	r3, [r4, #4]
 80013fc:	1ad2      	subs	r2, r2, r3
 80013fe:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001400:	b10b      	cbz	r3, 8001406 <__sflush_r+0x42>
 8001402:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001404:	1ad2      	subs	r2, r2, r3
 8001406:	2300      	movs	r3, #0
 8001408:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800140a:	6a21      	ldr	r1, [r4, #32]
 800140c:	4628      	mov	r0, r5
 800140e:	47b0      	blx	r6
 8001410:	1c43      	adds	r3, r0, #1
 8001412:	89a3      	ldrh	r3, [r4, #12]
 8001414:	d106      	bne.n	8001424 <__sflush_r+0x60>
 8001416:	6829      	ldr	r1, [r5, #0]
 8001418:	291d      	cmp	r1, #29
 800141a:	d82b      	bhi.n	8001474 <__sflush_r+0xb0>
 800141c:	4a28      	ldr	r2, [pc, #160]	@ (80014c0 <__sflush_r+0xfc>)
 800141e:	40ca      	lsrs	r2, r1
 8001420:	07d6      	lsls	r6, r2, #31
 8001422:	d527      	bpl.n	8001474 <__sflush_r+0xb0>
 8001424:	2200      	movs	r2, #0
 8001426:	6062      	str	r2, [r4, #4]
 8001428:	04d9      	lsls	r1, r3, #19
 800142a:	6922      	ldr	r2, [r4, #16]
 800142c:	6022      	str	r2, [r4, #0]
 800142e:	d504      	bpl.n	800143a <__sflush_r+0x76>
 8001430:	1c42      	adds	r2, r0, #1
 8001432:	d101      	bne.n	8001438 <__sflush_r+0x74>
 8001434:	682b      	ldr	r3, [r5, #0]
 8001436:	b903      	cbnz	r3, 800143a <__sflush_r+0x76>
 8001438:	6560      	str	r0, [r4, #84]	@ 0x54
 800143a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800143c:	602f      	str	r7, [r5, #0]
 800143e:	b1b9      	cbz	r1, 8001470 <__sflush_r+0xac>
 8001440:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001444:	4299      	cmp	r1, r3
 8001446:	d002      	beq.n	800144e <__sflush_r+0x8a>
 8001448:	4628      	mov	r0, r5
 800144a:	f7ff fbf7 	bl	8000c3c <_free_r>
 800144e:	2300      	movs	r3, #0
 8001450:	6363      	str	r3, [r4, #52]	@ 0x34
 8001452:	e00d      	b.n	8001470 <__sflush_r+0xac>
 8001454:	2301      	movs	r3, #1
 8001456:	4628      	mov	r0, r5
 8001458:	47b0      	blx	r6
 800145a:	4602      	mov	r2, r0
 800145c:	1c50      	adds	r0, r2, #1
 800145e:	d1c9      	bne.n	80013f4 <__sflush_r+0x30>
 8001460:	682b      	ldr	r3, [r5, #0]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d0c6      	beq.n	80013f4 <__sflush_r+0x30>
 8001466:	2b1d      	cmp	r3, #29
 8001468:	d001      	beq.n	800146e <__sflush_r+0xaa>
 800146a:	2b16      	cmp	r3, #22
 800146c:	d11d      	bne.n	80014aa <__sflush_r+0xe6>
 800146e:	602f      	str	r7, [r5, #0]
 8001470:	2000      	movs	r0, #0
 8001472:	e021      	b.n	80014b8 <__sflush_r+0xf4>
 8001474:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001478:	b21b      	sxth	r3, r3
 800147a:	e01a      	b.n	80014b2 <__sflush_r+0xee>
 800147c:	690f      	ldr	r7, [r1, #16]
 800147e:	2f00      	cmp	r7, #0
 8001480:	d0f6      	beq.n	8001470 <__sflush_r+0xac>
 8001482:	0793      	lsls	r3, r2, #30
 8001484:	680e      	ldr	r6, [r1, #0]
 8001486:	bf08      	it	eq
 8001488:	694b      	ldreq	r3, [r1, #20]
 800148a:	600f      	str	r7, [r1, #0]
 800148c:	bf18      	it	ne
 800148e:	2300      	movne	r3, #0
 8001490:	1bf6      	subs	r6, r6, r7
 8001492:	608b      	str	r3, [r1, #8]
 8001494:	2e00      	cmp	r6, #0
 8001496:	ddeb      	ble.n	8001470 <__sflush_r+0xac>
 8001498:	6a21      	ldr	r1, [r4, #32]
 800149a:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800149e:	4633      	mov	r3, r6
 80014a0:	463a      	mov	r2, r7
 80014a2:	4628      	mov	r0, r5
 80014a4:	47e0      	blx	ip
 80014a6:	2800      	cmp	r0, #0
 80014a8:	dc07      	bgt.n	80014ba <__sflush_r+0xf6>
 80014aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80014ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80014b2:	81a3      	strh	r3, [r4, #12]
 80014b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80014b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80014ba:	4407      	add	r7, r0
 80014bc:	1a36      	subs	r6, r6, r0
 80014be:	e7e9      	b.n	8001494 <__sflush_r+0xd0>
 80014c0:	20400001 	.word	0x20400001

080014c4 <_fflush_r>:
 80014c4:	b538      	push	{r3, r4, r5, lr}
 80014c6:	690b      	ldr	r3, [r1, #16]
 80014c8:	4605      	mov	r5, r0
 80014ca:	460c      	mov	r4, r1
 80014cc:	b913      	cbnz	r3, 80014d4 <_fflush_r+0x10>
 80014ce:	2500      	movs	r5, #0
 80014d0:	4628      	mov	r0, r5
 80014d2:	bd38      	pop	{r3, r4, r5, pc}
 80014d4:	b118      	cbz	r0, 80014de <_fflush_r+0x1a>
 80014d6:	6a03      	ldr	r3, [r0, #32]
 80014d8:	b90b      	cbnz	r3, 80014de <_fflush_r+0x1a>
 80014da:	f7ff faa7 	bl	8000a2c <__sinit>
 80014de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d0f3      	beq.n	80014ce <_fflush_r+0xa>
 80014e6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80014e8:	07d0      	lsls	r0, r2, #31
 80014ea:	d404      	bmi.n	80014f6 <_fflush_r+0x32>
 80014ec:	0599      	lsls	r1, r3, #22
 80014ee:	d402      	bmi.n	80014f6 <_fflush_r+0x32>
 80014f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80014f2:	f7ff fba0 	bl	8000c36 <__retarget_lock_acquire_recursive>
 80014f6:	4628      	mov	r0, r5
 80014f8:	4621      	mov	r1, r4
 80014fa:	f7ff ff63 	bl	80013c4 <__sflush_r>
 80014fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001500:	07da      	lsls	r2, r3, #31
 8001502:	4605      	mov	r5, r0
 8001504:	d4e4      	bmi.n	80014d0 <_fflush_r+0xc>
 8001506:	89a3      	ldrh	r3, [r4, #12]
 8001508:	059b      	lsls	r3, r3, #22
 800150a:	d4e1      	bmi.n	80014d0 <_fflush_r+0xc>
 800150c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800150e:	f7ff fb93 	bl	8000c38 <__retarget_lock_release_recursive>
 8001512:	e7dd      	b.n	80014d0 <_fflush_r+0xc>

08001514 <__swbuf_r>:
 8001514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001516:	460e      	mov	r6, r1
 8001518:	4614      	mov	r4, r2
 800151a:	4605      	mov	r5, r0
 800151c:	b118      	cbz	r0, 8001526 <__swbuf_r+0x12>
 800151e:	6a03      	ldr	r3, [r0, #32]
 8001520:	b90b      	cbnz	r3, 8001526 <__swbuf_r+0x12>
 8001522:	f7ff fa83 	bl	8000a2c <__sinit>
 8001526:	69a3      	ldr	r3, [r4, #24]
 8001528:	60a3      	str	r3, [r4, #8]
 800152a:	89a3      	ldrh	r3, [r4, #12]
 800152c:	071a      	lsls	r2, r3, #28
 800152e:	d501      	bpl.n	8001534 <__swbuf_r+0x20>
 8001530:	6923      	ldr	r3, [r4, #16]
 8001532:	b943      	cbnz	r3, 8001546 <__swbuf_r+0x32>
 8001534:	4621      	mov	r1, r4
 8001536:	4628      	mov	r0, r5
 8001538:	f000 f82a 	bl	8001590 <__swsetup_r>
 800153c:	b118      	cbz	r0, 8001546 <__swbuf_r+0x32>
 800153e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8001542:	4638      	mov	r0, r7
 8001544:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001546:	6823      	ldr	r3, [r4, #0]
 8001548:	6922      	ldr	r2, [r4, #16]
 800154a:	1a98      	subs	r0, r3, r2
 800154c:	6963      	ldr	r3, [r4, #20]
 800154e:	b2f6      	uxtb	r6, r6
 8001550:	4283      	cmp	r3, r0
 8001552:	4637      	mov	r7, r6
 8001554:	dc05      	bgt.n	8001562 <__swbuf_r+0x4e>
 8001556:	4621      	mov	r1, r4
 8001558:	4628      	mov	r0, r5
 800155a:	f7ff ffb3 	bl	80014c4 <_fflush_r>
 800155e:	2800      	cmp	r0, #0
 8001560:	d1ed      	bne.n	800153e <__swbuf_r+0x2a>
 8001562:	68a3      	ldr	r3, [r4, #8]
 8001564:	3b01      	subs	r3, #1
 8001566:	60a3      	str	r3, [r4, #8]
 8001568:	6823      	ldr	r3, [r4, #0]
 800156a:	1c5a      	adds	r2, r3, #1
 800156c:	6022      	str	r2, [r4, #0]
 800156e:	701e      	strb	r6, [r3, #0]
 8001570:	6962      	ldr	r2, [r4, #20]
 8001572:	1c43      	adds	r3, r0, #1
 8001574:	429a      	cmp	r2, r3
 8001576:	d004      	beq.n	8001582 <__swbuf_r+0x6e>
 8001578:	89a3      	ldrh	r3, [r4, #12]
 800157a:	07db      	lsls	r3, r3, #31
 800157c:	d5e1      	bpl.n	8001542 <__swbuf_r+0x2e>
 800157e:	2e0a      	cmp	r6, #10
 8001580:	d1df      	bne.n	8001542 <__swbuf_r+0x2e>
 8001582:	4621      	mov	r1, r4
 8001584:	4628      	mov	r0, r5
 8001586:	f7ff ff9d 	bl	80014c4 <_fflush_r>
 800158a:	2800      	cmp	r0, #0
 800158c:	d0d9      	beq.n	8001542 <__swbuf_r+0x2e>
 800158e:	e7d6      	b.n	800153e <__swbuf_r+0x2a>

08001590 <__swsetup_r>:
 8001590:	b538      	push	{r3, r4, r5, lr}
 8001592:	4b29      	ldr	r3, [pc, #164]	@ (8001638 <__swsetup_r+0xa8>)
 8001594:	4605      	mov	r5, r0
 8001596:	6818      	ldr	r0, [r3, #0]
 8001598:	460c      	mov	r4, r1
 800159a:	b118      	cbz	r0, 80015a4 <__swsetup_r+0x14>
 800159c:	6a03      	ldr	r3, [r0, #32]
 800159e:	b90b      	cbnz	r3, 80015a4 <__swsetup_r+0x14>
 80015a0:	f7ff fa44 	bl	8000a2c <__sinit>
 80015a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80015a8:	0719      	lsls	r1, r3, #28
 80015aa:	d422      	bmi.n	80015f2 <__swsetup_r+0x62>
 80015ac:	06da      	lsls	r2, r3, #27
 80015ae:	d407      	bmi.n	80015c0 <__swsetup_r+0x30>
 80015b0:	2209      	movs	r2, #9
 80015b2:	602a      	str	r2, [r5, #0]
 80015b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80015b8:	81a3      	strh	r3, [r4, #12]
 80015ba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80015be:	e033      	b.n	8001628 <__swsetup_r+0x98>
 80015c0:	0758      	lsls	r0, r3, #29
 80015c2:	d512      	bpl.n	80015ea <__swsetup_r+0x5a>
 80015c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80015c6:	b141      	cbz	r1, 80015da <__swsetup_r+0x4a>
 80015c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80015cc:	4299      	cmp	r1, r3
 80015ce:	d002      	beq.n	80015d6 <__swsetup_r+0x46>
 80015d0:	4628      	mov	r0, r5
 80015d2:	f7ff fb33 	bl	8000c3c <_free_r>
 80015d6:	2300      	movs	r3, #0
 80015d8:	6363      	str	r3, [r4, #52]	@ 0x34
 80015da:	89a3      	ldrh	r3, [r4, #12]
 80015dc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80015e0:	81a3      	strh	r3, [r4, #12]
 80015e2:	2300      	movs	r3, #0
 80015e4:	6063      	str	r3, [r4, #4]
 80015e6:	6923      	ldr	r3, [r4, #16]
 80015e8:	6023      	str	r3, [r4, #0]
 80015ea:	89a3      	ldrh	r3, [r4, #12]
 80015ec:	f043 0308 	orr.w	r3, r3, #8
 80015f0:	81a3      	strh	r3, [r4, #12]
 80015f2:	6923      	ldr	r3, [r4, #16]
 80015f4:	b94b      	cbnz	r3, 800160a <__swsetup_r+0x7a>
 80015f6:	89a3      	ldrh	r3, [r4, #12]
 80015f8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80015fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001600:	d003      	beq.n	800160a <__swsetup_r+0x7a>
 8001602:	4621      	mov	r1, r4
 8001604:	4628      	mov	r0, r5
 8001606:	f000 f84f 	bl	80016a8 <__smakebuf_r>
 800160a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800160e:	f013 0201 	ands.w	r2, r3, #1
 8001612:	d00a      	beq.n	800162a <__swsetup_r+0x9a>
 8001614:	2200      	movs	r2, #0
 8001616:	60a2      	str	r2, [r4, #8]
 8001618:	6962      	ldr	r2, [r4, #20]
 800161a:	4252      	negs	r2, r2
 800161c:	61a2      	str	r2, [r4, #24]
 800161e:	6922      	ldr	r2, [r4, #16]
 8001620:	b942      	cbnz	r2, 8001634 <__swsetup_r+0xa4>
 8001622:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8001626:	d1c5      	bne.n	80015b4 <__swsetup_r+0x24>
 8001628:	bd38      	pop	{r3, r4, r5, pc}
 800162a:	0799      	lsls	r1, r3, #30
 800162c:	bf58      	it	pl
 800162e:	6962      	ldrpl	r2, [r4, #20]
 8001630:	60a2      	str	r2, [r4, #8]
 8001632:	e7f4      	b.n	800161e <__swsetup_r+0x8e>
 8001634:	2000      	movs	r0, #0
 8001636:	e7f7      	b.n	8001628 <__swsetup_r+0x98>
 8001638:	2000000c 	.word	0x2000000c

0800163c <_sbrk_r>:
 800163c:	b538      	push	{r3, r4, r5, lr}
 800163e:	4d06      	ldr	r5, [pc, #24]	@ (8001658 <_sbrk_r+0x1c>)
 8001640:	2300      	movs	r3, #0
 8001642:	4604      	mov	r4, r0
 8001644:	4608      	mov	r0, r1
 8001646:	602b      	str	r3, [r5, #0]
 8001648:	f7ff f8ce 	bl	80007e8 <_sbrk>
 800164c:	1c43      	adds	r3, r0, #1
 800164e:	d102      	bne.n	8001656 <_sbrk_r+0x1a>
 8001650:	682b      	ldr	r3, [r5, #0]
 8001652:	b103      	cbz	r3, 8001656 <_sbrk_r+0x1a>
 8001654:	6023      	str	r3, [r4, #0]
 8001656:	bd38      	pop	{r3, r4, r5, pc}
 8001658:	200001b8 	.word	0x200001b8

0800165c <__swhatbuf_r>:
 800165c:	b570      	push	{r4, r5, r6, lr}
 800165e:	460c      	mov	r4, r1
 8001660:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001664:	2900      	cmp	r1, #0
 8001666:	b096      	sub	sp, #88	@ 0x58
 8001668:	4615      	mov	r5, r2
 800166a:	461e      	mov	r6, r3
 800166c:	da0d      	bge.n	800168a <__swhatbuf_r+0x2e>
 800166e:	89a3      	ldrh	r3, [r4, #12]
 8001670:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001674:	f04f 0100 	mov.w	r1, #0
 8001678:	bf14      	ite	ne
 800167a:	2340      	movne	r3, #64	@ 0x40
 800167c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001680:	2000      	movs	r0, #0
 8001682:	6031      	str	r1, [r6, #0]
 8001684:	602b      	str	r3, [r5, #0]
 8001686:	b016      	add	sp, #88	@ 0x58
 8001688:	bd70      	pop	{r4, r5, r6, pc}
 800168a:	466a      	mov	r2, sp
 800168c:	f000 f848 	bl	8001720 <_fstat_r>
 8001690:	2800      	cmp	r0, #0
 8001692:	dbec      	blt.n	800166e <__swhatbuf_r+0x12>
 8001694:	9901      	ldr	r1, [sp, #4]
 8001696:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800169a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800169e:	4259      	negs	r1, r3
 80016a0:	4159      	adcs	r1, r3
 80016a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80016a6:	e7eb      	b.n	8001680 <__swhatbuf_r+0x24>

080016a8 <__smakebuf_r>:
 80016a8:	898b      	ldrh	r3, [r1, #12]
 80016aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80016ac:	079d      	lsls	r5, r3, #30
 80016ae:	4606      	mov	r6, r0
 80016b0:	460c      	mov	r4, r1
 80016b2:	d507      	bpl.n	80016c4 <__smakebuf_r+0x1c>
 80016b4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80016b8:	6023      	str	r3, [r4, #0]
 80016ba:	6123      	str	r3, [r4, #16]
 80016bc:	2301      	movs	r3, #1
 80016be:	6163      	str	r3, [r4, #20]
 80016c0:	b003      	add	sp, #12
 80016c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016c4:	ab01      	add	r3, sp, #4
 80016c6:	466a      	mov	r2, sp
 80016c8:	f7ff ffc8 	bl	800165c <__swhatbuf_r>
 80016cc:	9f00      	ldr	r7, [sp, #0]
 80016ce:	4605      	mov	r5, r0
 80016d0:	4639      	mov	r1, r7
 80016d2:	4630      	mov	r0, r6
 80016d4:	f7ff fb1e 	bl	8000d14 <_malloc_r>
 80016d8:	b948      	cbnz	r0, 80016ee <__smakebuf_r+0x46>
 80016da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80016de:	059a      	lsls	r2, r3, #22
 80016e0:	d4ee      	bmi.n	80016c0 <__smakebuf_r+0x18>
 80016e2:	f023 0303 	bic.w	r3, r3, #3
 80016e6:	f043 0302 	orr.w	r3, r3, #2
 80016ea:	81a3      	strh	r3, [r4, #12]
 80016ec:	e7e2      	b.n	80016b4 <__smakebuf_r+0xc>
 80016ee:	89a3      	ldrh	r3, [r4, #12]
 80016f0:	6020      	str	r0, [r4, #0]
 80016f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80016f6:	81a3      	strh	r3, [r4, #12]
 80016f8:	9b01      	ldr	r3, [sp, #4]
 80016fa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80016fe:	b15b      	cbz	r3, 8001718 <__smakebuf_r+0x70>
 8001700:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001704:	4630      	mov	r0, r6
 8001706:	f000 f81d 	bl	8001744 <_isatty_r>
 800170a:	b128      	cbz	r0, 8001718 <__smakebuf_r+0x70>
 800170c:	89a3      	ldrh	r3, [r4, #12]
 800170e:	f023 0303 	bic.w	r3, r3, #3
 8001712:	f043 0301 	orr.w	r3, r3, #1
 8001716:	81a3      	strh	r3, [r4, #12]
 8001718:	89a3      	ldrh	r3, [r4, #12]
 800171a:	431d      	orrs	r5, r3
 800171c:	81a5      	strh	r5, [r4, #12]
 800171e:	e7cf      	b.n	80016c0 <__smakebuf_r+0x18>

08001720 <_fstat_r>:
 8001720:	b538      	push	{r3, r4, r5, lr}
 8001722:	4d07      	ldr	r5, [pc, #28]	@ (8001740 <_fstat_r+0x20>)
 8001724:	2300      	movs	r3, #0
 8001726:	4604      	mov	r4, r0
 8001728:	4608      	mov	r0, r1
 800172a:	4611      	mov	r1, r2
 800172c:	602b      	str	r3, [r5, #0]
 800172e:	f7ff f835 	bl	800079c <_fstat>
 8001732:	1c43      	adds	r3, r0, #1
 8001734:	d102      	bne.n	800173c <_fstat_r+0x1c>
 8001736:	682b      	ldr	r3, [r5, #0]
 8001738:	b103      	cbz	r3, 800173c <_fstat_r+0x1c>
 800173a:	6023      	str	r3, [r4, #0]
 800173c:	bd38      	pop	{r3, r4, r5, pc}
 800173e:	bf00      	nop
 8001740:	200001b8 	.word	0x200001b8

08001744 <_isatty_r>:
 8001744:	b538      	push	{r3, r4, r5, lr}
 8001746:	4d06      	ldr	r5, [pc, #24]	@ (8001760 <_isatty_r+0x1c>)
 8001748:	2300      	movs	r3, #0
 800174a:	4604      	mov	r4, r0
 800174c:	4608      	mov	r0, r1
 800174e:	602b      	str	r3, [r5, #0]
 8001750:	f7ff f833 	bl	80007ba <_isatty>
 8001754:	1c43      	adds	r3, r0, #1
 8001756:	d102      	bne.n	800175e <_isatty_r+0x1a>
 8001758:	682b      	ldr	r3, [r5, #0]
 800175a:	b103      	cbz	r3, 800175e <_isatty_r+0x1a>
 800175c:	6023      	str	r3, [r4, #0]
 800175e:	bd38      	pop	{r3, r4, r5, pc}
 8001760:	200001b8 	.word	0x200001b8

08001764 <_init>:
 8001764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001766:	bf00      	nop
 8001768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800176a:	bc08      	pop	{r3}
 800176c:	469e      	mov	lr, r3
 800176e:	4770      	bx	lr

08001770 <_fini>:
 8001770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001772:	bf00      	nop
 8001774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001776:	bc08      	pop	{r3}
 8001778:	469e      	mov	lr, r3
 800177a:	4770      	bx	lr

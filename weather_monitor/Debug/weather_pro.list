
weather_pro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000118c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  0800131c  0800131c  0000231c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080013c4  080013c4  00003054  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080013c4  080013c4  000023c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080013cc  080013cc  00003054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080013cc  080013cc  000023cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080013d0  080013d0  000023d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000054  20000000  080013d4  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00003054  2**0
                  CONTENTS
 10 .bss          00000168  20000054  20000054  00003054  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001bc  200001bc  00003054  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00003054  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001aaf  00000000  00000000  0000307e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000008e3  00000000  00000000  00004b2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001a8  00000000  00000000  00005410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000116  00000000  00000000  000055b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019553  00000000  00000000  000056ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000024df  00000000  00000000  0001ec21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008bf89  00000000  00000000  00021100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000ad089  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000910  00000000  00000000  000ad0cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 00000025  00000000  00000000  000ad9dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000005a  00000000  00000000  000ada01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000054 	.word	0x20000054
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08001304 	.word	0x08001304

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000058 	.word	0x20000058
 80001cc:	08001304 	.word	0x08001304

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <adc_init>:
 */

#include "adc.h"
#include "stm32f4xx.h"

void adc_init(void) {
 8000270:	b480      	push	{r7}
 8000272:	af00      	add	r7, sp, #0
    // Enable GPIOA and ADC1 clocks
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000274:	4b1c      	ldr	r3, [pc, #112]	@ (80002e8 <adc_init+0x78>)
 8000276:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000278:	4a1b      	ldr	r2, [pc, #108]	@ (80002e8 <adc_init+0x78>)
 800027a:	f043 0301 	orr.w	r3, r3, #1
 800027e:	6313      	str	r3, [r2, #48]	@ 0x30
    RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 8000280:	4b19      	ldr	r3, [pc, #100]	@ (80002e8 <adc_init+0x78>)
 8000282:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000284:	4a18      	ldr	r2, [pc, #96]	@ (80002e8 <adc_init+0x78>)
 8000286:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800028a:	6453      	str	r3, [r2, #68]	@ 0x44

    // Set PA4 as analog mode (MODER4 = 11)
    GPIOA->MODER |= (3 << (2 * 4));    // Analog mode
 800028c:	4b17      	ldr	r3, [pc, #92]	@ (80002ec <adc_init+0x7c>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	4a16      	ldr	r2, [pc, #88]	@ (80002ec <adc_init+0x7c>)
 8000292:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8000296:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR &= ~(3 << (2 * 4));   // No pull-up/pull-down
 8000298:	4b14      	ldr	r3, [pc, #80]	@ (80002ec <adc_init+0x7c>)
 800029a:	68db      	ldr	r3, [r3, #12]
 800029c:	4a13      	ldr	r2, [pc, #76]	@ (80002ec <adc_init+0x7c>)
 800029e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80002a2:	60d3      	str	r3, [r2, #12]

    // ADC Common Control Register: PCLK2 / 4
    ADC->CCR &= ~(3 << 16);            // Clear ADCPRE bits
 80002a4:	4b12      	ldr	r3, [pc, #72]	@ (80002f0 <adc_init+0x80>)
 80002a6:	685b      	ldr	r3, [r3, #4]
 80002a8:	4a11      	ldr	r2, [pc, #68]	@ (80002f0 <adc_init+0x80>)
 80002aa:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80002ae:	6053      	str	r3, [r2, #4]
    ADC->CCR |=  (1 << 16);            // ADCPRE = 01 â†’ PCLK2 / 4
 80002b0:	4b0f      	ldr	r3, [pc, #60]	@ (80002f0 <adc_init+0x80>)
 80002b2:	685b      	ldr	r3, [r3, #4]
 80002b4:	4a0e      	ldr	r2, [pc, #56]	@ (80002f0 <adc_init+0x80>)
 80002b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80002ba:	6053      	str	r3, [r2, #4]

    // Configure ADC1
    ADC1->CR2 = 0;                     // Clear control register
 80002bc:	4b0d      	ldr	r3, [pc, #52]	@ (80002f4 <adc_init+0x84>)
 80002be:	2200      	movs	r2, #0
 80002c0:	609a      	str	r2, [r3, #8]
    ADC1->SMPR2 |= (7 << 12);          // Channel 4 sample time = 480 cycles (recommended for stable reads)
 80002c2:	4b0c      	ldr	r3, [pc, #48]	@ (80002f4 <adc_init+0x84>)
 80002c4:	691b      	ldr	r3, [r3, #16]
 80002c6:	4a0b      	ldr	r2, [pc, #44]	@ (80002f4 <adc_init+0x84>)
 80002c8:	f443 43e0 	orr.w	r3, r3, #28672	@ 0x7000
 80002cc:	6113      	str	r3, [r2, #16]
    ADC1->SQR3 = 4;                    // First conversion in regular sequence: channel 4 (PA4)
 80002ce:	4b09      	ldr	r3, [pc, #36]	@ (80002f4 <adc_init+0x84>)
 80002d0:	2204      	movs	r2, #4
 80002d2:	635a      	str	r2, [r3, #52]	@ 0x34
    ADC1->CR2 |= ADC_CR2_ADON;        // Enable ADC1
 80002d4:	4b07      	ldr	r3, [pc, #28]	@ (80002f4 <adc_init+0x84>)
 80002d6:	689b      	ldr	r3, [r3, #8]
 80002d8:	4a06      	ldr	r2, [pc, #24]	@ (80002f4 <adc_init+0x84>)
 80002da:	f043 0301 	orr.w	r3, r3, #1
 80002de:	6093      	str	r3, [r2, #8]
}
 80002e0:	bf00      	nop
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bc80      	pop	{r7}
 80002e6:	4770      	bx	lr
 80002e8:	40023800 	.word	0x40023800
 80002ec:	40020000 	.word	0x40020000
 80002f0:	40012300 	.word	0x40012300
 80002f4:	40012000 	.word	0x40012000

080002f8 <adc_read>:

uint16_t adc_read(uint8_t channel) {
 80002f8:	b480      	push	{r7}
 80002fa:	b083      	sub	sp, #12
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	4603      	mov	r3, r0
 8000300:	71fb      	strb	r3, [r7, #7]
    ADC1->SQR3 = channel;             // Select desired channel (e.g., 4 for PA4)
 8000302:	4a0c      	ldr	r2, [pc, #48]	@ (8000334 <adc_read+0x3c>)
 8000304:	79fb      	ldrb	r3, [r7, #7]
 8000306:	6353      	str	r3, [r2, #52]	@ 0x34
    ADC1->CR2 |= ADC_CR2_SWSTART;     // Start conversion
 8000308:	4b0a      	ldr	r3, [pc, #40]	@ (8000334 <adc_read+0x3c>)
 800030a:	689b      	ldr	r3, [r3, #8]
 800030c:	4a09      	ldr	r2, [pc, #36]	@ (8000334 <adc_read+0x3c>)
 800030e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8000312:	6093      	str	r3, [r2, #8]
    while (!(ADC1->SR & ADC_SR_EOC)); // Wait for conversion complete
 8000314:	bf00      	nop
 8000316:	4b07      	ldr	r3, [pc, #28]	@ (8000334 <adc_read+0x3c>)
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	f003 0302 	and.w	r3, r3, #2
 800031e:	2b00      	cmp	r3, #0
 8000320:	d0f9      	beq.n	8000316 <adc_read+0x1e>
    return ADC1->DR;                  // Read result
 8000322:	4b04      	ldr	r3, [pc, #16]	@ (8000334 <adc_read+0x3c>)
 8000324:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000326:	b29b      	uxth	r3, r3
}
 8000328:	4618      	mov	r0, r3
 800032a:	370c      	adds	r7, #12
 800032c:	46bd      	mov	sp, r7
 800032e:	bc80      	pop	{r7}
 8000330:	4770      	bx	lr
 8000332:	bf00      	nop
 8000334:	40012000 	.word	0x40012000

08000338 <delay_us>:

#define DHT11_PORT GPIOA
#define DHT11_PIN  1  // PA1

void delay_us(uint32_t us)
{
 8000338:	b480      	push	{r7}
 800033a:	b083      	sub	sp, #12
 800033c:	af00      	add	r7, sp, #0
 800033e:	6078      	str	r0, [r7, #4]
    SysTick->LOAD = (us * (SystemCoreClock / 1000000)) - 1;
 8000340:	4b10      	ldr	r3, [pc, #64]	@ (8000384 <delay_us+0x4c>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	4a10      	ldr	r2, [pc, #64]	@ (8000388 <delay_us+0x50>)
 8000346:	fba2 2303 	umull	r2, r3, r2, r3
 800034a:	0c9b      	lsrs	r3, r3, #18
 800034c:	687a      	ldr	r2, [r7, #4]
 800034e:	fb02 f303 	mul.w	r3, r2, r3
 8000352:	4a0e      	ldr	r2, [pc, #56]	@ (800038c <delay_us+0x54>)
 8000354:	3b01      	subs	r3, #1
 8000356:	6053      	str	r3, [r2, #4]
    SysTick->VAL = 0;
 8000358:	4b0c      	ldr	r3, [pc, #48]	@ (800038c <delay_us+0x54>)
 800035a:	2200      	movs	r2, #0
 800035c:	609a      	str	r2, [r3, #8]
    SysTick->CTRL = 5; // Processor clock, no interrupt
 800035e:	4b0b      	ldr	r3, [pc, #44]	@ (800038c <delay_us+0x54>)
 8000360:	2205      	movs	r2, #5
 8000362:	601a      	str	r2, [r3, #0]

    while ((SysTick->CTRL & 0x10000) == 0);
 8000364:	bf00      	nop
 8000366:	4b09      	ldr	r3, [pc, #36]	@ (800038c <delay_us+0x54>)
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800036e:	2b00      	cmp	r3, #0
 8000370:	d0f9      	beq.n	8000366 <delay_us+0x2e>
    SysTick->CTRL = 0;
 8000372:	4b06      	ldr	r3, [pc, #24]	@ (800038c <delay_us+0x54>)
 8000374:	2200      	movs	r2, #0
 8000376:	601a      	str	r2, [r3, #0]
}
 8000378:	bf00      	nop
 800037a:	370c      	adds	r7, #12
 800037c:	46bd      	mov	sp, r7
 800037e:	bc80      	pop	{r7}
 8000380:	4770      	bx	lr
 8000382:	bf00      	nop
 8000384:	20000000 	.word	0x20000000
 8000388:	431bde83 	.word	0x431bde83
 800038c:	e000e010 	.word	0xe000e010

08000390 <set_pin_output>:

static void set_pin_output(void)
{
 8000390:	b480      	push	{r7}
 8000392:	af00      	add	r7, sp, #0
    DHT11_PORT->MODER &= ~(3 << (DHT11_PIN * 2));
 8000394:	4b07      	ldr	r3, [pc, #28]	@ (80003b4 <set_pin_output+0x24>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	4a06      	ldr	r2, [pc, #24]	@ (80003b4 <set_pin_output+0x24>)
 800039a:	f023 030c 	bic.w	r3, r3, #12
 800039e:	6013      	str	r3, [r2, #0]
    DHT11_PORT->MODER |=  (1 << (DHT11_PIN * 2)); // Output
 80003a0:	4b04      	ldr	r3, [pc, #16]	@ (80003b4 <set_pin_output+0x24>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	4a03      	ldr	r2, [pc, #12]	@ (80003b4 <set_pin_output+0x24>)
 80003a6:	f043 0304 	orr.w	r3, r3, #4
 80003aa:	6013      	str	r3, [r2, #0]
}
 80003ac:	bf00      	nop
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bc80      	pop	{r7}
 80003b2:	4770      	bx	lr
 80003b4:	40020000 	.word	0x40020000

080003b8 <set_pin_input>:

static void set_pin_input(void)
{
 80003b8:	b480      	push	{r7}
 80003ba:	af00      	add	r7, sp, #0
    DHT11_PORT->MODER &= ~(3 << (DHT11_PIN * 2)); // Input
 80003bc:	4b04      	ldr	r3, [pc, #16]	@ (80003d0 <set_pin_input+0x18>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	4a03      	ldr	r2, [pc, #12]	@ (80003d0 <set_pin_input+0x18>)
 80003c2:	f023 030c 	bic.w	r3, r3, #12
 80003c6:	6013      	str	r3, [r2, #0]
}
 80003c8:	bf00      	nop
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bc80      	pop	{r7}
 80003ce:	4770      	bx	lr
 80003d0:	40020000 	.word	0x40020000

080003d4 <DHT11_Init>:

void DHT11_Init(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80003d8:	4b07      	ldr	r3, [pc, #28]	@ (80003f8 <DHT11_Init+0x24>)
 80003da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003dc:	4a06      	ldr	r2, [pc, #24]	@ (80003f8 <DHT11_Init+0x24>)
 80003de:	f043 0301 	orr.w	r3, r3, #1
 80003e2:	6313      	str	r3, [r2, #48]	@ 0x30
    set_pin_output();
 80003e4:	f7ff ffd4 	bl	8000390 <set_pin_output>
    DHT11_PORT->ODR |= (1 << DHT11_PIN); // Pull high
 80003e8:	4b04      	ldr	r3, [pc, #16]	@ (80003fc <DHT11_Init+0x28>)
 80003ea:	695b      	ldr	r3, [r3, #20]
 80003ec:	4a03      	ldr	r2, [pc, #12]	@ (80003fc <DHT11_Init+0x28>)
 80003ee:	f043 0302 	orr.w	r3, r3, #2
 80003f2:	6153      	str	r3, [r2, #20]
}
 80003f4:	bf00      	nop
 80003f6:	bd80      	pop	{r7, pc}
 80003f8:	40023800 	.word	0x40023800
 80003fc:	40020000 	.word	0x40020000

08000400 <check_response>:

static uint8_t check_response(void)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b082      	sub	sp, #8
 8000404:	af00      	add	r7, sp, #0
    uint8_t response = 0;
 8000406:	2300      	movs	r3, #0
 8000408:	71fb      	strb	r3, [r7, #7]
    delay_us(40);
 800040a:	2028      	movs	r0, #40	@ 0x28
 800040c:	f7ff ff94 	bl	8000338 <delay_us>

    if (!(DHT11_PORT->IDR & (1 << DHT11_PIN)))
 8000410:	4b0c      	ldr	r3, [pc, #48]	@ (8000444 <check_response+0x44>)
 8000412:	691b      	ldr	r3, [r3, #16]
 8000414:	f003 0302 	and.w	r3, r3, #2
 8000418:	2b00      	cmp	r3, #0
 800041a:	d10d      	bne.n	8000438 <check_response+0x38>
    {
        delay_us(80);
 800041c:	2050      	movs	r0, #80	@ 0x50
 800041e:	f7ff ff8b 	bl	8000338 <delay_us>
        if (DHT11_PORT->IDR & (1 << DHT11_PIN)) response = 1;
 8000422:	4b08      	ldr	r3, [pc, #32]	@ (8000444 <check_response+0x44>)
 8000424:	691b      	ldr	r3, [r3, #16]
 8000426:	f003 0302 	and.w	r3, r3, #2
 800042a:	2b00      	cmp	r3, #0
 800042c:	d001      	beq.n	8000432 <check_response+0x32>
 800042e:	2301      	movs	r3, #1
 8000430:	71fb      	strb	r3, [r7, #7]
        delay_us(80);
 8000432:	2050      	movs	r0, #80	@ 0x50
 8000434:	f7ff ff80 	bl	8000338 <delay_us>
    }
    return response;
 8000438:	79fb      	ldrb	r3, [r7, #7]
}
 800043a:	4618      	mov	r0, r3
 800043c:	3708      	adds	r7, #8
 800043e:	46bd      	mov	sp, r7
 8000440:	bd80      	pop	{r7, pc}
 8000442:	bf00      	nop
 8000444:	40020000 	.word	0x40020000

08000448 <read_byte>:

static uint8_t read_byte(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b082      	sub	sp, #8
 800044c:	af00      	add	r7, sp, #0
    uint8_t i, byte = 0;
 800044e:	2300      	movs	r3, #0
 8000450:	71bb      	strb	r3, [r7, #6]

    for (i = 0; i < 8; i++)
 8000452:	2300      	movs	r3, #0
 8000454:	71fb      	strb	r3, [r7, #7]
 8000456:	e025      	b.n	80004a4 <read_byte+0x5c>
    {
        while (!(DHT11_PORT->IDR & (1 << DHT11_PIN))); // wait for HIGH
 8000458:	bf00      	nop
 800045a:	4b16      	ldr	r3, [pc, #88]	@ (80004b4 <read_byte+0x6c>)
 800045c:	691b      	ldr	r3, [r3, #16]
 800045e:	f003 0302 	and.w	r3, r3, #2
 8000462:	2b00      	cmp	r3, #0
 8000464:	d0f9      	beq.n	800045a <read_byte+0x12>
        delay_us(40);
 8000466:	2028      	movs	r0, #40	@ 0x28
 8000468:	f7ff ff66 	bl	8000338 <delay_us>
        if (DHT11_PORT->IDR & (1 << DHT11_PIN))
 800046c:	4b11      	ldr	r3, [pc, #68]	@ (80004b4 <read_byte+0x6c>)
 800046e:	691b      	ldr	r3, [r3, #16]
 8000470:	f003 0302 	and.w	r3, r3, #2
 8000474:	2b00      	cmp	r3, #0
 8000476:	d00b      	beq.n	8000490 <read_byte+0x48>
            byte |= (1 << (7 - i));
 8000478:	79fb      	ldrb	r3, [r7, #7]
 800047a:	f1c3 0307 	rsb	r3, r3, #7
 800047e:	2201      	movs	r2, #1
 8000480:	fa02 f303 	lsl.w	r3, r2, r3
 8000484:	b25a      	sxtb	r2, r3
 8000486:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800048a:	4313      	orrs	r3, r2
 800048c:	b25b      	sxtb	r3, r3
 800048e:	71bb      	strb	r3, [r7, #6]
        while (DHT11_PORT->IDR & (1 << DHT11_PIN)); // wait for LOW
 8000490:	bf00      	nop
 8000492:	4b08      	ldr	r3, [pc, #32]	@ (80004b4 <read_byte+0x6c>)
 8000494:	691b      	ldr	r3, [r3, #16]
 8000496:	f003 0302 	and.w	r3, r3, #2
 800049a:	2b00      	cmp	r3, #0
 800049c:	d1f9      	bne.n	8000492 <read_byte+0x4a>
    for (i = 0; i < 8; i++)
 800049e:	79fb      	ldrb	r3, [r7, #7]
 80004a0:	3301      	adds	r3, #1
 80004a2:	71fb      	strb	r3, [r7, #7]
 80004a4:	79fb      	ldrb	r3, [r7, #7]
 80004a6:	2b07      	cmp	r3, #7
 80004a8:	d9d6      	bls.n	8000458 <read_byte+0x10>
    }
    return byte;
 80004aa:	79bb      	ldrb	r3, [r7, #6]
}
 80004ac:	4618      	mov	r0, r3
 80004ae:	3708      	adds	r7, #8
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bd80      	pop	{r7, pc}
 80004b4:	40020000 	.word	0x40020000

080004b8 <DHT11_Read>:

uint8_t DHT11_Read(uint8_t *temperature, uint8_t *humidity)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b084      	sub	sp, #16
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
 80004c0:	6039      	str	r1, [r7, #0]
    uint8_t hum_int, hum_dec, temp_int, temp_dec, checksum;

    set_pin_output();
 80004c2:	f7ff ff65 	bl	8000390 <set_pin_output>
    DHT11_PORT->ODR &= ~(1 << DHT11_PIN); // Start signal - pull low
 80004c6:	4b23      	ldr	r3, [pc, #140]	@ (8000554 <DHT11_Read+0x9c>)
 80004c8:	695b      	ldr	r3, [r3, #20]
 80004ca:	4a22      	ldr	r2, [pc, #136]	@ (8000554 <DHT11_Read+0x9c>)
 80004cc:	f023 0302 	bic.w	r3, r3, #2
 80004d0:	6153      	str	r3, [r2, #20]
    delay_us(18000); // 18ms
 80004d2:	f244 6050 	movw	r0, #18000	@ 0x4650
 80004d6:	f7ff ff2f 	bl	8000338 <delay_us>
    DHT11_PORT->ODR |= (1 << DHT11_PIN);  // Pull high
 80004da:	4b1e      	ldr	r3, [pc, #120]	@ (8000554 <DHT11_Read+0x9c>)
 80004dc:	695b      	ldr	r3, [r3, #20]
 80004de:	4a1d      	ldr	r2, [pc, #116]	@ (8000554 <DHT11_Read+0x9c>)
 80004e0:	f043 0302 	orr.w	r3, r3, #2
 80004e4:	6153      	str	r3, [r2, #20]
    delay_us(30);
 80004e6:	201e      	movs	r0, #30
 80004e8:	f7ff ff26 	bl	8000338 <delay_us>
    set_pin_input();
 80004ec:	f7ff ff64 	bl	80003b8 <set_pin_input>

    if (!check_response()) return 0;
 80004f0:	f7ff ff86 	bl	8000400 <check_response>
 80004f4:	4603      	mov	r3, r0
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d101      	bne.n	80004fe <DHT11_Read+0x46>
 80004fa:	2300      	movs	r3, #0
 80004fc:	e026      	b.n	800054c <DHT11_Read+0x94>

    hum_int  = read_byte();
 80004fe:	f7ff ffa3 	bl	8000448 <read_byte>
 8000502:	4603      	mov	r3, r0
 8000504:	73fb      	strb	r3, [r7, #15]
    hum_dec  = read_byte();
 8000506:	f7ff ff9f 	bl	8000448 <read_byte>
 800050a:	4603      	mov	r3, r0
 800050c:	73bb      	strb	r3, [r7, #14]
    temp_int = read_byte();
 800050e:	f7ff ff9b 	bl	8000448 <read_byte>
 8000512:	4603      	mov	r3, r0
 8000514:	737b      	strb	r3, [r7, #13]
    temp_dec = read_byte();
 8000516:	f7ff ff97 	bl	8000448 <read_byte>
 800051a:	4603      	mov	r3, r0
 800051c:	733b      	strb	r3, [r7, #12]
    checksum = read_byte();
 800051e:	f7ff ff93 	bl	8000448 <read_byte>
 8000522:	4603      	mov	r3, r0
 8000524:	72fb      	strb	r3, [r7, #11]

    if ((hum_int + hum_dec + temp_int + temp_dec) == checksum)
 8000526:	7bfa      	ldrb	r2, [r7, #15]
 8000528:	7bbb      	ldrb	r3, [r7, #14]
 800052a:	441a      	add	r2, r3
 800052c:	7b7b      	ldrb	r3, [r7, #13]
 800052e:	441a      	add	r2, r3
 8000530:	7b3b      	ldrb	r3, [r7, #12]
 8000532:	441a      	add	r2, r3
 8000534:	7afb      	ldrb	r3, [r7, #11]
 8000536:	429a      	cmp	r2, r3
 8000538:	d107      	bne.n	800054a <DHT11_Read+0x92>
    {
        *temperature = temp_int;
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	7b7a      	ldrb	r2, [r7, #13]
 800053e:	701a      	strb	r2, [r3, #0]
        *humidity = hum_int;
 8000540:	683b      	ldr	r3, [r7, #0]
 8000542:	7bfa      	ldrb	r2, [r7, #15]
 8000544:	701a      	strb	r2, [r3, #0]
        return 1; // success
 8000546:	2301      	movs	r3, #1
 8000548:	e000      	b.n	800054c <DHT11_Read+0x94>
    }

    return 0; // checksum failed
 800054a:	2300      	movs	r3, #0
}
 800054c:	4618      	mov	r0, r3
 800054e:	3710      	adds	r7, #16
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}
 8000554:	40020000 	.word	0x40020000

08000558 <delay_ms>:
void int_to_str(uint8_t num, char *buf);



void delay_ms(volatile uint32_t ms)
{
 8000558:	b480      	push	{r7}
 800055a:	b085      	sub	sp, #20
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
    for (volatile uint32_t i = 0; i < ms * 8000; ++i); // Crude delay at 16 MHz
 8000560:	2300      	movs	r3, #0
 8000562:	60fb      	str	r3, [r7, #12]
 8000564:	e002      	b.n	800056c <delay_ms+0x14>
 8000566:	68fb      	ldr	r3, [r7, #12]
 8000568:	3301      	adds	r3, #1
 800056a:	60fb      	str	r3, [r7, #12]
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8000572:	fb03 f202 	mul.w	r2, r3, r2
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	429a      	cmp	r2, r3
 800057a:	d8f4      	bhi.n	8000566 <delay_ms+0xe>
}
 800057c:	bf00      	nop
 800057e:	bf00      	nop
 8000580:	3714      	adds	r7, #20
 8000582:	46bd      	mov	sp, r7
 8000584:	bc80      	pop	{r7}
 8000586:	4770      	bx	lr

08000588 <main>:

int main(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b094      	sub	sp, #80	@ 0x50
 800058c:	af00      	add	r7, sp, #0

uint8_t temperature = 0, humidity = 0;
 800058e:	2300      	movs	r3, #0
 8000590:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
 8000594:	2300      	movs	r3, #0
 8000596:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
char buffer[70];
adc_init();
 800059a:	f7ff fe69 	bl	8000270 <adc_init>

DHT11_Init();
 800059e:	f7ff ff19 	bl	80003d4 <DHT11_Init>
RainSensor_Init();
 80005a2:	f000 f863 	bl	800066c <RainSensor_Init>
UART2_Init();
 80005a6:	f000 f94f 	bl	8000848 <UART2_Init>
UART2_SendString("DHT11 Test Started...\r\n");
 80005aa:	482a      	ldr	r0, [pc, #168]	@ (8000654 <main+0xcc>)
 80005ac:	f000 f994 	bl	80008d8 <UART2_SendString>


    while (1)
    {
        uint8_t digital = RainSensor_ReadDigital();
 80005b0:	f000 f8ac 	bl	800070c <RainSensor_ReadDigital>
 80005b4:	4603      	mov	r3, r0
 80005b6:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
        uint16_t analog = RainSensor_ReadAnalog();
 80005ba:	f000 f8b9 	bl	8000730 <RainSensor_ReadAnalog>
 80005be:	4603      	mov	r3, r0
 80005c0:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

         UART2_SendString("Rain Detected =");
 80005c4:	4824      	ldr	r0, [pc, #144]	@ (8000658 <main+0xd0>)
 80005c6:	f000 f987 	bl	80008d8 <UART2_SendString>
         UART2_SendNumber(digital);
 80005ca:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80005ce:	4618      	mov	r0, r3
 80005d0:	f000 f998 	bl	8000904 <UART2_SendNumber>
         UART2_SendNumber(analog);
 80005d4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80005d8:	4618      	mov	r0, r3
 80005da:	f000 f993 	bl	8000904 <UART2_SendNumber>
         UART2_SendString("\r\n");
 80005de:	481f      	ldr	r0, [pc, #124]	@ (800065c <main+0xd4>)
 80005e0:	f000 f97a 	bl	80008d8 <UART2_SendString>
         delay_ms(1000);
 80005e4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005e8:	f7ff ffb6 	bl	8000558 <delay_ms>

        uint16_t moisture = read_soil_moisture();
 80005ec:	f000 f8b8 	bl	8000760 <read_soil_moisture>
 80005f0:	4603      	mov	r3, r0
 80005f2:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
        UART2_SendString("soil Mositure = ");
 80005f6:	481a      	ldr	r0, [pc, #104]	@ (8000660 <main+0xd8>)
 80005f8:	f000 f96e 	bl	80008d8 <UART2_SendString>
        UART2_SendNumber(moisture);
 80005fc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8000600:	4618      	mov	r0, r3
 8000602:	f000 f97f 	bl	8000904 <UART2_SendNumber>
        UART2_SendString("\r\n");
 8000606:	4815      	ldr	r0, [pc, #84]	@ (800065c <main+0xd4>)
 8000608:	f000 f966 	bl	80008d8 <UART2_SendString>
        delay_ms(1000);
 800060c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000610:	f7ff ffa2 	bl	8000558 <delay_ms>


        if (DHT11_Read(&temperature, &humidity))
 8000614:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8000618:	f107 0349 	add.w	r3, r7, #73	@ 0x49
 800061c:	4611      	mov	r1, r2
 800061e:	4618      	mov	r0, r3
 8000620:	f7ff ff4a 	bl	80004b8 <DHT11_Read>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d009      	beq.n	800063e <main+0xb6>
                {
                    sprintf(buffer, "Temp: %dÂ°C, Humidity: %d%%\r\n", temperature, humidity);
 800062a:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 800062e:	461a      	mov	r2, r3
 8000630:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8000634:	4638      	mov	r0, r7
 8000636:	490b      	ldr	r1, [pc, #44]	@ (8000664 <main+0xdc>)
 8000638:	f000 f9cc 	bl	80009d4 <siprintf>
 800063c:	e004      	b.n	8000648 <main+0xc0>
                }
                else
                {
                    sprintf(buffer, "DHT11 Read Failed\r\n");
 800063e:	463b      	mov	r3, r7
 8000640:	4909      	ldr	r1, [pc, #36]	@ (8000668 <main+0xe0>)
 8000642:	4618      	mov	r0, r3
 8000644:	f000 f9c6 	bl	80009d4 <siprintf>
                }

                UART2_SendString(buffer);    }
 8000648:	463b      	mov	r3, r7
 800064a:	4618      	mov	r0, r3
 800064c:	f000 f944 	bl	80008d8 <UART2_SendString>
    {
 8000650:	e7ae      	b.n	80005b0 <main+0x28>
 8000652:	bf00      	nop
 8000654:	0800131c 	.word	0x0800131c
 8000658:	08001334 	.word	0x08001334
 800065c:	08001344 	.word	0x08001344
 8000660:	08001348 	.word	0x08001348
 8000664:	0800135c 	.word	0x0800135c
 8000668:	0800137c 	.word	0x0800137c

0800066c <RainSensor_Init>:
// Definitions
#define DIGITAL_SENSOR_PORT GPIOC
#define DIGITAL_SENSOR_PIN  13

void RainSensor_Init(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
    // ----- Digital Input Init (PC13) -----
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 8000670:	4b22      	ldr	r3, [pc, #136]	@ (80006fc <RainSensor_Init+0x90>)
 8000672:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000674:	4a21      	ldr	r2, [pc, #132]	@ (80006fc <RainSensor_Init+0x90>)
 8000676:	f043 0304 	orr.w	r3, r3, #4
 800067a:	6313      	str	r3, [r2, #48]	@ 0x30

    // Set PC13 as input (00)
    DIGITAL_SENSOR_PORT->MODER &= ~(0x3 << (DIGITAL_SENSOR_PIN * 2));
 800067c:	4b20      	ldr	r3, [pc, #128]	@ (8000700 <RainSensor_Init+0x94>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a1f      	ldr	r2, [pc, #124]	@ (8000700 <RainSensor_Init+0x94>)
 8000682:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8000686:	6013      	str	r3, [r2, #0]

    // Optional: Pull-up
    DIGITAL_SENSOR_PORT->PUPDR &= ~(0x3 << (DIGITAL_SENSOR_PIN * 2));
 8000688:	4b1d      	ldr	r3, [pc, #116]	@ (8000700 <RainSensor_Init+0x94>)
 800068a:	68db      	ldr	r3, [r3, #12]
 800068c:	4a1c      	ldr	r2, [pc, #112]	@ (8000700 <RainSensor_Init+0x94>)
 800068e:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8000692:	60d3      	str	r3, [r2, #12]
    DIGITAL_SENSOR_PORT->PUPDR |=  (0x1 << (DIGITAL_SENSOR_PIN * 2)); // Pull-up
 8000694:	4b1a      	ldr	r3, [pc, #104]	@ (8000700 <RainSensor_Init+0x94>)
 8000696:	68db      	ldr	r3, [r3, #12]
 8000698:	4a19      	ldr	r2, [pc, #100]	@ (8000700 <RainSensor_Init+0x94>)
 800069a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800069e:	60d3      	str	r3, [r2, #12]

    // ----- Analog Input Init (PA0 / ADC1_IN0) -----
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80006a0:	4b16      	ldr	r3, [pc, #88]	@ (80006fc <RainSensor_Init+0x90>)
 80006a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a4:	4a15      	ldr	r2, [pc, #84]	@ (80006fc <RainSensor_Init+0x90>)
 80006a6:	f043 0301 	orr.w	r3, r3, #1
 80006aa:	6313      	str	r3, [r2, #48]	@ 0x30
    RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 80006ac:	4b13      	ldr	r3, [pc, #76]	@ (80006fc <RainSensor_Init+0x90>)
 80006ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006b0:	4a12      	ldr	r2, [pc, #72]	@ (80006fc <RainSensor_Init+0x90>)
 80006b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80006b6:	6453      	str	r3, [r2, #68]	@ 0x44

    GPIOA->MODER |= (0x3 << (0 * 2));  // Analog mode for PA0
 80006b8:	4b12      	ldr	r3, [pc, #72]	@ (8000704 <RainSensor_Init+0x98>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a11      	ldr	r2, [pc, #68]	@ (8000704 <RainSensor_Init+0x98>)
 80006be:	f043 0303 	orr.w	r3, r3, #3
 80006c2:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR &= ~(0x3 << (0 * 2)); // No pull-up/down
 80006c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000704 <RainSensor_Init+0x98>)
 80006c6:	68db      	ldr	r3, [r3, #12]
 80006c8:	4a0e      	ldr	r2, [pc, #56]	@ (8000704 <RainSensor_Init+0x98>)
 80006ca:	f023 0303 	bic.w	r3, r3, #3
 80006ce:	60d3      	str	r3, [r2, #12]

    // ADC Configuration
    ADC1->CR2 = 0;
 80006d0:	4b0d      	ldr	r3, [pc, #52]	@ (8000708 <RainSensor_Init+0x9c>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	609a      	str	r2, [r3, #8]
    ADC1->SQR3 = 0; // Channel 0 (PA0)
 80006d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000708 <RainSensor_Init+0x9c>)
 80006d8:	2200      	movs	r2, #0
 80006da:	635a      	str	r2, [r3, #52]	@ 0x34
    ADC1->SMPR2 |= ADC_SMPR2_SMP0_2; // Sample time = 144 cycles
 80006dc:	4b0a      	ldr	r3, [pc, #40]	@ (8000708 <RainSensor_Init+0x9c>)
 80006de:	691b      	ldr	r3, [r3, #16]
 80006e0:	4a09      	ldr	r2, [pc, #36]	@ (8000708 <RainSensor_Init+0x9c>)
 80006e2:	f043 0304 	orr.w	r3, r3, #4
 80006e6:	6113      	str	r3, [r2, #16]
    ADC1->CR2 |= ADC_CR2_ADON; // Enable ADC1
 80006e8:	4b07      	ldr	r3, [pc, #28]	@ (8000708 <RainSensor_Init+0x9c>)
 80006ea:	689b      	ldr	r3, [r3, #8]
 80006ec:	4a06      	ldr	r2, [pc, #24]	@ (8000708 <RainSensor_Init+0x9c>)
 80006ee:	f043 0301 	orr.w	r3, r3, #1
 80006f2:	6093      	str	r3, [r2, #8]
}
 80006f4:	bf00      	nop
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bc80      	pop	{r7}
 80006fa:	4770      	bx	lr
 80006fc:	40023800 	.word	0x40023800
 8000700:	40020800 	.word	0x40020800
 8000704:	40020000 	.word	0x40020000
 8000708:	40012000 	.word	0x40012000

0800070c <RainSensor_ReadDigital>:

uint8_t RainSensor_ReadDigital(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
    return (DIGITAL_SENSOR_PORT->IDR & (1 << DIGITAL_SENSOR_PIN)) ? 1 : 0;
 8000710:	4b06      	ldr	r3, [pc, #24]	@ (800072c <RainSensor_ReadDigital+0x20>)
 8000712:	691b      	ldr	r3, [r3, #16]
 8000714:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000718:	2b00      	cmp	r3, #0
 800071a:	bf14      	ite	ne
 800071c:	2301      	movne	r3, #1
 800071e:	2300      	moveq	r3, #0
 8000720:	b2db      	uxtb	r3, r3
}
 8000722:	4618      	mov	r0, r3
 8000724:	46bd      	mov	sp, r7
 8000726:	bc80      	pop	{r7}
 8000728:	4770      	bx	lr
 800072a:	bf00      	nop
 800072c:	40020800 	.word	0x40020800

08000730 <RainSensor_ReadAnalog>:

uint16_t RainSensor_ReadAnalog(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
    ADC1->CR2 |= ADC_CR2_SWSTART;
 8000734:	4b09      	ldr	r3, [pc, #36]	@ (800075c <RainSensor_ReadAnalog+0x2c>)
 8000736:	689b      	ldr	r3, [r3, #8]
 8000738:	4a08      	ldr	r2, [pc, #32]	@ (800075c <RainSensor_ReadAnalog+0x2c>)
 800073a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800073e:	6093      	str	r3, [r2, #8]
    while (!(ADC1->SR & ADC_SR_EOC));
 8000740:	bf00      	nop
 8000742:	4b06      	ldr	r3, [pc, #24]	@ (800075c <RainSensor_ReadAnalog+0x2c>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	f003 0302 	and.w	r3, r3, #2
 800074a:	2b00      	cmp	r3, #0
 800074c:	d0f9      	beq.n	8000742 <RainSensor_ReadAnalog+0x12>
    return ADC1->DR;
 800074e:	4b03      	ldr	r3, [pc, #12]	@ (800075c <RainSensor_ReadAnalog+0x2c>)
 8000750:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000752:	b29b      	uxth	r3, r3
}
 8000754:	4618      	mov	r0, r3
 8000756:	46bd      	mov	sp, r7
 8000758:	bc80      	pop	{r7}
 800075a:	4770      	bx	lr
 800075c:	40012000 	.word	0x40012000

08000760 <read_soil_moisture>:
#include "adc.h"
#include "soil_sensor.h"

#define SOIL_SENSOR_CHANNEL 4 // PA4 -> ADC1_IN0

uint16_t read_soil_moisture(void) {
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
    return adc_read(SOIL_SENSOR_CHANNEL);
 8000764:	2004      	movs	r0, #4
 8000766:	f7ff fdc7 	bl	80002f8 <adc_read>
 800076a:	4603      	mov	r3, r0
}
 800076c:	4618      	mov	r0, r3
 800076e:	bd80      	pop	{r7, pc}

08000770 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b086      	sub	sp, #24
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000778:	4a14      	ldr	r2, [pc, #80]	@ (80007cc <_sbrk+0x5c>)
 800077a:	4b15      	ldr	r3, [pc, #84]	@ (80007d0 <_sbrk+0x60>)
 800077c:	1ad3      	subs	r3, r2, r3
 800077e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000780:	697b      	ldr	r3, [r7, #20]
 8000782:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000784:	4b13      	ldr	r3, [pc, #76]	@ (80007d4 <_sbrk+0x64>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d102      	bne.n	8000792 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800078c:	4b11      	ldr	r3, [pc, #68]	@ (80007d4 <_sbrk+0x64>)
 800078e:	4a12      	ldr	r2, [pc, #72]	@ (80007d8 <_sbrk+0x68>)
 8000790:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000792:	4b10      	ldr	r3, [pc, #64]	@ (80007d4 <_sbrk+0x64>)
 8000794:	681a      	ldr	r2, [r3, #0]
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	4413      	add	r3, r2
 800079a:	693a      	ldr	r2, [r7, #16]
 800079c:	429a      	cmp	r2, r3
 800079e:	d207      	bcs.n	80007b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007a0:	f000 f93a 	bl	8000a18 <__errno>
 80007a4:	4603      	mov	r3, r0
 80007a6:	220c      	movs	r2, #12
 80007a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80007ae:	e009      	b.n	80007c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007b0:	4b08      	ldr	r3, [pc, #32]	@ (80007d4 <_sbrk+0x64>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007b6:	4b07      	ldr	r3, [pc, #28]	@ (80007d4 <_sbrk+0x64>)
 80007b8:	681a      	ldr	r2, [r3, #0]
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	4413      	add	r3, r2
 80007be:	4a05      	ldr	r2, [pc, #20]	@ (80007d4 <_sbrk+0x64>)
 80007c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007c2:	68fb      	ldr	r3, [r7, #12]
}
 80007c4:	4618      	mov	r0, r3
 80007c6:	3718      	adds	r7, #24
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	20020000 	.word	0x20020000
 80007d0:	00000400 	.word	0x00000400
 80007d4:	20000070 	.word	0x20000070
 80007d8:	200001c0 	.word	0x200001c0

080007dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */

  DWT_Init();
 80007e0:	f000 f802 	bl	80007e8 <DWT_Init>
}
 80007e4:	bf00      	nop
 80007e6:	bd80      	pop	{r7, pc}

080007e8 <DWT_Init>:
}
#pragma GCC pop_options


uint32_t DWT_Init(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 80007ec:	4b14      	ldr	r3, [pc, #80]	@ (8000840 <DWT_Init+0x58>)
 80007ee:	68db      	ldr	r3, [r3, #12]
 80007f0:	4a13      	ldr	r2, [pc, #76]	@ (8000840 <DWT_Init+0x58>)
 80007f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80007f6:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80007f8:	4b11      	ldr	r3, [pc, #68]	@ (8000840 <DWT_Init+0x58>)
 80007fa:	68db      	ldr	r3, [r3, #12]
 80007fc:	4a10      	ldr	r2, [pc, #64]	@ (8000840 <DWT_Init+0x58>)
 80007fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000802:	60d3      	str	r3, [r2, #12]
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000804:	4b0f      	ldr	r3, [pc, #60]	@ (8000844 <DWT_Init+0x5c>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4a0e      	ldr	r2, [pc, #56]	@ (8000844 <DWT_Init+0x5c>)
 800080a:	f023 0301 	bic.w	r3, r3, #1
 800080e:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000810:	4b0c      	ldr	r3, [pc, #48]	@ (8000844 <DWT_Init+0x5c>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4a0b      	ldr	r2, [pc, #44]	@ (8000844 <DWT_Init+0x5c>)
 8000816:	f043 0301 	orr.w	r3, r3, #1
 800081a:	6013      	str	r3, [r2, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 800081c:	4b09      	ldr	r3, [pc, #36]	@ (8000844 <DWT_Init+0x5c>)
 800081e:	2200      	movs	r2, #0
 8000820:	605a      	str	r2, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 8000822:	bf00      	nop
    __ASM volatile ("NOP");
 8000824:	bf00      	nop
    __ASM volatile ("NOP");
 8000826:	bf00      	nop
    /* Check if clock cycle counter has started: 0 on success */
    return !(DWT->CYCCNT);
 8000828:	4b06      	ldr	r3, [pc, #24]	@ (8000844 <DWT_Init+0x5c>)
 800082a:	685b      	ldr	r3, [r3, #4]
 800082c:	2b00      	cmp	r3, #0
 800082e:	bf0c      	ite	eq
 8000830:	2301      	moveq	r3, #1
 8000832:	2300      	movne	r3, #0
 8000834:	b2db      	uxtb	r3, r3
}
 8000836:	4618      	mov	r0, r3
 8000838:	46bd      	mov	sp, r7
 800083a:	bc80      	pop	{r7}
 800083c:	4770      	bx	lr
 800083e:	bf00      	nop
 8000840:	e000edf0 	.word	0xe000edf0
 8000844:	e0001000 	.word	0xe0001000

08000848 <UART2_Init>:

#include "uart.h"
#include "stm32f4xx.h"

void UART2_Init(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
    // Enable GPIOA and USART2 clock
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 800084c:	4b14      	ldr	r3, [pc, #80]	@ (80008a0 <UART2_Init+0x58>)
 800084e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000850:	4a13      	ldr	r2, [pc, #76]	@ (80008a0 <UART2_Init+0x58>)
 8000852:	f043 0301 	orr.w	r3, r3, #1
 8000856:	6313      	str	r3, [r2, #48]	@ 0x30
    RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8000858:	4b11      	ldr	r3, [pc, #68]	@ (80008a0 <UART2_Init+0x58>)
 800085a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800085c:	4a10      	ldr	r2, [pc, #64]	@ (80008a0 <UART2_Init+0x58>)
 800085e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000862:	6413      	str	r3, [r2, #64]	@ 0x40

    // Set PA2 (TX) to alternate function (AF7 for USART2)
    GPIOA->MODER &= ~(0x3 << (2 * 2));
 8000864:	4b0f      	ldr	r3, [pc, #60]	@ (80008a4 <UART2_Init+0x5c>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a0e      	ldr	r2, [pc, #56]	@ (80008a4 <UART2_Init+0x5c>)
 800086a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800086e:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=  (0x2 << (2 * 2));    // Alternate function
 8000870:	4b0c      	ldr	r3, [pc, #48]	@ (80008a4 <UART2_Init+0x5c>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a0b      	ldr	r2, [pc, #44]	@ (80008a4 <UART2_Init+0x5c>)
 8000876:	f043 0320 	orr.w	r3, r3, #32
 800087a:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[0] |= (0x7 << (2 * 4));    // AF7 = USART2
 800087c:	4b09      	ldr	r3, [pc, #36]	@ (80008a4 <UART2_Init+0x5c>)
 800087e:	6a1b      	ldr	r3, [r3, #32]
 8000880:	4a08      	ldr	r2, [pc, #32]	@ (80008a4 <UART2_Init+0x5c>)
 8000882:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8000886:	6213      	str	r3, [r2, #32]

    // Configure USART2
    USART2->BRR = (16000000 / 9600);      // Assuming 16MHz clock, 9600 baud
 8000888:	4b07      	ldr	r3, [pc, #28]	@ (80008a8 <UART2_Init+0x60>)
 800088a:	f240 6282 	movw	r2, #1666	@ 0x682
 800088e:	609a      	str	r2, [r3, #8]
    USART2->CR1 = USART_CR1_TE | USART_CR1_UE; // Enable TX and USART
 8000890:	4b05      	ldr	r3, [pc, #20]	@ (80008a8 <UART2_Init+0x60>)
 8000892:	f242 0208 	movw	r2, #8200	@ 0x2008
 8000896:	60da      	str	r2, [r3, #12]
}
 8000898:	bf00      	nop
 800089a:	46bd      	mov	sp, r7
 800089c:	bc80      	pop	{r7}
 800089e:	4770      	bx	lr
 80008a0:	40023800 	.word	0x40023800
 80008a4:	40020000 	.word	0x40020000
 80008a8:	40004400 	.word	0x40004400

080008ac <UART2_SendChar>:

void UART2_SendChar(char c)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b083      	sub	sp, #12
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	4603      	mov	r3, r0
 80008b4:	71fb      	strb	r3, [r7, #7]
    while (!(USART2->SR & USART_SR_TXE)); // Wait for TX buffer empty
 80008b6:	bf00      	nop
 80008b8:	4b06      	ldr	r3, [pc, #24]	@ (80008d4 <UART2_SendChar+0x28>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d0f9      	beq.n	80008b8 <UART2_SendChar+0xc>
    USART2->DR = c;
 80008c4:	4a03      	ldr	r2, [pc, #12]	@ (80008d4 <UART2_SendChar+0x28>)
 80008c6:	79fb      	ldrb	r3, [r7, #7]
 80008c8:	6053      	str	r3, [r2, #4]
}
 80008ca:	bf00      	nop
 80008cc:	370c      	adds	r7, #12
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bc80      	pop	{r7}
 80008d2:	4770      	bx	lr
 80008d4:	40004400 	.word	0x40004400

080008d8 <UART2_SendString>:

void UART2_SendString(const char *str)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
    while (*str)
 80008e0:	e006      	b.n	80008f0 <UART2_SendString+0x18>
    {
        UART2_SendChar(*str++);
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	1c5a      	adds	r2, r3, #1
 80008e6:	607a      	str	r2, [r7, #4]
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	4618      	mov	r0, r3
 80008ec:	f7ff ffde 	bl	80008ac <UART2_SendChar>
    while (*str)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d1f4      	bne.n	80008e2 <UART2_SendString+0xa>
    }
}
 80008f8:	bf00      	nop
 80008fa:	bf00      	nop
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
	...

08000904 <UART2_SendNumber>:

void UART2_SendNumber(uint32_t num)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b086      	sub	sp, #24
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
    char buffer[12];
    int i = 0;
 800090c:	2300      	movs	r3, #0
 800090e:	617b      	str	r3, [r7, #20]

    if (num == 0)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	2b00      	cmp	r3, #0
 8000914:	d11d      	bne.n	8000952 <UART2_SendNumber+0x4e>
    {
        UART2_SendChar('0');
 8000916:	2030      	movs	r0, #48	@ 0x30
 8000918:	f7ff ffc8 	bl	80008ac <UART2_SendChar>
 800091c:	e02a      	b.n	8000974 <UART2_SendNumber+0x70>
        return;
    }

    while (num > 0)
    {
        buffer[i++] = (num % 10) + '0';
 800091e:	6879      	ldr	r1, [r7, #4]
 8000920:	4b16      	ldr	r3, [pc, #88]	@ (800097c <UART2_SendNumber+0x78>)
 8000922:	fba3 2301 	umull	r2, r3, r3, r1
 8000926:	08da      	lsrs	r2, r3, #3
 8000928:	4613      	mov	r3, r2
 800092a:	009b      	lsls	r3, r3, #2
 800092c:	4413      	add	r3, r2
 800092e:	005b      	lsls	r3, r3, #1
 8000930:	1aca      	subs	r2, r1, r3
 8000932:	b2d2      	uxtb	r2, r2
 8000934:	697b      	ldr	r3, [r7, #20]
 8000936:	1c59      	adds	r1, r3, #1
 8000938:	6179      	str	r1, [r7, #20]
 800093a:	3230      	adds	r2, #48	@ 0x30
 800093c:	b2d2      	uxtb	r2, r2
 800093e:	3318      	adds	r3, #24
 8000940:	443b      	add	r3, r7
 8000942:	f803 2c10 	strb.w	r2, [r3, #-16]
        num /= 10;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	4a0c      	ldr	r2, [pc, #48]	@ (800097c <UART2_SendNumber+0x78>)
 800094a:	fba2 2303 	umull	r2, r3, r2, r3
 800094e:	08db      	lsrs	r3, r3, #3
 8000950:	607b      	str	r3, [r7, #4]
    while (num > 0)
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d1e2      	bne.n	800091e <UART2_SendNumber+0x1a>
    }

    while (i--)
 8000958:	e007      	b.n	800096a <UART2_SendNumber+0x66>
    {
        UART2_SendChar(buffer[i]);
 800095a:	f107 0208 	add.w	r2, r7, #8
 800095e:	697b      	ldr	r3, [r7, #20]
 8000960:	4413      	add	r3, r2
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	4618      	mov	r0, r3
 8000966:	f7ff ffa1 	bl	80008ac <UART2_SendChar>
    while (i--)
 800096a:	697b      	ldr	r3, [r7, #20]
 800096c:	1e5a      	subs	r2, r3, #1
 800096e:	617a      	str	r2, [r7, #20]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d1f2      	bne.n	800095a <UART2_SendNumber+0x56>
    }
}
 8000974:	3718      	adds	r7, #24
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	cccccccd 	.word	0xcccccccd

08000980 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000980:	480d      	ldr	r0, [pc, #52]	@ (80009b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000982:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000984:	f7ff ff2a 	bl	80007dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000988:	480c      	ldr	r0, [pc, #48]	@ (80009bc <LoopForever+0x6>)
  ldr r1, =_edata
 800098a:	490d      	ldr	r1, [pc, #52]	@ (80009c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800098c:	4a0d      	ldr	r2, [pc, #52]	@ (80009c4 <LoopForever+0xe>)
  movs r3, #0
 800098e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000990:	e002      	b.n	8000998 <LoopCopyDataInit>

08000992 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000992:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000994:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000996:	3304      	adds	r3, #4

08000998 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000998:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800099a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800099c:	d3f9      	bcc.n	8000992 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800099e:	4a0a      	ldr	r2, [pc, #40]	@ (80009c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009a0:	4c0a      	ldr	r4, [pc, #40]	@ (80009cc <LoopForever+0x16>)
  movs r3, #0
 80009a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009a4:	e001      	b.n	80009aa <LoopFillZerobss>

080009a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009a8:	3204      	adds	r2, #4

080009aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009ac:	d3fb      	bcc.n	80009a6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80009ae:	f000 f839 	bl	8000a24 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009b2:	f7ff fde9 	bl	8000588 <main>

080009b6 <LoopForever>:

LoopForever:
  b LoopForever
 80009b6:	e7fe      	b.n	80009b6 <LoopForever>
  ldr   r0, =_estack
 80009b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009c0:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 80009c4:	080013d4 	.word	0x080013d4
  ldr r2, =_sbss
 80009c8:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 80009cc:	200001bc 	.word	0x200001bc

080009d0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009d0:	e7fe      	b.n	80009d0 <ADC_IRQHandler>
	...

080009d4 <siprintf>:
 80009d4:	b40e      	push	{r1, r2, r3}
 80009d6:	b510      	push	{r4, lr}
 80009d8:	b09d      	sub	sp, #116	@ 0x74
 80009da:	ab1f      	add	r3, sp, #124	@ 0x7c
 80009dc:	9002      	str	r0, [sp, #8]
 80009de:	9006      	str	r0, [sp, #24]
 80009e0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80009e4:	480a      	ldr	r0, [pc, #40]	@ (8000a10 <siprintf+0x3c>)
 80009e6:	9107      	str	r1, [sp, #28]
 80009e8:	9104      	str	r1, [sp, #16]
 80009ea:	490a      	ldr	r1, [pc, #40]	@ (8000a14 <siprintf+0x40>)
 80009ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80009f0:	9105      	str	r1, [sp, #20]
 80009f2:	2400      	movs	r4, #0
 80009f4:	a902      	add	r1, sp, #8
 80009f6:	6800      	ldr	r0, [r0, #0]
 80009f8:	9301      	str	r3, [sp, #4]
 80009fa:	941b      	str	r4, [sp, #108]	@ 0x6c
 80009fc:	f000 f98c 	bl	8000d18 <_svfiprintf_r>
 8000a00:	9b02      	ldr	r3, [sp, #8]
 8000a02:	701c      	strb	r4, [r3, #0]
 8000a04:	b01d      	add	sp, #116	@ 0x74
 8000a06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000a0a:	b003      	add	sp, #12
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	20000004 	.word	0x20000004
 8000a14:	ffff0208 	.word	0xffff0208

08000a18 <__errno>:
 8000a18:	4b01      	ldr	r3, [pc, #4]	@ (8000a20 <__errno+0x8>)
 8000a1a:	6818      	ldr	r0, [r3, #0]
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	20000004 	.word	0x20000004

08000a24 <__libc_init_array>:
 8000a24:	b570      	push	{r4, r5, r6, lr}
 8000a26:	4d0d      	ldr	r5, [pc, #52]	@ (8000a5c <__libc_init_array+0x38>)
 8000a28:	4c0d      	ldr	r4, [pc, #52]	@ (8000a60 <__libc_init_array+0x3c>)
 8000a2a:	1b64      	subs	r4, r4, r5
 8000a2c:	10a4      	asrs	r4, r4, #2
 8000a2e:	2600      	movs	r6, #0
 8000a30:	42a6      	cmp	r6, r4
 8000a32:	d109      	bne.n	8000a48 <__libc_init_array+0x24>
 8000a34:	4d0b      	ldr	r5, [pc, #44]	@ (8000a64 <__libc_init_array+0x40>)
 8000a36:	4c0c      	ldr	r4, [pc, #48]	@ (8000a68 <__libc_init_array+0x44>)
 8000a38:	f000 fc64 	bl	8001304 <_init>
 8000a3c:	1b64      	subs	r4, r4, r5
 8000a3e:	10a4      	asrs	r4, r4, #2
 8000a40:	2600      	movs	r6, #0
 8000a42:	42a6      	cmp	r6, r4
 8000a44:	d105      	bne.n	8000a52 <__libc_init_array+0x2e>
 8000a46:	bd70      	pop	{r4, r5, r6, pc}
 8000a48:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a4c:	4798      	blx	r3
 8000a4e:	3601      	adds	r6, #1
 8000a50:	e7ee      	b.n	8000a30 <__libc_init_array+0xc>
 8000a52:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a56:	4798      	blx	r3
 8000a58:	3601      	adds	r6, #1
 8000a5a:	e7f2      	b.n	8000a42 <__libc_init_array+0x1e>
 8000a5c:	080013cc 	.word	0x080013cc
 8000a60:	080013cc 	.word	0x080013cc
 8000a64:	080013cc 	.word	0x080013cc
 8000a68:	080013d0 	.word	0x080013d0

08000a6c <__retarget_lock_acquire_recursive>:
 8000a6c:	4770      	bx	lr

08000a6e <__retarget_lock_release_recursive>:
 8000a6e:	4770      	bx	lr

08000a70 <_free_r>:
 8000a70:	b538      	push	{r3, r4, r5, lr}
 8000a72:	4605      	mov	r5, r0
 8000a74:	2900      	cmp	r1, #0
 8000a76:	d041      	beq.n	8000afc <_free_r+0x8c>
 8000a78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000a7c:	1f0c      	subs	r4, r1, #4
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	bfb8      	it	lt
 8000a82:	18e4      	addlt	r4, r4, r3
 8000a84:	f000 f8e0 	bl	8000c48 <__malloc_lock>
 8000a88:	4a1d      	ldr	r2, [pc, #116]	@ (8000b00 <_free_r+0x90>)
 8000a8a:	6813      	ldr	r3, [r2, #0]
 8000a8c:	b933      	cbnz	r3, 8000a9c <_free_r+0x2c>
 8000a8e:	6063      	str	r3, [r4, #4]
 8000a90:	6014      	str	r4, [r2, #0]
 8000a92:	4628      	mov	r0, r5
 8000a94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000a98:	f000 b8dc 	b.w	8000c54 <__malloc_unlock>
 8000a9c:	42a3      	cmp	r3, r4
 8000a9e:	d908      	bls.n	8000ab2 <_free_r+0x42>
 8000aa0:	6820      	ldr	r0, [r4, #0]
 8000aa2:	1821      	adds	r1, r4, r0
 8000aa4:	428b      	cmp	r3, r1
 8000aa6:	bf01      	itttt	eq
 8000aa8:	6819      	ldreq	r1, [r3, #0]
 8000aaa:	685b      	ldreq	r3, [r3, #4]
 8000aac:	1809      	addeq	r1, r1, r0
 8000aae:	6021      	streq	r1, [r4, #0]
 8000ab0:	e7ed      	b.n	8000a8e <_free_r+0x1e>
 8000ab2:	461a      	mov	r2, r3
 8000ab4:	685b      	ldr	r3, [r3, #4]
 8000ab6:	b10b      	cbz	r3, 8000abc <_free_r+0x4c>
 8000ab8:	42a3      	cmp	r3, r4
 8000aba:	d9fa      	bls.n	8000ab2 <_free_r+0x42>
 8000abc:	6811      	ldr	r1, [r2, #0]
 8000abe:	1850      	adds	r0, r2, r1
 8000ac0:	42a0      	cmp	r0, r4
 8000ac2:	d10b      	bne.n	8000adc <_free_r+0x6c>
 8000ac4:	6820      	ldr	r0, [r4, #0]
 8000ac6:	4401      	add	r1, r0
 8000ac8:	1850      	adds	r0, r2, r1
 8000aca:	4283      	cmp	r3, r0
 8000acc:	6011      	str	r1, [r2, #0]
 8000ace:	d1e0      	bne.n	8000a92 <_free_r+0x22>
 8000ad0:	6818      	ldr	r0, [r3, #0]
 8000ad2:	685b      	ldr	r3, [r3, #4]
 8000ad4:	6053      	str	r3, [r2, #4]
 8000ad6:	4408      	add	r0, r1
 8000ad8:	6010      	str	r0, [r2, #0]
 8000ada:	e7da      	b.n	8000a92 <_free_r+0x22>
 8000adc:	d902      	bls.n	8000ae4 <_free_r+0x74>
 8000ade:	230c      	movs	r3, #12
 8000ae0:	602b      	str	r3, [r5, #0]
 8000ae2:	e7d6      	b.n	8000a92 <_free_r+0x22>
 8000ae4:	6820      	ldr	r0, [r4, #0]
 8000ae6:	1821      	adds	r1, r4, r0
 8000ae8:	428b      	cmp	r3, r1
 8000aea:	bf04      	itt	eq
 8000aec:	6819      	ldreq	r1, [r3, #0]
 8000aee:	685b      	ldreq	r3, [r3, #4]
 8000af0:	6063      	str	r3, [r4, #4]
 8000af2:	bf04      	itt	eq
 8000af4:	1809      	addeq	r1, r1, r0
 8000af6:	6021      	streq	r1, [r4, #0]
 8000af8:	6054      	str	r4, [r2, #4]
 8000afa:	e7ca      	b.n	8000a92 <_free_r+0x22>
 8000afc:	bd38      	pop	{r3, r4, r5, pc}
 8000afe:	bf00      	nop
 8000b00:	200001b8 	.word	0x200001b8

08000b04 <sbrk_aligned>:
 8000b04:	b570      	push	{r4, r5, r6, lr}
 8000b06:	4e0f      	ldr	r6, [pc, #60]	@ (8000b44 <sbrk_aligned+0x40>)
 8000b08:	460c      	mov	r4, r1
 8000b0a:	6831      	ldr	r1, [r6, #0]
 8000b0c:	4605      	mov	r5, r0
 8000b0e:	b911      	cbnz	r1, 8000b16 <sbrk_aligned+0x12>
 8000b10:	f000 fba4 	bl	800125c <_sbrk_r>
 8000b14:	6030      	str	r0, [r6, #0]
 8000b16:	4621      	mov	r1, r4
 8000b18:	4628      	mov	r0, r5
 8000b1a:	f000 fb9f 	bl	800125c <_sbrk_r>
 8000b1e:	1c43      	adds	r3, r0, #1
 8000b20:	d103      	bne.n	8000b2a <sbrk_aligned+0x26>
 8000b22:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8000b26:	4620      	mov	r0, r4
 8000b28:	bd70      	pop	{r4, r5, r6, pc}
 8000b2a:	1cc4      	adds	r4, r0, #3
 8000b2c:	f024 0403 	bic.w	r4, r4, #3
 8000b30:	42a0      	cmp	r0, r4
 8000b32:	d0f8      	beq.n	8000b26 <sbrk_aligned+0x22>
 8000b34:	1a21      	subs	r1, r4, r0
 8000b36:	4628      	mov	r0, r5
 8000b38:	f000 fb90 	bl	800125c <_sbrk_r>
 8000b3c:	3001      	adds	r0, #1
 8000b3e:	d1f2      	bne.n	8000b26 <sbrk_aligned+0x22>
 8000b40:	e7ef      	b.n	8000b22 <sbrk_aligned+0x1e>
 8000b42:	bf00      	nop
 8000b44:	200001b4 	.word	0x200001b4

08000b48 <_malloc_r>:
 8000b48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000b4c:	1ccd      	adds	r5, r1, #3
 8000b4e:	f025 0503 	bic.w	r5, r5, #3
 8000b52:	3508      	adds	r5, #8
 8000b54:	2d0c      	cmp	r5, #12
 8000b56:	bf38      	it	cc
 8000b58:	250c      	movcc	r5, #12
 8000b5a:	2d00      	cmp	r5, #0
 8000b5c:	4606      	mov	r6, r0
 8000b5e:	db01      	blt.n	8000b64 <_malloc_r+0x1c>
 8000b60:	42a9      	cmp	r1, r5
 8000b62:	d904      	bls.n	8000b6e <_malloc_r+0x26>
 8000b64:	230c      	movs	r3, #12
 8000b66:	6033      	str	r3, [r6, #0]
 8000b68:	2000      	movs	r0, #0
 8000b6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000b6e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000c44 <_malloc_r+0xfc>
 8000b72:	f000 f869 	bl	8000c48 <__malloc_lock>
 8000b76:	f8d8 3000 	ldr.w	r3, [r8]
 8000b7a:	461c      	mov	r4, r3
 8000b7c:	bb44      	cbnz	r4, 8000bd0 <_malloc_r+0x88>
 8000b7e:	4629      	mov	r1, r5
 8000b80:	4630      	mov	r0, r6
 8000b82:	f7ff ffbf 	bl	8000b04 <sbrk_aligned>
 8000b86:	1c43      	adds	r3, r0, #1
 8000b88:	4604      	mov	r4, r0
 8000b8a:	d158      	bne.n	8000c3e <_malloc_r+0xf6>
 8000b8c:	f8d8 4000 	ldr.w	r4, [r8]
 8000b90:	4627      	mov	r7, r4
 8000b92:	2f00      	cmp	r7, #0
 8000b94:	d143      	bne.n	8000c1e <_malloc_r+0xd6>
 8000b96:	2c00      	cmp	r4, #0
 8000b98:	d04b      	beq.n	8000c32 <_malloc_r+0xea>
 8000b9a:	6823      	ldr	r3, [r4, #0]
 8000b9c:	4639      	mov	r1, r7
 8000b9e:	4630      	mov	r0, r6
 8000ba0:	eb04 0903 	add.w	r9, r4, r3
 8000ba4:	f000 fb5a 	bl	800125c <_sbrk_r>
 8000ba8:	4581      	cmp	r9, r0
 8000baa:	d142      	bne.n	8000c32 <_malloc_r+0xea>
 8000bac:	6821      	ldr	r1, [r4, #0]
 8000bae:	1a6d      	subs	r5, r5, r1
 8000bb0:	4629      	mov	r1, r5
 8000bb2:	4630      	mov	r0, r6
 8000bb4:	f7ff ffa6 	bl	8000b04 <sbrk_aligned>
 8000bb8:	3001      	adds	r0, #1
 8000bba:	d03a      	beq.n	8000c32 <_malloc_r+0xea>
 8000bbc:	6823      	ldr	r3, [r4, #0]
 8000bbe:	442b      	add	r3, r5
 8000bc0:	6023      	str	r3, [r4, #0]
 8000bc2:	f8d8 3000 	ldr.w	r3, [r8]
 8000bc6:	685a      	ldr	r2, [r3, #4]
 8000bc8:	bb62      	cbnz	r2, 8000c24 <_malloc_r+0xdc>
 8000bca:	f8c8 7000 	str.w	r7, [r8]
 8000bce:	e00f      	b.n	8000bf0 <_malloc_r+0xa8>
 8000bd0:	6822      	ldr	r2, [r4, #0]
 8000bd2:	1b52      	subs	r2, r2, r5
 8000bd4:	d420      	bmi.n	8000c18 <_malloc_r+0xd0>
 8000bd6:	2a0b      	cmp	r2, #11
 8000bd8:	d917      	bls.n	8000c0a <_malloc_r+0xc2>
 8000bda:	1961      	adds	r1, r4, r5
 8000bdc:	42a3      	cmp	r3, r4
 8000bde:	6025      	str	r5, [r4, #0]
 8000be0:	bf18      	it	ne
 8000be2:	6059      	strne	r1, [r3, #4]
 8000be4:	6863      	ldr	r3, [r4, #4]
 8000be6:	bf08      	it	eq
 8000be8:	f8c8 1000 	streq.w	r1, [r8]
 8000bec:	5162      	str	r2, [r4, r5]
 8000bee:	604b      	str	r3, [r1, #4]
 8000bf0:	4630      	mov	r0, r6
 8000bf2:	f000 f82f 	bl	8000c54 <__malloc_unlock>
 8000bf6:	f104 000b 	add.w	r0, r4, #11
 8000bfa:	1d23      	adds	r3, r4, #4
 8000bfc:	f020 0007 	bic.w	r0, r0, #7
 8000c00:	1ac2      	subs	r2, r0, r3
 8000c02:	bf1c      	itt	ne
 8000c04:	1a1b      	subne	r3, r3, r0
 8000c06:	50a3      	strne	r3, [r4, r2]
 8000c08:	e7af      	b.n	8000b6a <_malloc_r+0x22>
 8000c0a:	6862      	ldr	r2, [r4, #4]
 8000c0c:	42a3      	cmp	r3, r4
 8000c0e:	bf0c      	ite	eq
 8000c10:	f8c8 2000 	streq.w	r2, [r8]
 8000c14:	605a      	strne	r2, [r3, #4]
 8000c16:	e7eb      	b.n	8000bf0 <_malloc_r+0xa8>
 8000c18:	4623      	mov	r3, r4
 8000c1a:	6864      	ldr	r4, [r4, #4]
 8000c1c:	e7ae      	b.n	8000b7c <_malloc_r+0x34>
 8000c1e:	463c      	mov	r4, r7
 8000c20:	687f      	ldr	r7, [r7, #4]
 8000c22:	e7b6      	b.n	8000b92 <_malloc_r+0x4a>
 8000c24:	461a      	mov	r2, r3
 8000c26:	685b      	ldr	r3, [r3, #4]
 8000c28:	42a3      	cmp	r3, r4
 8000c2a:	d1fb      	bne.n	8000c24 <_malloc_r+0xdc>
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	6053      	str	r3, [r2, #4]
 8000c30:	e7de      	b.n	8000bf0 <_malloc_r+0xa8>
 8000c32:	230c      	movs	r3, #12
 8000c34:	6033      	str	r3, [r6, #0]
 8000c36:	4630      	mov	r0, r6
 8000c38:	f000 f80c 	bl	8000c54 <__malloc_unlock>
 8000c3c:	e794      	b.n	8000b68 <_malloc_r+0x20>
 8000c3e:	6005      	str	r5, [r0, #0]
 8000c40:	e7d6      	b.n	8000bf0 <_malloc_r+0xa8>
 8000c42:	bf00      	nop
 8000c44:	200001b8 	.word	0x200001b8

08000c48 <__malloc_lock>:
 8000c48:	4801      	ldr	r0, [pc, #4]	@ (8000c50 <__malloc_lock+0x8>)
 8000c4a:	f7ff bf0f 	b.w	8000a6c <__retarget_lock_acquire_recursive>
 8000c4e:	bf00      	nop
 8000c50:	200001b0 	.word	0x200001b0

08000c54 <__malloc_unlock>:
 8000c54:	4801      	ldr	r0, [pc, #4]	@ (8000c5c <__malloc_unlock+0x8>)
 8000c56:	f7ff bf0a 	b.w	8000a6e <__retarget_lock_release_recursive>
 8000c5a:	bf00      	nop
 8000c5c:	200001b0 	.word	0x200001b0

08000c60 <__ssputs_r>:
 8000c60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c64:	688e      	ldr	r6, [r1, #8]
 8000c66:	461f      	mov	r7, r3
 8000c68:	42be      	cmp	r6, r7
 8000c6a:	680b      	ldr	r3, [r1, #0]
 8000c6c:	4682      	mov	sl, r0
 8000c6e:	460c      	mov	r4, r1
 8000c70:	4690      	mov	r8, r2
 8000c72:	d82d      	bhi.n	8000cd0 <__ssputs_r+0x70>
 8000c74:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000c78:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8000c7c:	d026      	beq.n	8000ccc <__ssputs_r+0x6c>
 8000c7e:	6965      	ldr	r5, [r4, #20]
 8000c80:	6909      	ldr	r1, [r1, #16]
 8000c82:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000c86:	eba3 0901 	sub.w	r9, r3, r1
 8000c8a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8000c8e:	1c7b      	adds	r3, r7, #1
 8000c90:	444b      	add	r3, r9
 8000c92:	106d      	asrs	r5, r5, #1
 8000c94:	429d      	cmp	r5, r3
 8000c96:	bf38      	it	cc
 8000c98:	461d      	movcc	r5, r3
 8000c9a:	0553      	lsls	r3, r2, #21
 8000c9c:	d527      	bpl.n	8000cee <__ssputs_r+0x8e>
 8000c9e:	4629      	mov	r1, r5
 8000ca0:	f7ff ff52 	bl	8000b48 <_malloc_r>
 8000ca4:	4606      	mov	r6, r0
 8000ca6:	b360      	cbz	r0, 8000d02 <__ssputs_r+0xa2>
 8000ca8:	6921      	ldr	r1, [r4, #16]
 8000caa:	464a      	mov	r2, r9
 8000cac:	f000 fae6 	bl	800127c <memcpy>
 8000cb0:	89a3      	ldrh	r3, [r4, #12]
 8000cb2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8000cb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000cba:	81a3      	strh	r3, [r4, #12]
 8000cbc:	6126      	str	r6, [r4, #16]
 8000cbe:	6165      	str	r5, [r4, #20]
 8000cc0:	444e      	add	r6, r9
 8000cc2:	eba5 0509 	sub.w	r5, r5, r9
 8000cc6:	6026      	str	r6, [r4, #0]
 8000cc8:	60a5      	str	r5, [r4, #8]
 8000cca:	463e      	mov	r6, r7
 8000ccc:	42be      	cmp	r6, r7
 8000cce:	d900      	bls.n	8000cd2 <__ssputs_r+0x72>
 8000cd0:	463e      	mov	r6, r7
 8000cd2:	6820      	ldr	r0, [r4, #0]
 8000cd4:	4632      	mov	r2, r6
 8000cd6:	4641      	mov	r1, r8
 8000cd8:	f000 faa6 	bl	8001228 <memmove>
 8000cdc:	68a3      	ldr	r3, [r4, #8]
 8000cde:	1b9b      	subs	r3, r3, r6
 8000ce0:	60a3      	str	r3, [r4, #8]
 8000ce2:	6823      	ldr	r3, [r4, #0]
 8000ce4:	4433      	add	r3, r6
 8000ce6:	6023      	str	r3, [r4, #0]
 8000ce8:	2000      	movs	r0, #0
 8000cea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cee:	462a      	mov	r2, r5
 8000cf0:	f000 fad2 	bl	8001298 <_realloc_r>
 8000cf4:	4606      	mov	r6, r0
 8000cf6:	2800      	cmp	r0, #0
 8000cf8:	d1e0      	bne.n	8000cbc <__ssputs_r+0x5c>
 8000cfa:	6921      	ldr	r1, [r4, #16]
 8000cfc:	4650      	mov	r0, sl
 8000cfe:	f7ff feb7 	bl	8000a70 <_free_r>
 8000d02:	230c      	movs	r3, #12
 8000d04:	f8ca 3000 	str.w	r3, [sl]
 8000d08:	89a3      	ldrh	r3, [r4, #12]
 8000d0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d0e:	81a3      	strh	r3, [r4, #12]
 8000d10:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000d14:	e7e9      	b.n	8000cea <__ssputs_r+0x8a>
	...

08000d18 <_svfiprintf_r>:
 8000d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d1c:	4698      	mov	r8, r3
 8000d1e:	898b      	ldrh	r3, [r1, #12]
 8000d20:	061b      	lsls	r3, r3, #24
 8000d22:	b09d      	sub	sp, #116	@ 0x74
 8000d24:	4607      	mov	r7, r0
 8000d26:	460d      	mov	r5, r1
 8000d28:	4614      	mov	r4, r2
 8000d2a:	d510      	bpl.n	8000d4e <_svfiprintf_r+0x36>
 8000d2c:	690b      	ldr	r3, [r1, #16]
 8000d2e:	b973      	cbnz	r3, 8000d4e <_svfiprintf_r+0x36>
 8000d30:	2140      	movs	r1, #64	@ 0x40
 8000d32:	f7ff ff09 	bl	8000b48 <_malloc_r>
 8000d36:	6028      	str	r0, [r5, #0]
 8000d38:	6128      	str	r0, [r5, #16]
 8000d3a:	b930      	cbnz	r0, 8000d4a <_svfiprintf_r+0x32>
 8000d3c:	230c      	movs	r3, #12
 8000d3e:	603b      	str	r3, [r7, #0]
 8000d40:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000d44:	b01d      	add	sp, #116	@ 0x74
 8000d46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d4a:	2340      	movs	r3, #64	@ 0x40
 8000d4c:	616b      	str	r3, [r5, #20]
 8000d4e:	2300      	movs	r3, #0
 8000d50:	9309      	str	r3, [sp, #36]	@ 0x24
 8000d52:	2320      	movs	r3, #32
 8000d54:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000d58:	f8cd 800c 	str.w	r8, [sp, #12]
 8000d5c:	2330      	movs	r3, #48	@ 0x30
 8000d5e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8000efc <_svfiprintf_r+0x1e4>
 8000d62:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000d66:	f04f 0901 	mov.w	r9, #1
 8000d6a:	4623      	mov	r3, r4
 8000d6c:	469a      	mov	sl, r3
 8000d6e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000d72:	b10a      	cbz	r2, 8000d78 <_svfiprintf_r+0x60>
 8000d74:	2a25      	cmp	r2, #37	@ 0x25
 8000d76:	d1f9      	bne.n	8000d6c <_svfiprintf_r+0x54>
 8000d78:	ebba 0b04 	subs.w	fp, sl, r4
 8000d7c:	d00b      	beq.n	8000d96 <_svfiprintf_r+0x7e>
 8000d7e:	465b      	mov	r3, fp
 8000d80:	4622      	mov	r2, r4
 8000d82:	4629      	mov	r1, r5
 8000d84:	4638      	mov	r0, r7
 8000d86:	f7ff ff6b 	bl	8000c60 <__ssputs_r>
 8000d8a:	3001      	adds	r0, #1
 8000d8c:	f000 80a7 	beq.w	8000ede <_svfiprintf_r+0x1c6>
 8000d90:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000d92:	445a      	add	r2, fp
 8000d94:	9209      	str	r2, [sp, #36]	@ 0x24
 8000d96:	f89a 3000 	ldrb.w	r3, [sl]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	f000 809f 	beq.w	8000ede <_svfiprintf_r+0x1c6>
 8000da0:	2300      	movs	r3, #0
 8000da2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000da6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000daa:	f10a 0a01 	add.w	sl, sl, #1
 8000dae:	9304      	str	r3, [sp, #16]
 8000db0:	9307      	str	r3, [sp, #28]
 8000db2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000db6:	931a      	str	r3, [sp, #104]	@ 0x68
 8000db8:	4654      	mov	r4, sl
 8000dba:	2205      	movs	r2, #5
 8000dbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000dc0:	484e      	ldr	r0, [pc, #312]	@ (8000efc <_svfiprintf_r+0x1e4>)
 8000dc2:	f7ff fa05 	bl	80001d0 <memchr>
 8000dc6:	9a04      	ldr	r2, [sp, #16]
 8000dc8:	b9d8      	cbnz	r0, 8000e02 <_svfiprintf_r+0xea>
 8000dca:	06d0      	lsls	r0, r2, #27
 8000dcc:	bf44      	itt	mi
 8000dce:	2320      	movmi	r3, #32
 8000dd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000dd4:	0711      	lsls	r1, r2, #28
 8000dd6:	bf44      	itt	mi
 8000dd8:	232b      	movmi	r3, #43	@ 0x2b
 8000dda:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000dde:	f89a 3000 	ldrb.w	r3, [sl]
 8000de2:	2b2a      	cmp	r3, #42	@ 0x2a
 8000de4:	d015      	beq.n	8000e12 <_svfiprintf_r+0xfa>
 8000de6:	9a07      	ldr	r2, [sp, #28]
 8000de8:	4654      	mov	r4, sl
 8000dea:	2000      	movs	r0, #0
 8000dec:	f04f 0c0a 	mov.w	ip, #10
 8000df0:	4621      	mov	r1, r4
 8000df2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000df6:	3b30      	subs	r3, #48	@ 0x30
 8000df8:	2b09      	cmp	r3, #9
 8000dfa:	d94b      	bls.n	8000e94 <_svfiprintf_r+0x17c>
 8000dfc:	b1b0      	cbz	r0, 8000e2c <_svfiprintf_r+0x114>
 8000dfe:	9207      	str	r2, [sp, #28]
 8000e00:	e014      	b.n	8000e2c <_svfiprintf_r+0x114>
 8000e02:	eba0 0308 	sub.w	r3, r0, r8
 8000e06:	fa09 f303 	lsl.w	r3, r9, r3
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	9304      	str	r3, [sp, #16]
 8000e0e:	46a2      	mov	sl, r4
 8000e10:	e7d2      	b.n	8000db8 <_svfiprintf_r+0xa0>
 8000e12:	9b03      	ldr	r3, [sp, #12]
 8000e14:	1d19      	adds	r1, r3, #4
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	9103      	str	r1, [sp, #12]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	bfbb      	ittet	lt
 8000e1e:	425b      	neglt	r3, r3
 8000e20:	f042 0202 	orrlt.w	r2, r2, #2
 8000e24:	9307      	strge	r3, [sp, #28]
 8000e26:	9307      	strlt	r3, [sp, #28]
 8000e28:	bfb8      	it	lt
 8000e2a:	9204      	strlt	r2, [sp, #16]
 8000e2c:	7823      	ldrb	r3, [r4, #0]
 8000e2e:	2b2e      	cmp	r3, #46	@ 0x2e
 8000e30:	d10a      	bne.n	8000e48 <_svfiprintf_r+0x130>
 8000e32:	7863      	ldrb	r3, [r4, #1]
 8000e34:	2b2a      	cmp	r3, #42	@ 0x2a
 8000e36:	d132      	bne.n	8000e9e <_svfiprintf_r+0x186>
 8000e38:	9b03      	ldr	r3, [sp, #12]
 8000e3a:	1d1a      	adds	r2, r3, #4
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	9203      	str	r2, [sp, #12]
 8000e40:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000e44:	3402      	adds	r4, #2
 8000e46:	9305      	str	r3, [sp, #20]
 8000e48:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8000f00 <_svfiprintf_r+0x1e8>
 8000e4c:	7821      	ldrb	r1, [r4, #0]
 8000e4e:	2203      	movs	r2, #3
 8000e50:	4650      	mov	r0, sl
 8000e52:	f7ff f9bd 	bl	80001d0 <memchr>
 8000e56:	b138      	cbz	r0, 8000e68 <_svfiprintf_r+0x150>
 8000e58:	9b04      	ldr	r3, [sp, #16]
 8000e5a:	eba0 000a 	sub.w	r0, r0, sl
 8000e5e:	2240      	movs	r2, #64	@ 0x40
 8000e60:	4082      	lsls	r2, r0
 8000e62:	4313      	orrs	r3, r2
 8000e64:	3401      	adds	r4, #1
 8000e66:	9304      	str	r3, [sp, #16]
 8000e68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000e6c:	4825      	ldr	r0, [pc, #148]	@ (8000f04 <_svfiprintf_r+0x1ec>)
 8000e6e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000e72:	2206      	movs	r2, #6
 8000e74:	f7ff f9ac 	bl	80001d0 <memchr>
 8000e78:	2800      	cmp	r0, #0
 8000e7a:	d036      	beq.n	8000eea <_svfiprintf_r+0x1d2>
 8000e7c:	4b22      	ldr	r3, [pc, #136]	@ (8000f08 <_svfiprintf_r+0x1f0>)
 8000e7e:	bb1b      	cbnz	r3, 8000ec8 <_svfiprintf_r+0x1b0>
 8000e80:	9b03      	ldr	r3, [sp, #12]
 8000e82:	3307      	adds	r3, #7
 8000e84:	f023 0307 	bic.w	r3, r3, #7
 8000e88:	3308      	adds	r3, #8
 8000e8a:	9303      	str	r3, [sp, #12]
 8000e8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000e8e:	4433      	add	r3, r6
 8000e90:	9309      	str	r3, [sp, #36]	@ 0x24
 8000e92:	e76a      	b.n	8000d6a <_svfiprintf_r+0x52>
 8000e94:	fb0c 3202 	mla	r2, ip, r2, r3
 8000e98:	460c      	mov	r4, r1
 8000e9a:	2001      	movs	r0, #1
 8000e9c:	e7a8      	b.n	8000df0 <_svfiprintf_r+0xd8>
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	3401      	adds	r4, #1
 8000ea2:	9305      	str	r3, [sp, #20]
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	f04f 0c0a 	mov.w	ip, #10
 8000eaa:	4620      	mov	r0, r4
 8000eac:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000eb0:	3a30      	subs	r2, #48	@ 0x30
 8000eb2:	2a09      	cmp	r2, #9
 8000eb4:	d903      	bls.n	8000ebe <_svfiprintf_r+0x1a6>
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d0c6      	beq.n	8000e48 <_svfiprintf_r+0x130>
 8000eba:	9105      	str	r1, [sp, #20]
 8000ebc:	e7c4      	b.n	8000e48 <_svfiprintf_r+0x130>
 8000ebe:	fb0c 2101 	mla	r1, ip, r1, r2
 8000ec2:	4604      	mov	r4, r0
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	e7f0      	b.n	8000eaa <_svfiprintf_r+0x192>
 8000ec8:	ab03      	add	r3, sp, #12
 8000eca:	9300      	str	r3, [sp, #0]
 8000ecc:	462a      	mov	r2, r5
 8000ece:	4b0f      	ldr	r3, [pc, #60]	@ (8000f0c <_svfiprintf_r+0x1f4>)
 8000ed0:	a904      	add	r1, sp, #16
 8000ed2:	4638      	mov	r0, r7
 8000ed4:	f3af 8000 	nop.w
 8000ed8:	1c42      	adds	r2, r0, #1
 8000eda:	4606      	mov	r6, r0
 8000edc:	d1d6      	bne.n	8000e8c <_svfiprintf_r+0x174>
 8000ede:	89ab      	ldrh	r3, [r5, #12]
 8000ee0:	065b      	lsls	r3, r3, #25
 8000ee2:	f53f af2d 	bmi.w	8000d40 <_svfiprintf_r+0x28>
 8000ee6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000ee8:	e72c      	b.n	8000d44 <_svfiprintf_r+0x2c>
 8000eea:	ab03      	add	r3, sp, #12
 8000eec:	9300      	str	r3, [sp, #0]
 8000eee:	462a      	mov	r2, r5
 8000ef0:	4b06      	ldr	r3, [pc, #24]	@ (8000f0c <_svfiprintf_r+0x1f4>)
 8000ef2:	a904      	add	r1, sp, #16
 8000ef4:	4638      	mov	r0, r7
 8000ef6:	f000 f879 	bl	8000fec <_printf_i>
 8000efa:	e7ed      	b.n	8000ed8 <_svfiprintf_r+0x1c0>
 8000efc:	08001390 	.word	0x08001390
 8000f00:	08001396 	.word	0x08001396
 8000f04:	0800139a 	.word	0x0800139a
 8000f08:	00000000 	.word	0x00000000
 8000f0c:	08000c61 	.word	0x08000c61

08000f10 <_printf_common>:
 8000f10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f14:	4616      	mov	r6, r2
 8000f16:	4698      	mov	r8, r3
 8000f18:	688a      	ldr	r2, [r1, #8]
 8000f1a:	690b      	ldr	r3, [r1, #16]
 8000f1c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000f20:	4293      	cmp	r3, r2
 8000f22:	bfb8      	it	lt
 8000f24:	4613      	movlt	r3, r2
 8000f26:	6033      	str	r3, [r6, #0]
 8000f28:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000f2c:	4607      	mov	r7, r0
 8000f2e:	460c      	mov	r4, r1
 8000f30:	b10a      	cbz	r2, 8000f36 <_printf_common+0x26>
 8000f32:	3301      	adds	r3, #1
 8000f34:	6033      	str	r3, [r6, #0]
 8000f36:	6823      	ldr	r3, [r4, #0]
 8000f38:	0699      	lsls	r1, r3, #26
 8000f3a:	bf42      	ittt	mi
 8000f3c:	6833      	ldrmi	r3, [r6, #0]
 8000f3e:	3302      	addmi	r3, #2
 8000f40:	6033      	strmi	r3, [r6, #0]
 8000f42:	6825      	ldr	r5, [r4, #0]
 8000f44:	f015 0506 	ands.w	r5, r5, #6
 8000f48:	d106      	bne.n	8000f58 <_printf_common+0x48>
 8000f4a:	f104 0a19 	add.w	sl, r4, #25
 8000f4e:	68e3      	ldr	r3, [r4, #12]
 8000f50:	6832      	ldr	r2, [r6, #0]
 8000f52:	1a9b      	subs	r3, r3, r2
 8000f54:	42ab      	cmp	r3, r5
 8000f56:	dc26      	bgt.n	8000fa6 <_printf_common+0x96>
 8000f58:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000f5c:	6822      	ldr	r2, [r4, #0]
 8000f5e:	3b00      	subs	r3, #0
 8000f60:	bf18      	it	ne
 8000f62:	2301      	movne	r3, #1
 8000f64:	0692      	lsls	r2, r2, #26
 8000f66:	d42b      	bmi.n	8000fc0 <_printf_common+0xb0>
 8000f68:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000f6c:	4641      	mov	r1, r8
 8000f6e:	4638      	mov	r0, r7
 8000f70:	47c8      	blx	r9
 8000f72:	3001      	adds	r0, #1
 8000f74:	d01e      	beq.n	8000fb4 <_printf_common+0xa4>
 8000f76:	6823      	ldr	r3, [r4, #0]
 8000f78:	6922      	ldr	r2, [r4, #16]
 8000f7a:	f003 0306 	and.w	r3, r3, #6
 8000f7e:	2b04      	cmp	r3, #4
 8000f80:	bf02      	ittt	eq
 8000f82:	68e5      	ldreq	r5, [r4, #12]
 8000f84:	6833      	ldreq	r3, [r6, #0]
 8000f86:	1aed      	subeq	r5, r5, r3
 8000f88:	68a3      	ldr	r3, [r4, #8]
 8000f8a:	bf0c      	ite	eq
 8000f8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000f90:	2500      	movne	r5, #0
 8000f92:	4293      	cmp	r3, r2
 8000f94:	bfc4      	itt	gt
 8000f96:	1a9b      	subgt	r3, r3, r2
 8000f98:	18ed      	addgt	r5, r5, r3
 8000f9a:	2600      	movs	r6, #0
 8000f9c:	341a      	adds	r4, #26
 8000f9e:	42b5      	cmp	r5, r6
 8000fa0:	d11a      	bne.n	8000fd8 <_printf_common+0xc8>
 8000fa2:	2000      	movs	r0, #0
 8000fa4:	e008      	b.n	8000fb8 <_printf_common+0xa8>
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	4652      	mov	r2, sl
 8000faa:	4641      	mov	r1, r8
 8000fac:	4638      	mov	r0, r7
 8000fae:	47c8      	blx	r9
 8000fb0:	3001      	adds	r0, #1
 8000fb2:	d103      	bne.n	8000fbc <_printf_common+0xac>
 8000fb4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000fb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fbc:	3501      	adds	r5, #1
 8000fbe:	e7c6      	b.n	8000f4e <_printf_common+0x3e>
 8000fc0:	18e1      	adds	r1, r4, r3
 8000fc2:	1c5a      	adds	r2, r3, #1
 8000fc4:	2030      	movs	r0, #48	@ 0x30
 8000fc6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000fca:	4422      	add	r2, r4
 8000fcc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000fd0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000fd4:	3302      	adds	r3, #2
 8000fd6:	e7c7      	b.n	8000f68 <_printf_common+0x58>
 8000fd8:	2301      	movs	r3, #1
 8000fda:	4622      	mov	r2, r4
 8000fdc:	4641      	mov	r1, r8
 8000fde:	4638      	mov	r0, r7
 8000fe0:	47c8      	blx	r9
 8000fe2:	3001      	adds	r0, #1
 8000fe4:	d0e6      	beq.n	8000fb4 <_printf_common+0xa4>
 8000fe6:	3601      	adds	r6, #1
 8000fe8:	e7d9      	b.n	8000f9e <_printf_common+0x8e>
	...

08000fec <_printf_i>:
 8000fec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000ff0:	7e0f      	ldrb	r7, [r1, #24]
 8000ff2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8000ff4:	2f78      	cmp	r7, #120	@ 0x78
 8000ff6:	4691      	mov	r9, r2
 8000ff8:	4680      	mov	r8, r0
 8000ffa:	460c      	mov	r4, r1
 8000ffc:	469a      	mov	sl, r3
 8000ffe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001002:	d807      	bhi.n	8001014 <_printf_i+0x28>
 8001004:	2f62      	cmp	r7, #98	@ 0x62
 8001006:	d80a      	bhi.n	800101e <_printf_i+0x32>
 8001008:	2f00      	cmp	r7, #0
 800100a:	f000 80d1 	beq.w	80011b0 <_printf_i+0x1c4>
 800100e:	2f58      	cmp	r7, #88	@ 0x58
 8001010:	f000 80b8 	beq.w	8001184 <_printf_i+0x198>
 8001014:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001018:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800101c:	e03a      	b.n	8001094 <_printf_i+0xa8>
 800101e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001022:	2b15      	cmp	r3, #21
 8001024:	d8f6      	bhi.n	8001014 <_printf_i+0x28>
 8001026:	a101      	add	r1, pc, #4	@ (adr r1, 800102c <_printf_i+0x40>)
 8001028:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800102c:	08001085 	.word	0x08001085
 8001030:	08001099 	.word	0x08001099
 8001034:	08001015 	.word	0x08001015
 8001038:	08001015 	.word	0x08001015
 800103c:	08001015 	.word	0x08001015
 8001040:	08001015 	.word	0x08001015
 8001044:	08001099 	.word	0x08001099
 8001048:	08001015 	.word	0x08001015
 800104c:	08001015 	.word	0x08001015
 8001050:	08001015 	.word	0x08001015
 8001054:	08001015 	.word	0x08001015
 8001058:	08001197 	.word	0x08001197
 800105c:	080010c3 	.word	0x080010c3
 8001060:	08001151 	.word	0x08001151
 8001064:	08001015 	.word	0x08001015
 8001068:	08001015 	.word	0x08001015
 800106c:	080011b9 	.word	0x080011b9
 8001070:	08001015 	.word	0x08001015
 8001074:	080010c3 	.word	0x080010c3
 8001078:	08001015 	.word	0x08001015
 800107c:	08001015 	.word	0x08001015
 8001080:	08001159 	.word	0x08001159
 8001084:	6833      	ldr	r3, [r6, #0]
 8001086:	1d1a      	adds	r2, r3, #4
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	6032      	str	r2, [r6, #0]
 800108c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001090:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001094:	2301      	movs	r3, #1
 8001096:	e09c      	b.n	80011d2 <_printf_i+0x1e6>
 8001098:	6833      	ldr	r3, [r6, #0]
 800109a:	6820      	ldr	r0, [r4, #0]
 800109c:	1d19      	adds	r1, r3, #4
 800109e:	6031      	str	r1, [r6, #0]
 80010a0:	0606      	lsls	r6, r0, #24
 80010a2:	d501      	bpl.n	80010a8 <_printf_i+0xbc>
 80010a4:	681d      	ldr	r5, [r3, #0]
 80010a6:	e003      	b.n	80010b0 <_printf_i+0xc4>
 80010a8:	0645      	lsls	r5, r0, #25
 80010aa:	d5fb      	bpl.n	80010a4 <_printf_i+0xb8>
 80010ac:	f9b3 5000 	ldrsh.w	r5, [r3]
 80010b0:	2d00      	cmp	r5, #0
 80010b2:	da03      	bge.n	80010bc <_printf_i+0xd0>
 80010b4:	232d      	movs	r3, #45	@ 0x2d
 80010b6:	426d      	negs	r5, r5
 80010b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80010bc:	4858      	ldr	r0, [pc, #352]	@ (8001220 <_printf_i+0x234>)
 80010be:	230a      	movs	r3, #10
 80010c0:	e011      	b.n	80010e6 <_printf_i+0xfa>
 80010c2:	6821      	ldr	r1, [r4, #0]
 80010c4:	6833      	ldr	r3, [r6, #0]
 80010c6:	0608      	lsls	r0, r1, #24
 80010c8:	f853 5b04 	ldr.w	r5, [r3], #4
 80010cc:	d402      	bmi.n	80010d4 <_printf_i+0xe8>
 80010ce:	0649      	lsls	r1, r1, #25
 80010d0:	bf48      	it	mi
 80010d2:	b2ad      	uxthmi	r5, r5
 80010d4:	2f6f      	cmp	r7, #111	@ 0x6f
 80010d6:	4852      	ldr	r0, [pc, #328]	@ (8001220 <_printf_i+0x234>)
 80010d8:	6033      	str	r3, [r6, #0]
 80010da:	bf14      	ite	ne
 80010dc:	230a      	movne	r3, #10
 80010de:	2308      	moveq	r3, #8
 80010e0:	2100      	movs	r1, #0
 80010e2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80010e6:	6866      	ldr	r6, [r4, #4]
 80010e8:	60a6      	str	r6, [r4, #8]
 80010ea:	2e00      	cmp	r6, #0
 80010ec:	db05      	blt.n	80010fa <_printf_i+0x10e>
 80010ee:	6821      	ldr	r1, [r4, #0]
 80010f0:	432e      	orrs	r6, r5
 80010f2:	f021 0104 	bic.w	r1, r1, #4
 80010f6:	6021      	str	r1, [r4, #0]
 80010f8:	d04b      	beq.n	8001192 <_printf_i+0x1a6>
 80010fa:	4616      	mov	r6, r2
 80010fc:	fbb5 f1f3 	udiv	r1, r5, r3
 8001100:	fb03 5711 	mls	r7, r3, r1, r5
 8001104:	5dc7      	ldrb	r7, [r0, r7]
 8001106:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800110a:	462f      	mov	r7, r5
 800110c:	42bb      	cmp	r3, r7
 800110e:	460d      	mov	r5, r1
 8001110:	d9f4      	bls.n	80010fc <_printf_i+0x110>
 8001112:	2b08      	cmp	r3, #8
 8001114:	d10b      	bne.n	800112e <_printf_i+0x142>
 8001116:	6823      	ldr	r3, [r4, #0]
 8001118:	07df      	lsls	r7, r3, #31
 800111a:	d508      	bpl.n	800112e <_printf_i+0x142>
 800111c:	6923      	ldr	r3, [r4, #16]
 800111e:	6861      	ldr	r1, [r4, #4]
 8001120:	4299      	cmp	r1, r3
 8001122:	bfde      	ittt	le
 8001124:	2330      	movle	r3, #48	@ 0x30
 8001126:	f806 3c01 	strble.w	r3, [r6, #-1]
 800112a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800112e:	1b92      	subs	r2, r2, r6
 8001130:	6122      	str	r2, [r4, #16]
 8001132:	f8cd a000 	str.w	sl, [sp]
 8001136:	464b      	mov	r3, r9
 8001138:	aa03      	add	r2, sp, #12
 800113a:	4621      	mov	r1, r4
 800113c:	4640      	mov	r0, r8
 800113e:	f7ff fee7 	bl	8000f10 <_printf_common>
 8001142:	3001      	adds	r0, #1
 8001144:	d14a      	bne.n	80011dc <_printf_i+0x1f0>
 8001146:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800114a:	b004      	add	sp, #16
 800114c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001150:	6823      	ldr	r3, [r4, #0]
 8001152:	f043 0320 	orr.w	r3, r3, #32
 8001156:	6023      	str	r3, [r4, #0]
 8001158:	4832      	ldr	r0, [pc, #200]	@ (8001224 <_printf_i+0x238>)
 800115a:	2778      	movs	r7, #120	@ 0x78
 800115c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001160:	6823      	ldr	r3, [r4, #0]
 8001162:	6831      	ldr	r1, [r6, #0]
 8001164:	061f      	lsls	r7, r3, #24
 8001166:	f851 5b04 	ldr.w	r5, [r1], #4
 800116a:	d402      	bmi.n	8001172 <_printf_i+0x186>
 800116c:	065f      	lsls	r7, r3, #25
 800116e:	bf48      	it	mi
 8001170:	b2ad      	uxthmi	r5, r5
 8001172:	6031      	str	r1, [r6, #0]
 8001174:	07d9      	lsls	r1, r3, #31
 8001176:	bf44      	itt	mi
 8001178:	f043 0320 	orrmi.w	r3, r3, #32
 800117c:	6023      	strmi	r3, [r4, #0]
 800117e:	b11d      	cbz	r5, 8001188 <_printf_i+0x19c>
 8001180:	2310      	movs	r3, #16
 8001182:	e7ad      	b.n	80010e0 <_printf_i+0xf4>
 8001184:	4826      	ldr	r0, [pc, #152]	@ (8001220 <_printf_i+0x234>)
 8001186:	e7e9      	b.n	800115c <_printf_i+0x170>
 8001188:	6823      	ldr	r3, [r4, #0]
 800118a:	f023 0320 	bic.w	r3, r3, #32
 800118e:	6023      	str	r3, [r4, #0]
 8001190:	e7f6      	b.n	8001180 <_printf_i+0x194>
 8001192:	4616      	mov	r6, r2
 8001194:	e7bd      	b.n	8001112 <_printf_i+0x126>
 8001196:	6833      	ldr	r3, [r6, #0]
 8001198:	6825      	ldr	r5, [r4, #0]
 800119a:	6961      	ldr	r1, [r4, #20]
 800119c:	1d18      	adds	r0, r3, #4
 800119e:	6030      	str	r0, [r6, #0]
 80011a0:	062e      	lsls	r6, r5, #24
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	d501      	bpl.n	80011aa <_printf_i+0x1be>
 80011a6:	6019      	str	r1, [r3, #0]
 80011a8:	e002      	b.n	80011b0 <_printf_i+0x1c4>
 80011aa:	0668      	lsls	r0, r5, #25
 80011ac:	d5fb      	bpl.n	80011a6 <_printf_i+0x1ba>
 80011ae:	8019      	strh	r1, [r3, #0]
 80011b0:	2300      	movs	r3, #0
 80011b2:	6123      	str	r3, [r4, #16]
 80011b4:	4616      	mov	r6, r2
 80011b6:	e7bc      	b.n	8001132 <_printf_i+0x146>
 80011b8:	6833      	ldr	r3, [r6, #0]
 80011ba:	1d1a      	adds	r2, r3, #4
 80011bc:	6032      	str	r2, [r6, #0]
 80011be:	681e      	ldr	r6, [r3, #0]
 80011c0:	6862      	ldr	r2, [r4, #4]
 80011c2:	2100      	movs	r1, #0
 80011c4:	4630      	mov	r0, r6
 80011c6:	f7ff f803 	bl	80001d0 <memchr>
 80011ca:	b108      	cbz	r0, 80011d0 <_printf_i+0x1e4>
 80011cc:	1b80      	subs	r0, r0, r6
 80011ce:	6060      	str	r0, [r4, #4]
 80011d0:	6863      	ldr	r3, [r4, #4]
 80011d2:	6123      	str	r3, [r4, #16]
 80011d4:	2300      	movs	r3, #0
 80011d6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80011da:	e7aa      	b.n	8001132 <_printf_i+0x146>
 80011dc:	6923      	ldr	r3, [r4, #16]
 80011de:	4632      	mov	r2, r6
 80011e0:	4649      	mov	r1, r9
 80011e2:	4640      	mov	r0, r8
 80011e4:	47d0      	blx	sl
 80011e6:	3001      	adds	r0, #1
 80011e8:	d0ad      	beq.n	8001146 <_printf_i+0x15a>
 80011ea:	6823      	ldr	r3, [r4, #0]
 80011ec:	079b      	lsls	r3, r3, #30
 80011ee:	d413      	bmi.n	8001218 <_printf_i+0x22c>
 80011f0:	68e0      	ldr	r0, [r4, #12]
 80011f2:	9b03      	ldr	r3, [sp, #12]
 80011f4:	4298      	cmp	r0, r3
 80011f6:	bfb8      	it	lt
 80011f8:	4618      	movlt	r0, r3
 80011fa:	e7a6      	b.n	800114a <_printf_i+0x15e>
 80011fc:	2301      	movs	r3, #1
 80011fe:	4632      	mov	r2, r6
 8001200:	4649      	mov	r1, r9
 8001202:	4640      	mov	r0, r8
 8001204:	47d0      	blx	sl
 8001206:	3001      	adds	r0, #1
 8001208:	d09d      	beq.n	8001146 <_printf_i+0x15a>
 800120a:	3501      	adds	r5, #1
 800120c:	68e3      	ldr	r3, [r4, #12]
 800120e:	9903      	ldr	r1, [sp, #12]
 8001210:	1a5b      	subs	r3, r3, r1
 8001212:	42ab      	cmp	r3, r5
 8001214:	dcf2      	bgt.n	80011fc <_printf_i+0x210>
 8001216:	e7eb      	b.n	80011f0 <_printf_i+0x204>
 8001218:	2500      	movs	r5, #0
 800121a:	f104 0619 	add.w	r6, r4, #25
 800121e:	e7f5      	b.n	800120c <_printf_i+0x220>
 8001220:	080013a1 	.word	0x080013a1
 8001224:	080013b2 	.word	0x080013b2

08001228 <memmove>:
 8001228:	4288      	cmp	r0, r1
 800122a:	b510      	push	{r4, lr}
 800122c:	eb01 0402 	add.w	r4, r1, r2
 8001230:	d902      	bls.n	8001238 <memmove+0x10>
 8001232:	4284      	cmp	r4, r0
 8001234:	4623      	mov	r3, r4
 8001236:	d807      	bhi.n	8001248 <memmove+0x20>
 8001238:	1e43      	subs	r3, r0, #1
 800123a:	42a1      	cmp	r1, r4
 800123c:	d008      	beq.n	8001250 <memmove+0x28>
 800123e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001242:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001246:	e7f8      	b.n	800123a <memmove+0x12>
 8001248:	4402      	add	r2, r0
 800124a:	4601      	mov	r1, r0
 800124c:	428a      	cmp	r2, r1
 800124e:	d100      	bne.n	8001252 <memmove+0x2a>
 8001250:	bd10      	pop	{r4, pc}
 8001252:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001256:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800125a:	e7f7      	b.n	800124c <memmove+0x24>

0800125c <_sbrk_r>:
 800125c:	b538      	push	{r3, r4, r5, lr}
 800125e:	4d06      	ldr	r5, [pc, #24]	@ (8001278 <_sbrk_r+0x1c>)
 8001260:	2300      	movs	r3, #0
 8001262:	4604      	mov	r4, r0
 8001264:	4608      	mov	r0, r1
 8001266:	602b      	str	r3, [r5, #0]
 8001268:	f7ff fa82 	bl	8000770 <_sbrk>
 800126c:	1c43      	adds	r3, r0, #1
 800126e:	d102      	bne.n	8001276 <_sbrk_r+0x1a>
 8001270:	682b      	ldr	r3, [r5, #0]
 8001272:	b103      	cbz	r3, 8001276 <_sbrk_r+0x1a>
 8001274:	6023      	str	r3, [r4, #0]
 8001276:	bd38      	pop	{r3, r4, r5, pc}
 8001278:	200001ac 	.word	0x200001ac

0800127c <memcpy>:
 800127c:	440a      	add	r2, r1
 800127e:	4291      	cmp	r1, r2
 8001280:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8001284:	d100      	bne.n	8001288 <memcpy+0xc>
 8001286:	4770      	bx	lr
 8001288:	b510      	push	{r4, lr}
 800128a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800128e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001292:	4291      	cmp	r1, r2
 8001294:	d1f9      	bne.n	800128a <memcpy+0xe>
 8001296:	bd10      	pop	{r4, pc}

08001298 <_realloc_r>:
 8001298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800129c:	4607      	mov	r7, r0
 800129e:	4614      	mov	r4, r2
 80012a0:	460d      	mov	r5, r1
 80012a2:	b921      	cbnz	r1, 80012ae <_realloc_r+0x16>
 80012a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80012a8:	4611      	mov	r1, r2
 80012aa:	f7ff bc4d 	b.w	8000b48 <_malloc_r>
 80012ae:	b92a      	cbnz	r2, 80012bc <_realloc_r+0x24>
 80012b0:	f7ff fbde 	bl	8000a70 <_free_r>
 80012b4:	4625      	mov	r5, r4
 80012b6:	4628      	mov	r0, r5
 80012b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80012bc:	f000 f81a 	bl	80012f4 <_malloc_usable_size_r>
 80012c0:	4284      	cmp	r4, r0
 80012c2:	4606      	mov	r6, r0
 80012c4:	d802      	bhi.n	80012cc <_realloc_r+0x34>
 80012c6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80012ca:	d8f4      	bhi.n	80012b6 <_realloc_r+0x1e>
 80012cc:	4621      	mov	r1, r4
 80012ce:	4638      	mov	r0, r7
 80012d0:	f7ff fc3a 	bl	8000b48 <_malloc_r>
 80012d4:	4680      	mov	r8, r0
 80012d6:	b908      	cbnz	r0, 80012dc <_realloc_r+0x44>
 80012d8:	4645      	mov	r5, r8
 80012da:	e7ec      	b.n	80012b6 <_realloc_r+0x1e>
 80012dc:	42b4      	cmp	r4, r6
 80012de:	4622      	mov	r2, r4
 80012e0:	4629      	mov	r1, r5
 80012e2:	bf28      	it	cs
 80012e4:	4632      	movcs	r2, r6
 80012e6:	f7ff ffc9 	bl	800127c <memcpy>
 80012ea:	4629      	mov	r1, r5
 80012ec:	4638      	mov	r0, r7
 80012ee:	f7ff fbbf 	bl	8000a70 <_free_r>
 80012f2:	e7f1      	b.n	80012d8 <_realloc_r+0x40>

080012f4 <_malloc_usable_size_r>:
 80012f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80012f8:	1f18      	subs	r0, r3, #4
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	bfbc      	itt	lt
 80012fe:	580b      	ldrlt	r3, [r1, r0]
 8001300:	18c0      	addlt	r0, r0, r3
 8001302:	4770      	bx	lr

08001304 <_init>:
 8001304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001306:	bf00      	nop
 8001308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800130a:	bc08      	pop	{r3}
 800130c:	469e      	mov	lr, r3
 800130e:	4770      	bx	lr

08001310 <_fini>:
 8001310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001312:	bf00      	nop
 8001314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001316:	bc08      	pop	{r3}
 8001318:	469e      	mov	lr, r3
 800131a:	4770      	bx	lr
